{
	"project": {
		"name": "The ember-data API",
		"description": "The ember-data API: a data persistence library for Ember.js",
		"url": "https://github.com/emberjs/data",
		"version": "v3.16.0-alpha.2"
	},
	"files": {
		"../../node_modules/ember-inflector/addon/lib/ext/string.js": {
			"name": "../../node_modules/ember-inflector/addon/lib/ext/string.js",
			"modules": {},
			"classes": {},
			"fors": { "String": 1 },
			"namespaces": {}
		},
		"../../node_modules/ember-inflector/addon/lib/helpers/pluralize.js": {
			"name": "../../node_modules/ember-inflector/addon/lib/helpers/pluralize.js",
			"modules": {},
			"classes": {},
			"fors": { "Ember.HTMLBars.helpers": 1 },
			"namespaces": {}
		},
		"../../node_modules/ember-inflector/addon/lib/helpers/singularize.js": {
			"name": "../../node_modules/ember-inflector/addon/lib/helpers/singularize.js",
			"modules": {},
			"classes": {},
			"fors": { "Ember.HTMLBars.helpers": 1 },
			"namespaces": {}
		},
		"../../node_modules/ember-inflector/addon/lib/system/inflector.js": {
			"name": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"modules": {},
			"classes": { "Ember.Inflector": 1 },
			"fors": {},
			"namespaces": { "Ember": 1 }
		},
		"../adapter/addon/-private/build-url-mixin.js": {
			"name": "../adapter/addon/-private/build-url-mixin.js",
			"modules": {},
			"classes": { "BuildURLMixin": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../adapter/addon/-private/index.js": {
			"name": "../adapter/addon/-private/index.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../adapter/addon/error.js": {
			"name": "../adapter/addon/error.js",
			"modules": {},
			"classes": {
				"AdapterError": 1,
				"InvalidError": 1,
				"TimeoutError": 1,
				"AbortError": 1,
				"UnauthorizedError": 1,
				"ForbiddenError": 1,
				"NotFoundError": 1,
				"ConflictError": 1,
				"ServerError": 1
			},
			"fors": {},
			"namespaces": {}
		},
		"../adapter/addon/index.js": {
			"name": "../adapter/addon/index.js",
			"modules": { "@ember-data/adapter": 1 },
			"classes": { "Adapter": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../adapter/addon/json-api.js": {
			"name": "../adapter/addon/json-api.js",
			"modules": {},
			"classes": { "JSONAPIAdapter": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../adapter/addon/rest.js": {
			"name": "../adapter/addon/rest.js",
			"modules": {},
			"classes": { "RESTAdapter": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../debug/addon/index.js": {
			"name": "../debug/addon/index.js",
			"modules": { "@ember-data/debug": 1 },
			"classes": { "InspectorDataAdapter": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../model/addon/-private/attr.js": {
			"name": "../model/addon/-private/attr.js",
			"modules": {},
			"classes": {},
			"fors": { "@ember-data/model": 1 },
			"namespaces": {}
		},
		"../model/addon/-private/belongs-to.js": {
			"name": "../model/addon/-private/belongs-to.js",
			"modules": {},
			"classes": {},
			"fors": { "@ember-data/model": 1 },
			"namespaces": {}
		},
		"../model/addon/-private/errors.js": {
			"name": "../model/addon/-private/errors.js",
			"modules": {},
			"classes": { "Errors": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../model/addon/-private/has-many.js": {
			"name": "../model/addon/-private/has-many.js",
			"modules": {},
			"classes": {},
			"fors": { "@ember-data/model": 1 },
			"namespaces": {}
		},
		"../model/addon/-private/model.js": {
			"name": "../model/addon/-private/model.js",
			"modules": {},
			"classes": {},
			"fors": { "Model": 1 },
			"namespaces": {}
		},
		"../model/addon/index.ts": {
			"name": "../model/addon/index.ts",
			"modules": { "@ember-data/model": 1 },
			"classes": { "Model": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../record-data/addon/-private/relationships/state/has-many.ts": {
			"name": "../record-data/addon/-private/relationships/state/has-many.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../record-data/addon/-private/relationships/state/relationship.ts": {
			"name": "../record-data/addon/-private/relationships/state/relationship.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../record-data/addon/-private/record-data.ts": {
			"name": "../record-data/addon/-private/record-data.ts",
			"modules": { "@ember-data/record-data": 1 },
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/transforms/boolean.js": {
			"name": "../serializer/addon/-private/transforms/boolean.js",
			"modules": {},
			"classes": { "BooleanTransform": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/transforms/date.js": {
			"name": "../serializer/addon/-private/transforms/date.js",
			"modules": {},
			"classes": { "DateTransform": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/transforms/number.js": {
			"name": "../serializer/addon/-private/transforms/number.js",
			"modules": {},
			"classes": { "NumberTransform": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/transforms/string.js": {
			"name": "../serializer/addon/-private/transforms/string.js",
			"modules": {},
			"classes": { "StringTransform": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/transforms/transform.js": {
			"name": "../serializer/addon/-private/transforms/transform.js",
			"modules": {},
			"classes": { "Transform": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/embedded-records-mixin.js": {
			"name": "../serializer/addon/-private/embedded-records-mixin.js",
			"modules": {},
			"classes": { "EmbeddedRecordsMixin": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/index.js": {
			"name": "../serializer/addon/-private/index.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/-private/utils.js": {
			"name": "../serializer/addon/-private/utils.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/index.js": {
			"name": "../serializer/addon/index.js",
			"modules": {},
			"classes": { "Serializer": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/json-api.js": {
			"name": "../serializer/addon/json-api.js",
			"modules": {},
			"classes": { "JSONAPISerializer": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/json.js": {
			"name": "../serializer/addon/json.js",
			"modules": {},
			"classes": { "JSONSerializer": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/rest.js": {
			"name": "../serializer/addon/rest.js",
			"modules": {},
			"classes": { "RESTSerializer": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../serializer/addon/transform.js": {
			"name": "../serializer/addon/transform.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/identifiers/utils/uuid-v4.ts": {
			"name": "../store/addon/-private/identifiers/utils/uuid-v4.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/identifiers/cache.ts": {
			"name": "../store/addon/-private/identifiers/cache.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/identifiers/is-stable-identifier.ts": {
			"name": "../store/addon/-private/identifiers/is-stable-identifier.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/model/internal-model.ts": {
			"name": "../store/addon/-private/system/model/internal-model.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/model/states.js": {
			"name": "../store/addon/-private/system/model/states.js",
			"modules": {},
			"classes": { "RootState": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/record-arrays/adapter-populated-record-array.js": {
			"name": "../store/addon/-private/system/record-arrays/adapter-populated-record-array.js",
			"modules": {},
			"classes": { "AdapterPopulatedRecordArray": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/record-arrays/record-array.js": {
			"name": "../store/addon/-private/system/record-arrays/record-array.js",
			"modules": {},
			"classes": { "RecordArray": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/references/belongs-to.js": {
			"name": "../store/addon/-private/system/references/belongs-to.js",
			"modules": {},
			"classes": { "BelongsToReference": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/references/has-many.js": {
			"name": "../store/addon/-private/system/references/has-many.js",
			"modules": {},
			"classes": { "HasManyReference": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/references/record.ts": {
			"name": "../store/addon/-private/system/references/record.ts",
			"modules": {},
			"classes": { "RecordReference": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/references/reference.ts": {
			"name": "../store/addon/-private/system/references/reference.ts",
			"modules": {},
			"classes": { "Reference": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/relationships/ext.js": {
			"name": "../store/addon/-private/system/relationships/ext.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/store/common.js": {
			"name": "../store/addon/-private/system/store/common.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/store/finders.js": {
			"name": "../store/addon/-private/system/store/finders.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/store/internal-model-factory.ts": {
			"name": "../store/addon/-private/system/store/internal-model-factory.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/store/record-data-store-wrapper.ts": {
			"name": "../store/addon/-private/system/store/record-data-store-wrapper.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/store/serializer-response.js": {
			"name": "../store/addon/-private/system/store/serializer-response.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/backburner.js": {
			"name": "../store/addon/-private/system/backburner.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/coerce-id.ts": {
			"name": "../store/addon/-private/system/coerce-id.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/core-store.ts": {
			"name": "../store/addon/-private/system/core-store.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/deprecated-evented.js": {
			"name": "../store/addon/-private/system/deprecated-evented.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/diff-array.js": {
			"name": "../store/addon/-private/system/diff-array.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/ds-model-store.ts": {
			"name": "../store/addon/-private/system/ds-model-store.ts",
			"modules": { "@ember-data/store": 1 },
			"classes": { "Store": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/errors-utils.js": {
			"name": "../store/addon/-private/system/errors-utils.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/fetch-manager.ts": {
			"name": "../store/addon/-private/system/fetch-manager.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/identity-map.ts": {
			"name": "../store/addon/-private/system/identity-map.ts",
			"modules": {},
			"classes": { "IdentityMap": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/internal-model-map.ts": {
			"name": "../store/addon/-private/system/internal-model-map.ts",
			"modules": {},
			"classes": { "InternalModelMap": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/many-array.js": {
			"name": "../store/addon/-private/system/many-array.js",
			"modules": {},
			"classes": { "ManyArray": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/normalize-model-name.js": {
			"name": "../store/addon/-private/system/normalize-model-name.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/promise-proxies.js": {
			"name": "../store/addon/-private/system/promise-proxies.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/record-array-manager.js": {
			"name": "../store/addon/-private/system/record-array-manager.js",
			"modules": {},
			"classes": { "RecordArrayManager": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/record-arrays.js": {
			"name": "../store/addon/-private/system/record-arrays.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/references.js": {
			"name": "../store/addon/-private/system/references.js",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/relationship-meta.ts": {
			"name": "../store/addon/-private/system/relationship-meta.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/schema-definition-service.ts": {
			"name": "../store/addon/-private/system/schema-definition-service.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/snapshot-record-array.js": {
			"name": "../store/addon/-private/system/snapshot-record-array.js",
			"modules": {},
			"classes": { "SnapshotRecordArray": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/snapshot.js": {
			"name": "../store/addon/-private/system/snapshot.js",
			"modules": {},
			"classes": { "Snapshot": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/system/ts-upgrade-map.ts": {
			"name": "../store/addon/-private/system/ts-upgrade-map.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/utils/brand.ts": {
			"name": "../store/addon/-private/ts-interfaces/utils/brand.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/utils/symbol.ts": {
			"name": "../store/addon/-private/ts-interfaces/utils/symbol.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/ember-data-json-api.ts": {
			"name": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/identifier.ts": {
			"name": "../store/addon/-private/ts-interfaces/identifier.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts": {
			"name": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"modules": { "@ember-data/serializer": 1 },
			"classes": { "MinimumSerializerInterface": 1 },
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record-data-json-api.ts": {
			"name": "../store/addon/-private/ts-interfaces/record-data-json-api.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record-data-record-wrapper.ts": {
			"name": "../store/addon/-private/ts-interfaces/record-data-record-wrapper.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record-data-schemas.ts": {
			"name": "../store/addon/-private/ts-interfaces/record-data-schemas.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts": {
			"name": "../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record-data.ts": {
			"name": "../store/addon/-private/ts-interfaces/record-data.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/record.ts": {
			"name": "../store/addon/-private/ts-interfaces/record.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/schema-definition-service.ts": {
			"name": "../store/addon/-private/ts-interfaces/schema-definition-service.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/ts-interfaces/utils.ts": {
			"name": "../store/addon/-private/ts-interfaces/utils.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/utils/promise-record.ts": {
			"name": "../store/addon/-private/utils/promise-record.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/-private/index.ts": {
			"name": "../store/addon/-private/index.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"../store/addon/index.ts": {
			"name": "../store/addon/index.ts",
			"modules": {},
			"classes": {},
			"fors": {},
			"namespaces": {}
		},
		"addon/-private/core.js": {
			"name": "addon/-private/core.js",
			"modules": { "@ember-data": 1 },
			"classes": {},
			"fors": { "@ember-data": 1 },
			"namespaces": {}
		}
	},
	"modules": {
		"@ember-data/adapter": {
			"name": "@ember-data/adapter",
			"submodules": {},
			"elements": {},
			"classes": {
				"String": 1,
				"Ember.HTMLBars.helpers": 1,
				"Ember.Inflector": 1,
				"BuildURLMixin": 1,
				"AdapterError": 1,
				"InvalidError": 1,
				"TimeoutError": 1,
				"AbortError": 1,
				"UnauthorizedError": 1,
				"ForbiddenError": 1,
				"NotFoundError": 1,
				"ConflictError": 1,
				"ServerError": 1,
				"Adapter": 1,
				"JSONAPIAdapter": 1,
				"RESTAdapter": 1
			},
			"fors": {},
			"namespaces": {},
			"tag": "main",
			"file": "../adapter/addon/rest.js",
			"line": 32,
			"itemtype": "main",
			"extends": "EmberObject"
		},
		"@ember-data/debug": {
			"name": "@ember-data/debug",
			"submodules": {},
			"elements": {},
			"classes": { "InspectorDataAdapter": 1 },
			"fors": {},
			"namespaces": {},
			"tag": "main",
			"file": "../debug/addon/index.js",
			"line": 36,
			"description": "# Overview\n\nThis package provides the `DataAdapter` which the [Ember Inspector](https://github.com/emberjs/ember-inspector)\nuses to subscribe and retrieve information for the `data` tab in the inspector.\n\nThis package adds roughly .6 KB when minified and compressed to your application in production; however,\nyou can opt out of shipping this addon in production via options in `ember-cli-build.js`\n\n```js\nlet app = new EmberApp(defaults, {\n  emberData: {\n    includeDataAdapterInProduction: false\n  }\n});\n```\n\nWhen using `ember-data` as a dependency of your app, the default is to ship the inspector support to production.\n\nWhen not using `ember-data` as a dependency but instead using EmberData via declaring specific `@ember-data/<package>`\ndependencies the default is to not ship to production.",
			"itemtype": "main"
		},
		"@ember-data/model": {
			"name": "@ember-data/model",
			"submodules": {},
			"elements": {},
			"classes": { "@ember-data/model": 1, "Model": 1 },
			"fors": { "@ember-data/model": 1, "Model": 1 },
			"namespaces": {},
			"tag": "main",
			"file": "../model/addon/index.ts",
			"line": 1,
			"description": "In EmberData a `Model` is a class defining the attributes and relationships\n of a specific resource `type` (model name). In this sense it represents a static \"schema\".\n\n Data for individual resources fetched from your API is presented\n to the UI via instances of the `Model`s you define.\n\n An instantiated `Model` is refered to as a `record`.\n\n When we refer to the `ModelClass` we are referring to the class definition\n and the static schema methods present on it.\n\n When we refer to a `record` we refer to a specific class instance presenting\n the resource data for a given `type` and `id`.\n\n ### Defining a Model\n\n ```app/models/person.js\n import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\n export default Model.extend({\n   name: attr(),\n\n   dog: belongsTo('pet', { inverse: 'owners', async: false }),\n\n   friends: hasMany('person', { inverse: 'friends', async: true }),\n });\n ```\n\n ### modelName convention\n\n By convention, the name of a given model (its `type`) matches the name\n of the file in the `app/models` folder and should be lowercase, singular\n and dasherized.",
			"itemtype": "main"
		},
		"@ember-data/store": {
			"name": "@ember-data/store",
			"submodules": {},
			"elements": {},
			"classes": {
				"Errors": 1,
				"RootState": 1,
				"AdapterPopulatedRecordArray": 1,
				"RecordArray": 1,
				"BelongsToReference": 1,
				"HasManyReference": 1,
				"RecordReference": 1,
				"Reference": 1,
				"Store": 1,
				"IdentityMap": 1,
				"InternalModelMap": 1,
				"ManyArray": 1,
				"RecordArrayManager": 1,
				"SnapshotRecordArray": 1,
				"Snapshot": 1
			},
			"fors": {},
			"namespaces": {},
			"tag": "main",
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 21,
			"description": "The store service contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nBy default, applications will have a single `Store` service that is\nautomatically created.\n\nThe store can be customized by extending the service in the following manner:\n\n```app/services/store.js\nimport Store from '@ember-data/store';\n\nexport default class MyStore extends Store {}\n```\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use the `Store`'s `findRecord()` method:\n\n```javascript\nstore.findRecord('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default Adapter.extend({\n});\n```\n\nYou can learn more about writing a custom adapter by reading the `Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](Store/methods/createRecord?anchor=createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend, you will need to call `record.save()`.\n\n[push](Store/methods/push?anchor=push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates (full or partial) that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](Store/methods/pushPayload?anchor=pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `RecordArray`s such as those returned by\n`store#peekAll()` or `store#findAll()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
			"itemtype": "main"
		},
		"@ember-data/record-data": {
			"name": "@ember-data/record-data",
			"submodules": {},
			"elements": {},
			"classes": {},
			"fors": {},
			"namespaces": {},
			"tag": "module",
			"file": "../record-data/addon/-private/record-data.ts",
			"line": 1
		},
		"@ember-data/serializer": {
			"name": "@ember-data/serializer",
			"submodules": {},
			"elements": {},
			"classes": {
				"BooleanTransform": 1,
				"DateTransform": 1,
				"NumberTransform": 1,
				"StringTransform": 1,
				"Transform": 1,
				"EmbeddedRecordsMixin": 1,
				"Serializer": 1,
				"JSONAPISerializer": 1,
				"JSONSerializer": 1,
				"RESTSerializer": 1,
				"MinimumSerializerInterface": 1
			},
			"fors": {},
			"namespaces": {},
			"tag": "main",
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 112,
			"description": "## Overview\n\nIn order to properly manage and present your data, EmberData\nneeds to understand the structure of data it receives.\n\n`Serializers` convert data between the server's API format and\nthe format EmberData understands.\n\nData received from an API response is **normalized** into \n[JSON:API](https://jsonapi.org/) (the format used internally\nby EmberData), while data sent to an API is **serialized**\ninto the format the API expects.\n\n### Implementing a Serializer\n\nThere are only two required serializer methods, one for\nnormalizing data from the server API format into JSON:API, and\nanother for serializing records via `Snapshots` into the expected\nserver API format.\n\nTo implement a serializer, export a class that conforms to the structure\ndescribed by the [MinimumSerializerInterface](/ember-data/release/classes/MinimumSerializerInterface)\nfrom the `app/serializers/` directory. An example is below.\n\n```ts\nimport EmberObject from '@ember/object';\n\nexport default class ApplicationSerializer extends EmberObject {\n  normalizeResponse(store, schema, rawPayload) {\n    return rawPayload;\n  }\n\n  serialize(snapshot, options) {\n    const serializedResource = {\n      id: snapshot.id(),\n      type: snapshot.modelName,\n      attributes: snapshot.attributes()\n    };\n\n    return serializedResource;\n  }\n}\n ```\n\n\n### Serializer Resolution\n\n`store.serializerFor(name)` will lookup serializers defined in\n`app/serializers/` and return an instance. If no serializer is found, an\nerror will be thrown.\n\n`serializerFor` first attempts to find a serializer with an exact match on `name`,\nthen falls back to checking for the presence of a serializer named `application`.\n\n```ts\nstore.serializerFor('author');\n\n// lookup paths (in order) =>\n//   app/serializers/author.js\n//   app/serializers/application.js\n```\n\nMost requests in EmberData are made with respect to a particular `type` (or `modelName`)\n(e.g., \"get me the full collection of **books**\" or \"get me the **employee** whose id is 37\"). We\nrefer to this as the **primary** resource `type`.\n\nTypically `serializerFor` will be used to find a serializer with a name matching that of the primary\nresource `type` for the request, falling back to the `application` serializer for those types that\ndo not have a defined serializer. This is often described as a `per-model` or `per-type` strategy\nfor defining serializers. However, because APIs rarely format payloads per-type but rather\nper-API-version, this may not be a desired strategy.\n\nIt is recommended that applications define only a single `application` adapter and serializer\nwhere possible.\n\nIf you have multiple API formats and the per-type strategy is not viable, one strategy is to\nwrite an `application` adapter and serializer that make use of `options` to specify the desired\nformat when making a request.\n\n### Using a Serializer\n\nAny serializer in `app/serializers/` can be looked up by `name` using `store.serializerFor(name)`.\n\n### Default Serializers\n\nFor applications whose APIs are *very close to* or *exactly* the **REST** format or **JSON:API**\nformat the `@ember-data/serializer` package contains implementations these applications can\nextend. It also contains a simple `JSONSerializer` for serializing to/from very basic JSON objects.\n\nMany applications will find writing their own serializer to be more performant and less\ncomplex than extending these classes even when their API format is very close to that expected\nby these serializers.\n\nIt is recommended that apps write their own serializer to best suit the needs of their API and\napplication.",
			"itemtype": "main",
			"access": "public",
			"tagname": ""
		},
		"@ember-data": {
			"name": "@ember-data",
			"submodules": {},
			"elements": {},
			"classes": { "@ember-data": 1 },
			"fors": { "@ember-data": 1 },
			"namespaces": {},
			"tag": "main",
			"file": "addon/-private/core.js",
			"line": 1,
			"itemtype": "main"
		}
	},
	"classes": {
		"String": {
			"name": "String",
			"shortname": "String",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter"
		},
		"Ember.HTMLBars.helpers": {
			"name": "Ember.HTMLBars.helpers",
			"shortname": "Ember.HTMLBars.helpers",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter"
		},
		"Ember.Inflector": {
			"name": "Ember.Inflector",
			"shortname": "Ember.Inflector",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "Ember",
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 30,
			"description": "Inflector.Ember provides a mechanism for supplying inflection rules for your\napplication. Ember includes a default set of inflection rules, and provides an\nAPI for providing additional rules.\n\nExamples:\n\nCreating an inflector with no rules.\n\n```js\nvar inflector = new Ember.Inflector();\n```\n\nCreating an inflector with the default ember ruleset.\n\n```js\nvar inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\ninflector.pluralize('cow'); //=> 'kine'\ninflector.singularize('kine'); //=> 'cow'\n```\n\nCreating an inflector and adding rules later.\n\n```javascript\nvar inflector = Ember.Inflector.inflector;\n\ninflector.pluralize('advice'); // => 'advices'\ninflector.uncountable('advice');\ninflector.pluralize('advice'); // => 'advice'\n\ninflector.pluralize('formula'); // => 'formulas'\ninflector.irregular('formula', 'formulae');\ninflector.pluralize('formula'); // => 'formulae'\n\n// you would not need to add these as they are the default rules\ninflector.plural(/$/, 's');\ninflector.singular(/s$/i, '');\n```\n\nCreating an inflector with a nondefault ruleset.\n\n```javascript\nvar rules = {\n  plurals:  [\n    [ /$/, 's' ]\n  ],\n  singular: [\n    [ /\\s$/, '' ]\n  ],\n  irregularPairs: [\n    [ 'cow', 'kine' ]\n  ],\n  uncountable: [ 'fish' ]\n};\n\nvar inflector = new Ember.Inflector(rules);\n```"
		},
		"BuildURLMixin": {
			"name": "BuildURLMixin",
			"shortname": "BuildURLMixin",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": ["RESTAdapter"],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 10,
			"description": "## Using BuildURLMixin\n\nTo use URL building, include the mixin when extending an adapter, and call `buildURL` where needed.\nThe default behaviour is designed for RESTAdapter.\n\n### Example\n\n```javascript\nimport Adapter, { BuildURLMixin } from '@ember-data/adapter';\n\nexport default Adapter.extend(BuildURLMixin, {\n  findRecord: function(store, type, id, snapshot) {\n    var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n    return this.ajax(url, 'GET');\n  }\n});\n```\n\n### Attributes\n\nThe `host` and `namespace` attributes will be used if defined, and are optional."
		},
		"AdapterError": {
			"name": "AdapterError",
			"shortname": "AdapterError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 8,
			"description": "A `AdapterError` is used by an adapter to signal that an error occurred\nduring a request to an external API. It indicates a generic error, and\nsubclasses are used to indicate specific error states. The following\nsubclasses are provided:\n\n- `InvalidError`\n- `TimeoutError`\n- `AbortError`\n- `UnauthorizedError`\n- `ForbiddenError`\n- `NotFoundError`\n- `ConflictError`\n- `ServerError`\n\nTo create a custom error to signal a specific error state in communicating\nwith an external API, extend the `AdapterError`. For example, if the\nexternal API exclusively used HTTP `503 Service Unavailable` to indicate\nit was closed for maintenance:\n\n```app/adapters/maintenance-error.js\nimport AdapterError from '@ember-data/adapter/error';\n\nexport default AdapterError.extend({ message: \"Down for maintenance.\" });\n```\n\nThis error would then be returned by an adapter's `handleResponse` method:\n\n```app/adapters/application.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\nimport MaintenanceError from './maintenance-error';\n\nexport default JSONAPIAdapter.extend({\n  handleResponse(status) {\n    if (503 === status) {\n      return new MaintenanceError();\n    }\n\n    return this._super(...arguments);\n  }\n});\n```\n\nAnd can then be detected in an application and used to send the user to an\n`under-maintenance` route:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport MaintenanceError from '../adapters/maintenance-error';\n\nexport default Route.extend({\n  actions: {\n    error(error, transition) {\n      if (error instanceof MaintenanceError) {\n        this.transitionTo('under-maintenance');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n});\n```"
		},
		"InvalidError": {
			"name": "InvalidError",
			"shortname": "InvalidError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 121,
			"description": "A `InvalidError` is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually, this means a\nrecord failed some form of server-side validation. When a promise\nfrom an adapter is rejected with a `InvalidError` the record will\ntransition to the `invalid` state and the errors will be set to the\n`errors` property on the record.\n\nFor Ember Data to correctly map errors to their corresponding\nproperties on the model, Ember Data expects each error to be\na valid JSON-API error object with a `source/pointer` that matches\nthe property name. For example, if you had a Post model that\nlooked like this.\n\n```app/models/post.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  title: attr('string'),\n  content: attr('string')\n});\n```\n\nTo show an error from the server related to the `title` and\n`content` properties your adapter could return a promise that\nrejects with a `InvalidError` object that looks like this:\n\n```app/adapters/post.js\nimport RSVP from 'RSVP';\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { InvalidError } from '@ember-data/adapter/error';\n\nexport default RESTAdapter.extend({\n  updateRecord() {\n    // Fictional adapter that always rejects\n    return RSVP.reject(new InvalidError([\n      {\n        detail: 'Must be unique',\n        source: { pointer: '/data/attributes/title' }\n      },\n      {\n        detail: 'Must not be blank',\n        source: { pointer: '/data/attributes/content'}\n      }\n    ]));\n  }\n});\n```\n\nYour backend may use different property names for your records the\nstore will attempt to extract and normalize the errors using the\nserializer's `extractErrors` method before the errors get added to\nthe model. As a result, it is safe for the `InvalidError` to\nwrap the error payload unaltered.",
			"extends": "AdapterError"
		},
		"TimeoutError": {
			"name": "TimeoutError",
			"shortname": "TimeoutError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 183,
			"description": "A `TimeoutError` is used by an adapter to signal that a request\nto the external API has timed out. I.e. no response was received from\nthe external API within an allowed time period.\n\nAn example use case would be to warn the user to check their internet\nconnection if an adapter operation has timed out:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { TimeoutError } from '@ember-data/adapter/error';\n\nexport default Route.extend({\n  actions: {\n    error(error, transition) {\n      if (error instanceof TimeoutError) {\n        // alert the user\n        alert('Are you still connected to the internet?');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n});\n```",
			"extends": "AdapterError"
		},
		"AbortError": {
			"name": "AbortError",
			"shortname": "AbortError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 216,
			"description": "A `AbortError` is used by an adapter to signal that a request to\nthe external API was aborted. For example, this can occur if the user\nnavigates away from the current page after a request to the external API\nhas been initiated but before a response has been received.",
			"extends": "AdapterError"
		},
		"UnauthorizedError": {
			"name": "UnauthorizedError",
			"shortname": "UnauthorizedError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 228,
			"description": "A `UnauthorizedError` equates to a HTTP `401 Unauthorized` response\nstatus. It is used by an adapter to signal that a request to the external\nAPI was rejected because authorization is required and has failed or has not\nyet been provided.\n\nAn example use case would be to redirect the user to a login route if a\nrequest is unauthorized:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { UnauthorizedError } from '@ember-data/adapter/error';\n\nexport default Route.extend({\n  actions: {\n    error(error, transition) {\n      if (error instanceof UnauthorizedError) {\n        // go to the sign in route\n        this.transitionTo('login');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n});\n```",
			"extends": "AdapterError"
		},
		"ForbiddenError": {
			"name": "ForbiddenError",
			"shortname": "ForbiddenError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 262,
			"description": "A `ForbiddenError` equates to a HTTP `403 Forbidden` response status.\nIt is used by an adapter to signal that a request to the external API was\nvalid but the server is refusing to respond to it. If authorization was\nprovided and is valid, then the authenticated user does not have the\nnecessary permissions for the request.",
			"extends": "AdapterError"
		},
		"NotFoundError": {
			"name": "NotFoundError",
			"shortname": "NotFoundError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 275,
			"description": "A `NotFoundError` equates to a HTTP `404 Not Found` response status.\nIt is used by an adapter to signal that a request to the external API\nwas rejected because the resource could not be found on the API.\n\nAn example use case would be to detect if the user has entered a route\nfor a specific model that does not exist. For example:\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\nimport { NotFoundError } from '@ember-data/adapter/error';\n\nexport default Route.extend({\n  model(params) {\n    return this.get('store').findRecord('post', params.post_id);\n  },\n\n  actions: {\n    error(error, transition) {\n      if (error instanceof NotFoundError) {\n        // redirect to a list of all posts instead\n        this.transitionTo('posts');\n      } else {\n        // otherwise let the error bubble\n        return true;\n      }\n    }\n  }\n});\n```",
			"extends": "AdapterError"
		},
		"ConflictError": {
			"name": "ConflictError",
			"shortname": "ConflictError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 312,
			"description": "A `ConflictError` equates to a HTTP `409 Conflict` response status.\nIt is used by an adapter to indicate that the request could not be processed\nbecause of a conflict in the request. An example scenario would be when\ncreating a record with a client-generated ID but that ID is already known\nto the external API.",
			"extends": "AdapterError"
		},
		"ServerError": {
			"name": "ServerError",
			"shortname": "ServerError",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/error.js",
			"line": 325,
			"description": "A `ServerError` equates to a HTTP `500 Internal Server Error` response\nstatus. It is used by the adapter to indicate that a request has failed\nbecause of an error in the external API.",
			"extends": "AdapterError"
		},
		"Adapter": {
			"name": "Adapter",
			"shortname": "Adapter",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/index.js",
			"line": 10,
			"description": "An adapter is an object that receives requests from a store and\ntranslates them into the appropriate action to take against your\npersistence layer. The persistence layer is usually an HTTP API but\nmay be anything, such as the browser's local storage. Typically the\nadapter is not invoked directly instead its functionality is accessed\nthrough the `store`.\n\n### Creating an Adapter\n\nCreate a new subclass of `Adapter` in the `app/adapters` folder:\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  // ...your code here\n});\n```\n\nModel-specific adapters can be created by putting your adapter\nclass in an `app/adapters/` + `model-name` + `.js` file of the application.\n\n```app/adapters/post.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  // ...Post-specific adapter code goes here\n});\n```\n\n`Adapter` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `findRecord()`\n  * `createRecord()`\n  * `updateRecord()`\n  * `deleteRecord()`\n  * `findAll()`\n  * `query()`\n\nTo improve the network performance of your application, you can optimize\nyour adapter by overriding these lower-level methods:\n\n  * `findMany()`\n\n\nFor an example of the implementation, see `RESTAdapter`, the\nincluded REST adapter."
		},
		"JSONAPIAdapter": {
			"name": "JSONAPIAdapter",
			"shortname": "JSONAPIAdapter",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/json-api.js",
			"line": 9,
			"description": "The `JSONAPIAdapter` is the default adapter used by Ember Data. It\nis responsible for transforming the store's requests into HTTP\nrequests that follow the [JSON API](http://jsonapi.org/format/)\nformat.\n\n## JSON API Conventions\n\nThe JSONAPIAdapter uses JSON API conventions for building the URL\nfor a record and selecting the HTTP verb to use with a request. The\nactions you can take on a record map onto the following URLs in the\nJSON API adapter:\n\n<table>\n<tr>\n  <th>\n    Action\n  </th>\n  <th>\n    HTTP Verb\n  </th>\n  <th>\n    URL\n  </th>\n</tr>\n<tr>\n  <th>\n    `store.findRecord('post', 123)`\n  </th>\n  <td>\n    GET\n  </td>\n  <td>\n    /posts/123\n  </td>\n</tr>\n<tr>\n  <th>\n    `store.findAll('post')`\n  </th>\n  <td>\n    GET\n  </td>\n  <td>\n    /posts\n  </td>\n</tr>\n<tr>\n  <th>\n    Update `postRecord.save()`\n  </th>\n  <td>\n    PATCH\n  </td>\n  <td>\n    /posts/123\n  </td>\n</tr>\n<tr>\n  <th>\n    Create `store.createRecord('post').save()`\n  </th>\n  <td>\n    POST\n  </td>\n  <td>\n    /posts\n  </td>\n</tr>\n<tr>\n  <th>\n    Delete `postRecord.destroyRecord()`\n  </th>\n  <td>\n    DELETE\n  </td>\n  <td>\n    /posts/123\n  </td>\n</tr>\n</table>\n\n## Success and failure\n\nThe JSONAPIAdapter will consider a success any response with a\nstatus code of the 2xx family (\"Success\"), as well as 304 (\"Not\nModified\"). Any other status code will be considered a failure.\n\nOn success, the request promise will be resolved with the full\nresponse payload.\n\nFailed responses with status code 422 (\"Unprocessable Entity\") will\nbe considered \"invalid\". The response will be discarded, except for\nthe `errors` key. The request promise will be rejected with a\n`InvalidError`. This error object will encapsulate the saved\n`errors` value.\n\nAny other status codes will be treated as an adapter error. The\nrequest promise will be rejected, similarly to the invalid case,\nbut with an instance of `AdapterError` instead.\n\n### Endpoint path customization\n\nEndpoint paths can be prefixed with a `namespace` by setting the\nnamespace property on the adapter:\n\n```app/adapters/application.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  namespace: 'api/1'\n});\n```\nRequests for the `person` model would now target `/api/1/people/1`.\n\n### Host customization\n\nAn adapter can target other hosts by setting the `host` property.\n\n```app/adapters/application.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  host: 'https://api.example.com'\n});\n```\n\nRequests for the `person` model would now target\n`https://api.example.com/people/1`.",
			"since": "1.13.0",
			"is_constructor": 1,
			"extends": "RESTAdapter"
		},
		"RESTAdapter": {
			"name": "RESTAdapter",
			"shortname": "RESTAdapter",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/adapter",
			"namespace": "",
			"file": "../adapter/addon/rest.js",
			"line": 32,
			"description": "The REST adapter allows your store to communicate with an HTTP server by\ntransmitting JSON via XHR. Most Ember.js apps that consume a JSON API\nshould use the REST adapter.\n\nThis adapter is designed around the idea that the JSON exchanged with\nthe server should be conventional.\n\n## Success and failure\n\nThe REST adapter will consider a success any response with a status code\nof the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other\nstatus code will be considered a failure.\n\nOn success, the request promise will be resolved with the full response\npayload.\n\nFailed responses with status code 422 (\"Unprocessable Entity\") will be\nconsidered \"invalid\". The response will be discarded, except for the\n`errors` key. The request promise will be rejected with a `InvalidError`.\nThis error object will encapsulate the saved `errors` value.\n\nAny other status codes will be treated as an \"adapter error\". The request\npromise will be rejected, similarly to the \"invalid\" case, but with\nan instance of `AdapterError` instead.\n\n## JSON Structure\n\nThe REST adapter expects the JSON returned from your server to follow\nthese conventions.\n\n### Object Root\n\nThe JSON payload should be an object that contains the record inside a\nroot property. For example, in response to a `GET` request for\n`/posts/1`, the JSON should look like this:\n\n```js\n{\n  \"posts\": {\n    \"id\": 1,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\"\n  }\n}\n```\n\nSimilarly, in response to a `GET` request for `/posts`, the JSON should\nlook like this:\n\n```js\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C's Tag\",\n      \"author\": \"Yehuda Katz\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Rails is omakase\",\n      \"author\": \"D2H\"\n    }\n  ]\n}\n```\n\nNote that the object root can be pluralized for both a single-object response\nand an array response: the REST adapter is not strict on this. Further, if the\nHTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a\n`findRecord` query) with more than one object in the array, Ember Data will\nonly display the object with the matching ID.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the camelCased versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```app/models/person.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  occupation: attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"people\": {\n    \"id\": 5,\n    \"firstName\": \"Zaphod\",\n    \"lastName\": \"Beeblebrox\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\n#### Relationships\n\nRelationships are usually represented by ids to the record in the\nrelationship. The related records can then be sideloaded in the\nresponse under a key for the type.\n\n```js\n{\n  \"posts\": {\n    \"id\": 5,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\",\n    \"comments\": [1, 2]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"author\": \"User 1\",\n    \"message\": \"First!\",\n  }, {\n    \"id\": 2,\n    \"author\": \"User 2\",\n    \"message\": \"Good Luck!\",\n  }]\n}\n```\n\nIf the records in the relationship are not known when the response\nis serialized it's also possible to represent the relationship as a\nURL using the `links` key in the response. Ember Data will fetch\nthis URL to resolve the relationship when it is accessed for the\nfirst time.\n\n```js\n{\n  \"posts\": {\n    \"id\": 5,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\",\n    \"links\": {\n      \"comments\": \"/posts/5/comments\"\n    }\n  }\n}\n```\n\n### Errors\n\nIf a response is considered a failure, the JSON payload is expected to include\na top-level key `errors`, detailing any specific issues. For example:\n\n```js\n{\n  \"errors\": {\n    \"msg\": \"Something went wrong\"\n  }\n}\n```\n\nThis adapter does not make any assumptions as to the format of the `errors`\nobject. It will simply be passed along as is, wrapped in an instance\nof `InvalidError` or `AdapterError`. The serializer can interpret it\nafterwards.\n\n## Customization\n\n### Endpoint path customization\n\nEndpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  namespace: 'api/1'\n});\n```\nRequests for the `Person` model would now target `/api/1/people/1`.\n\n### Host customization\n\nAn adapter can target other hosts by setting the `host` property.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n```\n\n### Headers customization\n\nSome APIs require HTTP headers, e.g. to provide an API key. Arbitrary\nheaders can be set as key/value pairs on the `RESTAdapter`'s `headers`\nobject and Ember Data will send them along with each ajax request.\n\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { computed } from '@ember/object';\n\nexport default RESTAdapter.extend({\n  headers: computed(function() {\n    return {\n      'API_KEY': 'secret key',\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  }\n});\n```\n\n`headers` can also be used as a computed property to support dynamic\nheaders. In the example below, the `session` object has been\ninjected into an adapter by Ember's container.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { computed } from '@ember/object';\n\nexport default RESTAdapter.extend({\n  headers: computed('session.authToken', function() {\n    return {\n      'API_KEY': this.get('session.authToken'),\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  })\n});\n```\n\nIn some cases, your dynamic headers may require data from some\nobject outside of Ember's observer system (for example\n`document.cookie`). You can use the\n[volatile](/api/classes/Ember.ComputedProperty.html?anchor=volatile)\nfunction to set the property into a non-cached mode causing the headers to\nbe recomputed with every request.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { get } from '@ember/object';\nimport { computed } from '@ember/object';\n\nexport default RESTAdapter.extend({\n  headers: computed(function() {\n    return {\n      'API_KEY': get(document.cookie.match(/apiKey\\=([^;]*)/), '1'),\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  }).volatile()\n});\n```",
			"is_constructor": 1,
			"extends": "Adapter",
			"uses": ["BuildURLMixin"]
		},
		"InspectorDataAdapter": {
			"name": "InspectorDataAdapter",
			"shortname": "InspectorDataAdapter",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/debug",
			"namespace": "",
			"file": "../debug/addon/index.js",
			"line": 36,
			"description": "Implements `@ember/debug/data-adapter` with for EmberData\nintegration with the ember-inspector.",
			"extends": "DataAdapter",
			"access": "private",
			"tagname": ""
		},
		"@ember-data/model": {
			"name": "@ember-data/model",
			"shortname": "@ember-data/model",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/model",
			"namespace": ""
		},
		"Errors": {
			"name": "Errors",
			"shortname": "Errors",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../model/addon/-private/errors.js",
			"line": 12,
			"description": "Holds validation errors for a given record, organized by attribute names.\n\nEvery `Model` has an `errors` property that is an instance of\n`Errors`. This can be used to display validation error\nmessages returned from the server when a `record.save()` rejects.\n\nFor Example, if you had a `User` model that looked like this:\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string')\n});\n```\nAnd you attempted to save a record that did not validate on the backend:\n\n```javascript\nlet user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save();\n```\n\nYour backend would be expected to return an error response that described\nthe problem, so that error messages can be generated on the app.\n\nAPI responses will be translated into instances of `Errors` differently,\ndepending on the specific combination of adapter and serializer used. You\nmay want to check the documentation or the source code of the libraries\nthat you are using, to know how they expect errors to be communicated.\n\nErrors can be displayed to the user by accessing their property name\nto get an array of all the error objects for that property. Each\nerror object is a JavaScript object with two keys:\n\n- `message` A string containing the error message from the backend\n- `attribute` The name of the property associated with this error message\n\n```handlebars\n<label>Username: {{input value=username}} </label>\n{{#each model.errors.username as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n\n<label>Email: {{input value=email}} </label>\n{{#each model.errors.email as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\nYou can also access the special `messages` property on the error\nobject to get an array of all the error strings.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
			"extends": "Ember.ArrayProxy",
			"uses": ["Ember.Evented"]
		},
		"Model": {
			"name": "Model",
			"shortname": "Model",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/model",
			"namespace": "",
			"file": "../model/addon/index.ts",
			"line": 1,
			"extends": "EmberObject",
			"uses": ["EmberData.DeprecatedEvented"],
			"description": "In EmberData a `Model` is a class defining the attributes and relationships\n of a specific resource `type` (model name). In this sense it represents a static \"schema\".\n\n Data for individual resources fetched from your API is presented\n to the UI via instances of the `Model`s you define.\n\n An instantiated `Model` is refered to as a `record`.\n\n When we refer to the `ModelClass` we are referring to the class definition\n and the static schema methods present on it.\n\n When we refer to a `record` we refer to a specific class instance presenting\n the resource data for a given `type` and `id`.\n\n ### Defining a Model\n\n ```app/models/person.js\n import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\n export default Model.extend({\n   name: attr(),\n\n   dog: belongsTo('pet', { inverse: 'owners', async: false }),\n\n   friends: hasMany('person', { inverse: 'friends', async: true }),\n });\n ```\n\n ### modelName convention\n\n By convention, the name of a given model (its `type`) matches the name\n of the file in the `app/models` folder and should be lowercase, singular\n and dasherized.",
			"mainName": "@ember-data/model",
			"tag": "main",
			"itemtype": "main",
			"_main": true
		},
		"BooleanTransform": {
			"name": "BooleanTransform",
			"shortname": "BooleanTransform",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/transforms/boolean.js",
			"line": 8,
			"description": "The `BooleanTransform` class is used to serialize and deserialize\nboolean attributes on Ember Data record objects. This transform is\nused when `boolean` is passed as the type parameter to the\n[attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\nUsage\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```\n\nBy default, the boolean transform only allows for values of `true` or\n`false`. You can opt into allowing `null` values for\nboolean attributes via `attr('boolean', { allowNull: true })`\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  email: attr('string'),\n  username: attr('string'),\n  wantsWeeklyEmail: attr('boolean', { allowNull: true })\n});\n```",
			"extends": "Transform"
		},
		"DateTransform": {
			"name": "DateTransform",
			"shortname": "DateTransform",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/transforms/date.js",
			"line": 7,
			"description": "The `DateTransform` class is used to serialize and deserialize\ndate attributes on Ember Data record objects. This transform is used\nwhen `date` is passed as the type parameter to the\n[attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)\nstandard.\n\n```app/models/score.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   value: attr('number'),\n   player: belongsTo('player'),\n   date: attr('date')\n });\n```",
			"extends": "Transform"
		},
		"NumberTransform": {
			"name": "NumberTransform",
			"shortname": "NumberTransform",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/transforms/number.js",
			"line": 11,
			"description": "The `NumberTransform` class is used to serialize and deserialize\nnumeric attributes on Ember Data record objects. This transform is\nused when `number` is passed as the type parameter to the\n[attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\nUsage\n\n```app/models/score.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  value: attr('number'),\n  player: belongsTo('player'),\n  date: attr('date')\n});\n```",
			"extends": "Transform"
		},
		"StringTransform": {
			"name": "StringTransform",
			"shortname": "StringTransform",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/transforms/string.js",
			"line": 8,
			"description": "The `StringTransform` class is used to serialize and deserialize\nstring attributes on Ember Data record objects. This transform is\nused when `string` is passed as the type parameter to the\n[attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\nUsage\n\n```app/models/user.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```",
			"extends": "Transform"
		},
		"Transform": {
			"name": "Transform",
			"shortname": "Transform",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/transforms/transform.js",
			"line": 7,
			"description": "The `Transform` class is used to serialize and deserialize model\nattributes when they are saved or loaded from an\nadapter. Subclassing `Transform` is useful for creating custom\nattributes. All subclasses of `Transform` must implement a\n`serialize` and a `deserialize` method.\n\nExample\n\n```app/transforms/temperature.js\nimport Transform from '@ember-data/serializer/transform';\n\n// Converts centigrade in the JSON to fahrenheit in the app\nexport default Transform.extend({\n  deserialize(serialized, options) {\n    return (serialized *  1.8) + 32;\n  },\n\n  serialize(deserialized, options) {\n    return (deserialized - 32) / 1.8;\n  }\n});\n```\n\nUsage\n\n```app/models/requirement.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  name: attr('string'),\n  temperature: attr('temperature')\n});\n```\n\nThe options passed into the `attr` function when the attribute is\ndeclared on the model is also available in the transform.\n\n```app/models/post.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  title: attr('string'),\n  markdown: attr('markdown', {\n    markdown: {\n      gfm: false,\n      sanitize: true\n    }\n  })\n});\n```\n\n```app/transforms/markdown.js\nimport Transform from '@ember-data/serializer/transform';\n\nexport default Transform.extend({\n  serialize(deserialized, options) {\n    return deserialized.raw;\n  },\n\n  deserialize(serialized, options) {\n    var markdownOptions = options.markdown || {};\n\n    return marked(serialized, markdownOptions);\n  }\n});\n```"
		},
		"EmbeddedRecordsMixin": {
			"name": "EmbeddedRecordsMixin",
			"shortname": "EmbeddedRecordsMixin",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 12,
			"description": "## Using Embedded Records\n\n`EmbeddedRecordsMixin` supports serializing embedded records.\n\nTo set up embedded records, include the mixin when extending a serializer,\nthen define and configure embedded (model) relationships.\n\nNote that embedded records will serialize with the serializer for their model instead of the serializer in which they are defined.\n\nBelow is an example of a per-type serializer (`post` type).\n\n```app/serializers/post.js\nimport RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend(EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' },\n    comments: { serialize: 'ids' }\n  }\n});\n```\nNote that this use of `{ embedded: 'always' }` is unrelated to\nthe `{ embedded: 'always' }` that is defined as an option on `attr` as part of\ndefining a model while working with the `ActiveModelSerializer`.  Nevertheless,\nusing `{ embedded: 'always' }` as an option to `attr` is not a valid way to set up\nembedded records.\n\nThe `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:\n\n```js\n{\n  serialize: 'records',\n  deserialize: 'records'\n}\n```\n\n### Configuring Attrs\n\nA resource's `attrs` option may be set to use `ids`, `records` or false for the\n`serialize`  and `deserialize` settings.\n\nThe `attrs` property can be set on the `ApplicationSerializer` or a per-type\nserializer.\n\nIn the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is `deserialize: 'records'`, there is no need to use `ids` when\nextracting as that is the default behaviour without this mixin if you are using\nthe vanilla `EmbeddedRecordsMixin`. Likewise, to embed JSON in the payload while\nserializing `serialize: 'records'` is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\ndo not want the relationship sent at all, you can use `serialize: false`.\n\n\n### EmbeddedRecordsMixin defaults\nIf you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\nwill behave in the following way:\n\nBelongsTo: `{ serialize: 'id', deserialize: 'id' }`\nHasMany:   `{ serialize: false, deserialize: 'ids' }`\n\n### Model Relationships\n\nEmbedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as `belongsTo` and `hasMany`, you\nshould not both specify `async: true` and also indicate through the serializer's\n`attrs` attribute that the related model should be embedded for deserialization.\nIf a model is declared embedded for deserialization (`embedded: 'always'` or `deserialize: 'records'`),\nthen do not use `async: true`.\n\nTo successfully extract and serialize embedded records the model relationships\nmust be set up correctly. See the\n[defining relationships](https://guides.emberjs.com/current/models/relationships)\nsection of the **Defining Models** guide page.\n\nRecords without an `id` property are not considered embedded records, model\ninstances must have an `id` property to be used with Ember Data.\n\n### Example JSON payloads, Models and Serializers\n\n**When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.**\n\nFor example, review the docs for each method of this mixin:\n* [normalize](/ember-data/release/classes/EmbeddedRecordsMixin/methods/normalize?anchor=normalize)\n* [serializeBelongsTo](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeBelongsTo?anchor=serializeBelongsTo)\n* [serializeHasMany](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeHasMany?anchor=serializeHasMany)"
		},
		"Serializer": {
			"name": "Serializer",
			"shortname": "Serializer",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/index.js",
			"line": 7,
			"description": "`Serializer` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `normalizeResponse()`\n  * `serialize()`\n\nAnd you can optionally override the following methods:\n\n  * `normalize()`\n\nFor an example implementation, see\n[JSONSerializer](JSONSerializer), the included JSON serializer.",
			"extends": "EmberObject"
		},
		"JSONAPISerializer": {
			"name": "JSONAPISerializer",
			"shortname": "JSONAPISerializer",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/json-api.js",
			"line": 16,
			"description": "Ember Data 2.0 Serializer:\n\nIn Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\n`JSONAPISerializer` supports the http://jsonapi.org/ spec and is the\nserializer recommended by Ember Data.\n\nThis serializer normalizes a JSON API payload that looks like:\n\n```app/models/player.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  name: attr('string'),\n  skill: attr('string'),\n  gamesPlayed: attr('number'),\n  club: belongsTo('club')\n});\n```\n\n```app/models/club.js\nimport Model, { attr, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  name: attr('string'),\n  location: attr('string'),\n  players: hasMany('player')\n});\n```\n\n```js\n  {\n    \"data\": [\n      {\n        \"attributes\": {\n          \"name\": \"Benfica\",\n          \"location\": \"Portugal\"\n        },\n        \"id\": \"1\",\n        \"relationships\": {\n          \"players\": {\n            \"data\": [\n              {\n                \"id\": \"3\",\n                \"type\": \"players\"\n              }\n            ]\n          }\n        },\n        \"type\": \"clubs\"\n      }\n    ],\n    \"included\": [\n      {\n        \"attributes\": {\n          \"name\": \"Eusebio Silva Ferreira\",\n          \"skill\": \"Rocket shot\",\n          \"games-played\": 431\n        },\n        \"id\": \"3\",\n        \"relationships\": {\n          \"club\": {\n            \"data\": {\n              \"id\": \"1\",\n              \"type\": \"clubs\"\n            }\n          }\n        },\n        \"type\": \"players\"\n      }\n    ]\n  }\n```\n\nto the format that the Ember Data store expects.\n\n### Customizing meta\n\nSince a JSON API Document can have meta defined in multiple locations you can\nuse the specific serializer hooks if you need to customize the meta.\n\nOne scenario would be to camelCase the meta keys of your payload. The example\nbelow shows how this could be done using `normalizeArrayResponse` and\n`extractRelationship`.\n\n```app/serializers/application.js\nexport default JSONAPISerializer.extend({\n  normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n    let normalizedDocument = this._super(...arguments);\n\n    // Customize document meta\n    normalizedDocument.meta = camelCaseKeys(normalizedDocument.meta);\n\n    return normalizedDocument;\n  },\n\n  extractRelationship(relationshipHash) {\n    let normalizedRelationship = this._super(...arguments);\n\n    // Customize relationship meta\n    normalizedRelationship.meta = camelCaseKeys(normalizedRelationship.meta);\n\n    return normalizedRelationship;\n  }\n});\n```",
			"since": "1.13.0",
			"extends": "JSONSerializer"
		},
		"JSONSerializer": {
			"name": "JSONSerializer",
			"shortname": "JSONSerializer",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/json.js",
			"line": 18,
			"description": "Ember Data 2.0 Serializer:\n\nIn Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\nBy default, Ember Data uses and recommends the `JSONAPISerializer`.\n\n`JSONSerializer` is useful for simpler or legacy backends that may\nnot support the http://jsonapi.org/ spec.\n\nFor example, given the following `User` model and JSON payload:\n\n```app/models/user.js\nimport Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  friends: hasMany('user'),\n  house: belongsTo('location'),\n\n  name: attr('string')\n});\n```\n\n```js\n{\n  id: 1,\n  name: 'Sebastian',\n  friends: [3, 4],\n  links: {\n    house: '/houses/lefkada'\n  }\n}\n```\n\n`JSONSerializer` will normalize the JSON payload to the JSON API format that the\nEmber Data store expects.\n\nYou can customize how JSONSerializer processes its payload by passing options in\nthe `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:\n\n  - To customize how a single record is normalized, use the `normalize` hook.\n  - To customize how `JSONSerializer` normalizes the whole server response, use the\n    `normalizeResponse` hook.\n  - To customize how `JSONSerializer` normalizes a specific response from the server,\n    use one of the many specific `normalizeResponse` hooks.\n  - To customize how `JSONSerializer` normalizes your id, attributes or relationships,\n    use the `extractId`, `extractAttributes` and `extractRelationships` hooks.\n\nThe `JSONSerializer` normalization process follows these steps:\n\n  - `normalizeResponse` - entry method to the serializer.\n  - `normalizeCreateRecordResponse` - a `normalizeResponse` for a specific operation is called.\n  - `normalizeSingleResponse`|`normalizeArrayResponse` - for methods like `createRecord` we expect\n    a single record back, while for methods like `findAll` we expect multiple records back.\n  - `normalize` - `normalizeArray` iterates and calls `normalize` for each of its records while `normalizeSingle`\n    calls it once. This is the method you most likely want to subclass.\n  - `extractId` | `extractAttributes` | `extractRelationships` - `normalize` delegates to these methods to\n    turn the record payload into the JSON API format.",
			"extends": "Serializer"
		},
		"RESTSerializer": {
			"name": "RESTSerializer",
			"shortname": "RESTSerializer",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../serializer/addon/rest.js",
			"line": 18,
			"description": "Normally, applications will use the `RESTSerializer` by implementing\nthe `normalize` method.\n\nThis allows you to do whatever kind of munging you need and is\nespecially useful if your server is inconsistent and you need to\ndo munging differently for many different kinds of responses.\n\nSee the `normalize` documentation for more information.\n\n## Across the Board Normalization\n\nThere are also a number of hooks that you might find useful to define\nacross-the-board rules for your payload. These rules will be useful\nif your server is consistent, or if you're building an adapter for\nan infrastructure service, like Firebase, and want to encode service\nconventions.\n\nFor example, if all of your keys are underscored and all-caps, but\notherwise consistent with the names you use in your models, you\ncan implement across-the-board rules for how to convert an attribute\nname in your model to a key in your JSON.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { underscore } from '@ember/string';\n\nexport default RESTSerializer.extend({\n  keyForAttribute(attr, method) {\n    return underscore(attr).toUpperCase();\n  }\n});\n```\n\nYou can also implement `keyForRelationship`, which takes the name\nof the relationship as the first parameter, the kind of\nrelationship (`hasMany` or `belongsTo`) as the second parameter, and\nthe method (`serialize` or `deserialize`) as the third parameter.",
			"extends": "JSONSerializer"
		},
		"RootState": {
			"name": "RootState",
			"shortname": "RootState",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/model/states.js",
			"line": 10,
			"description": "### State\n\nEach record has a `currentState` property that explicitly tracks what\nstate a record is in at any given time. For instance, if a record is\nnewly created and has not yet been sent to the adapter to be saved,\nit would be in the `root.loaded.created.uncommitted` state.  If a\nrecord has had local modifications made to it that are in the\nprocess of being saved, the record would be in the\n`root.loaded.updated.inFlight` state. (This state path will be\nexplained in more detail below.)\n\nEvents are sent by the record or its store to the record's\n`currentState` property. How the state reacts to these events is\ndependent on which state it is in. In some states, certain events\nwill be invalid and will cause an exception to be raised.\n\nStates are hierarchical and every state is a sub-state of the\n`RootState`. For example, a record can be in the\n`root.deleted.uncommitted` state then transitions into the\n`root.deleted.inFlight` state. If a child state does not implement\nan event handler, the state manager will attempt to invoke the event\non all parent states until the root state is reached. The state\nhierarchy of a record is described in terms of a path string. You\ncan determine a record's current state by getting the state's\n`stateName` property:\n\n```javascript\nrecord.get('currentState.stateName');\n//=> \"root.created.uncommitted\"\n ```\n\nThe hierarchy of valid states that ship with ember data looks like\nthis:\n\n```text\n* root\n  * deleted\n    * saved\n    * uncommitted\n    * inFlight\n  * empty\n  * loaded\n    * created\n      * uncommitted\n      * inFlight\n    * saved\n    * updated\n      * uncommitted\n      * inFlight\n  * loading\n```\n\nThe `Model` states are themselves stateless. What that means is\nthat, the hierarchical states that each of *those* points to is a\nshared data structure. For performance reasons, instead of each\nrecord getting its own copy of the hierarchy of states, each record\npoints to this global, immutable shared instance. How does a state\nknow which record it should be acting on? We pass the record\ninstance into the state's event handlers as the first argument.\n\nThe record passed as the first parameter is where you should stash\nstate about the record if needed; you should never store data on the state\nobject itself.\n\n### Events and Flags\n\nA state may implement zero or more events and flags.\n\n#### Events\n\nEvents are named functions that are invoked when sent to a record. The\nrecord will first look for a method with the given name on the\ncurrent state. If no method is found, it will search the current\nstate's parent, and then its grandparent, and so on until reaching\nthe top of the hierarchy. If the root is reached without an event\nhandler being found, an exception will be raised. This can be very\nhelpful when debugging new features.\n\nHere's an example implementation of a state with a `myEvent` event handler:\n\n```javascript\naState: State.create({\n  myEvent: function(manager, param) {\n    console.log(\"Received myEvent with\", param);\n  }\n})\n```\n\nTo trigger this event:\n\n```javascript\nrecord.send('myEvent', 'foo');\n//=> \"Received myEvent with foo\"\n```\n\nNote that an optional parameter can be sent to a record's `send()` method,\nwhich will be passed as the second parameter to the event handler.\n\nEvents should transition to a different state if appropriate. This can be\ndone by calling the record's `transitionTo()` method with a path to the\ndesired state. The state manager will attempt to resolve the state path\nrelative to the current state. If no state is found at that path, it will\nattempt to resolve it relative to the current state's parent, and then its\nparent, and so on until the root is reached. For example, imagine a hierarchy\nlike this:\n\n    * created\n      * uncommitted <-- currentState\n      * inFlight\n    * updated\n      * inFlight\n\nIf we are currently in the `uncommitted` state, calling\n`transitionTo('inFlight')` would transition to the `created.inFlight` state,\nwhile calling `transitionTo('updated.inFlight')` would transition to\nthe `updated.inFlight` state.\n\nRemember that *only events* should ever cause a state transition. You should\nnever call `transitionTo()` from outside a state's event handler. If you are\ntempted to do so, create a new event and send that to the state manager.\n\n#### Flags\n\nFlags are Boolean values that can be used to introspect a record's current\nstate in a more user-friendly way than examining its state path. For example,\ninstead of doing this:\n\n```javascript\nvar statePath = record.get('stateManager.currentPath');\nif (statePath === 'created.inFlight') {\n  doSomething();\n}\n```\n\nYou can say:\n\n```javascript\nif (record.get('isNew') && record.get('isSaving')) {\n  doSomething();\n}\n```\n\nIf your state does not set a value for a given flag, the value will\nbe inherited from its parent (or the first place in the state hierarchy\nwhere it is defined).\n\nThe current set of flags are defined below. If you want to add a new flag,\nin addition to the area below, you will also need to declare it in the\n`Model` class.\n\n\n * [isEmpty](Model/properties/isEmpty?anchor=isEmpty)\n * [isLoading](Model/properties/isLoading?anchor=isLoading)\n * [isLoaded](Model/properties/isLoaded?anchor=isLoaded)\n * [hasDirtyAttributes](Model/properties/hasDirtyAttributes?anchor=hasDirtyAttributes)\n * [isSaving](Model/properties/isSaving?anchor=isSaving)\n * [isDeleted](Model/properties/isDeleted?anchor=isDeleted)\n * [isNew](Model/properties/isNew?anchor=isNew)\n * [isValid](Model/properties/isValid?anchor=isValid)"
		},
		"AdapterPopulatedRecordArray": {
			"name": "AdapterPopulatedRecordArray",
			"shortname": "AdapterPopulatedRecordArray",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/record-arrays/adapter-populated-record-array.js",
			"line": 12,
			"description": "Represents an ordered list of records whose order and membership is\ndetermined by the adapter. For example, a query sent to the adapter\nmay trigger a search on the server, whose results would be loaded\ninto an instance of the `AdapterPopulatedRecordArray`.\n\n---\n\nIf you want to update the array and get the latest records from the\nadapter, you can invoke [`update()`](AdapterPopulatedRecordArray/methods/update?anchor=update):\n\nExample\n\n```javascript\n// GET /users?isAdmin=true\nstore.query('user', { isAdmin: true }).then(function(admins) {\n\n  admins.then(function() {\n    console.log(admins.get(\"length\")); // 42\n  });\n\n  // somewhere later in the app code, when new admins have been created\n  // in the meantime\n  //\n  // GET /users?isAdmin=true\n  admins.update().then(function() {\n    admins.get('isUpdating'); // false\n    console.log(admins.get(\"length\")); // 123\n  });\n\n  admins.get('isUpdating'); // true\n}\n```",
			"extends": "RecordArray"
		},
		"RecordArray": {
			"name": "RecordArray",
			"shortname": "RecordArray",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 13,
			"description": "A record array is an array that contains records of a certain modelName. The record\narray materializes records as needed when they are retrieved for the first\ntime. You should not create record arrays yourself. Instead, an instance of\n`RecordArray` or its subclasses will be returned by your application's store\nin response to queries.",
			"extends": "ArrayProxy",
			"uses": ["Ember.Evented"]
		},
		"BelongsToReference": {
			"name": "BelongsToReference",
			"shortname": "BelongsToReference",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 11,
			"description": "A `BelongsToReference` is a low-level API that allows users and\naddon authors to perform meta-operations on a belongs-to\nrelationship.",
			"extends": "Reference"
		},
		"HasManyReference": {
			"name": "HasManyReference",
			"shortname": "HasManyReference",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 12,
			"description": "A `HasManyReference` is a low-level API that allows users and addon\nauthors to perform meta-operations on a has-many relationship.",
			"extends": "Reference"
		},
		"RecordReference": {
			"name": "RecordReference",
			"shortname": "RecordReference",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 10,
			"description": "A `RecordReference` is a low-level API that allows users and\naddon authors to perform meta-operations on a record.",
			"extends": "Reference"
		},
		"Reference": {
			"name": "Reference",
			"shortname": "Reference",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/references/reference.ts",
			"line": 27,
			"description": "This is the baseClass for the different References\nlike RecordReference/HasManyReference/BelongsToReference"
		},
		"Store": {
			"name": "Store",
			"shortname": "Store",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/ds-model-store.ts",
			"line": 26,
			"description": "The store service contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nBy default, applications will have a single `Store` service that is\nautomatically created.\n\nThe store can be customized by extending the service in the following manner:\n\n```app/services/store.js\nimport Store from '@ember-data/store';\n\nexport default class MyStore extends Store {}\n```\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use the `Store`'s `findRecord()` method:\n\n```javascript\nstore.findRecord('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default Adapter.extend({\n});\n```\n\nYou can learn more about writing a custom adapter by reading the `Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](Store/methods/createRecord?anchor=createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend, you will need to call `record.save()`.\n\n[push](Store/methods/push?anchor=push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates (full or partial) that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](Store/methods/pushPayload?anchor=pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `RecordArray`s such as those returned by\n`store#peekAll()` or `store#findAll()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
			"extends": "Ember.Service",
			"mainName": "@ember-data/store",
			"tag": "main",
			"itemtype": "main",
			"_main": true
		},
		"IdentityMap": {
			"name": "IdentityMap",
			"shortname": "IdentityMap",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/identity-map.ts",
			"line": 8,
			"description": "`IdentityMap` is a custom storage map for records by modelName\nused by `Store`.",
			"access": "private",
			"tagname": ""
		},
		"InternalModelMap": {
			"name": "InternalModelMap",
			"shortname": "InternalModelMap",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/internal-model-map.ts",
			"line": 9,
			"description": "`InternalModelMap` is a custom storage map for internalModels of a given modelName\nused by `IdentityMap`.\n\nIt was extracted from an implicit pojo based \"internalModel map\" and preserves\nthat interface while we work towards a more official API.",
			"access": "private",
			"tagname": ""
		},
		"ManyArray": {
			"name": "ManyArray",
			"shortname": "ManyArray",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/many-array.js",
			"line": 18,
			"description": "A `ManyArray` is a `MutableArray` that represents the contents of a has-many\nrelationship.\n\nThe `ManyArray` is instantiated lazily the first time the relationship is\nrequested.\n\n### Inverses\n\nOften, the relationships in Ember Data applications will have\nan inverse. For example, imagine the following models are\ndefined:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\nIf you created a new instance of `Post` and added\na `Comment` record to its `comments` has-many\nrelationship, you would expect the comment's `post`\nproperty to be set to the post that contained\nthe has-many.\n\nWe call the record to which a relationship belongs-to the\nrelationship's _owner_.",
			"extends": "EmberObject",
			"uses": ["Ember.MutableArray", "EmberData.DeprecatedEvent"]
		},
		"RecordArrayManager": {
			"name": "RecordArrayManager",
			"shortname": "RecordArrayManager",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/record-array-manager.js",
			"line": 15,
			"access": "private",
			"tagname": ""
		},
		"SnapshotRecordArray": {
			"name": "SnapshotRecordArray",
			"shortname": "SnapshotRecordArray",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 5,
			"access": "private",
			"tagname": "",
			"is_constructor": 1,
			"params": [
				{ "name": "snapshots", "description": "An array of snapshots", "type": "Array" },
				{ "name": "meta", "description": "", "type": "Object" }
			]
		},
		"Snapshot": {
			"name": "Snapshot",
			"shortname": "Snapshot",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/store",
			"namespace": "",
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 21,
			"access": "private",
			"tagname": "",
			"is_constructor": 1,
			"params": [
				{
					"name": "internalModel",
					"description": "The model to create a snapshot from",
					"type": "Model"
				}
			]
		},
		"MinimumSerializerInterface": {
			"name": "MinimumSerializerInterface",
			"shortname": "MinimumSerializerInterface",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data/serializer",
			"namespace": "",
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 112,
			"description": "The following documentation describes the methods an application\nserializer should implement with descriptions around when an\napplication might expect these methods to be called.\n\nMethods that are not required are marked as **optional**."
		},
		"@ember-data": {
			"name": "@ember-data",
			"shortname": "@ember-data",
			"classitems": [],
			"plugins": [],
			"extensions": [],
			"plugin_for": [],
			"extension_for": [],
			"module": "@ember-data",
			"namespace": ""
		}
	},
	"elements": {},
	"classitems": [
		{
			"file": "../../node_modules/ember-inflector/addon/lib/ext/string.js",
			"line": 9,
			"description": "See {{#crossLink \"Ember.String/pluralize\"}}{{/crossLink}}",
			"itemtype": "method",
			"name": "pluralize",
			"class": "String"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/ext/string.js",
			"line": 28,
			"description": "See {{#crossLink \"Ember.String/singularize\"}}{{/crossLink}}",
			"itemtype": "method",
			"name": "singularize",
			"class": "String"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/helpers/pluralize.js",
			"line": 4,
			"description": "If you have Ember Inflector (such as if Ember Data is present),\n pluralize a word. For example, turn \"ox\" into \"oxen\".\nExample:\n{{pluralize count myProperty}}\n {{pluralize 1 \"oxen\"}}\n {{pluralize myProperty}}\n {{pluralize \"ox\"}}",
			"itemtype": "method",
			"name": "pluralize",
			"params": [
				{
					"name": "count",
					"description": "count of objects",
					"type": "Number|Property",
					"optional": true
				},
				{ "name": "word", "description": "word to pluralize", "type": "String|Property" }
			],
			"class": "Ember.HTMLBars.helpers"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/helpers/singularize.js",
			"line": 4,
			"description": "If you have Ember Inflector (such as if Ember Data is present),\n singularize a word. For example, turn \"oxen\" into \"ox\".\nExample:\n{{singularize myProperty}}\n {{singularize \"oxen\"}}",
			"itemtype": "method",
			"name": "singularize",
			"params": [
				{ "name": "word", "description": "word to singularize", "type": "String|Property" }
			],
			"class": "Ember.HTMLBars.helpers"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 123,
			"access": "public",
			"tagname": "As inflections can be costly, and commonly the same subset of words are repeatedly\ninflected an optional cache is provided.",
			"itemtype": "method",
			"name": "enableCache",
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 146,
			"access": "public",
			"tagname": "",
			"itemtype": "method",
			"name": "purgedCache",
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 157,
			"access": "public",
			"tagname": "disable caching",
			"itemtype": "method",
			"name": "disableCache;",
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 175,
			"itemtype": "method",
			"name": "plural",
			"params": [
				{ "name": "regex", "description": "", "type": "RegExp" },
				{ "name": "string", "description": "", "type": "String" }
			],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 185,
			"itemtype": "method",
			"name": "singular",
			"params": [
				{ "name": "regex", "description": "", "type": "RegExp" },
				{ "name": "string", "description": "", "type": "String" }
			],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 195,
			"itemtype": "method",
			"name": "uncountable",
			"params": [{ "name": "regex", "description": "", "type": "String" }],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 204,
			"itemtype": "method",
			"name": "irregular",
			"params": [
				{ "name": "singular", "description": "", "type": "String" },
				{ "name": "plural", "description": "", "type": "String" }
			],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 214,
			"itemtype": "method",
			"name": "pluralize",
			"params": [{ "name": "word", "description": "", "type": "String" }],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 233,
			"itemtype": "method",
			"name": "singularize",
			"params": [{ "name": "word", "description": "", "type": "String" }],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../../node_modules/ember-inflector/addon/lib/system/inflector.js",
			"line": 245,
			"access": "protected",
			"tagname": "",
			"itemtype": "method",
			"name": "inflect",
			"params": [
				{ "name": "word", "description": "", "type": "String" },
				{ "name": "typeRules", "description": "", "type": "Object" },
				{ "name": "irregular", "description": "", "type": "Object" }
			],
			"class": "Ember.Inflector",
			"namespace": "Ember"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 36,
			"description": "Builds a URL for a given type and optional ID.\n\nBy default, it pluralizes the type's name (for example, 'post'\nbecomes 'posts' and 'person' becomes 'people'). To override the\npluralization see [pathForType](BuildUrlMixin/methods/pathForType?anchor=pathForType).\n\nIf an ID is specified, it adds the ID to the path generated\nfor the type, separated by a `/`.\n\nWhen called by `RESTAdapter.findMany()` the `id` and `snapshot` parameters\nwill be arrays of ids and snapshots.",
			"itemtype": "method",
			"name": "buildURL",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{
					"name": "id",
					"description": "single id or array of ids or query",
					"type": "(String|Array|Object)"
				},
				{
					"name": "snapshot",
					"description": "single snapshot or array of snapshots",
					"type": "(Snapshot|SnapshotRecordArray)"
				},
				{ "name": "requestType", "description": "", "type": "String" },
				{
					"name": "query",
					"description": "object of query parameters to send for query requests.",
					"type": "Object"
				}
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 84,
			"itemtype": "method",
			"name": "_buildURL",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "String" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 119,
			"description": "Builds a URL for a `store.findRecord(type, id)` call.\n\nExample:\n\n```app/adapters/user.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  urlForFindRecord(id, modelName, snapshot) {\n    let baseUrl = this.buildURL(modelName, id, snapshot);\n    return `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForFindRecord",
			"params": [
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 146,
			"description": "Builds a URL for a `store.findAll(type)` call.\n\nExample:\n\n```app/adapters/comment.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  urlForFindAll(modelName, snapshot) {\n    return 'data/comments.json';\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForFindAll",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "SnapshotRecordArray" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 170,
			"description": "Builds a URL for a `store.query(type, query)` call.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  host: 'https://api.github.com',\n  urlForQuery (query, modelName) {\n    switch(modelName) {\n      case 'repo':\n        return `https://api.github.com/orgs/${query.orgId}/repos`;\n      default:\n        return this._super(...arguments);\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForQuery",
			"params": [
				{ "name": "query", "description": "", "type": "Object" },
				{ "name": "modelName", "description": "", "type": "String" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 200,
			"description": "Builds a URL for a `store.queryRecord(type, query)` call.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  urlForQueryRecord({ slug }, modelName) {\n    let baseUrl = this.buildURL();\n    return `${baseUrl}/${encodeURIComponent(slug)}`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForQueryRecord",
			"params": [
				{ "name": "query", "description": "", "type": "Object" },
				{ "name": "modelName", "description": "", "type": "String" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 225,
			"description": "Builds a URL for coalescing multiple `store.findRecord(type, id)`\nrecords into 1 request when the adapter's `coalesceFindRequests`\nproperty is `true`.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  urlForFindMany(ids, modelName) {\n    let baseUrl = this.buildURL();\n    return `${baseUrl}/coalesce`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForFindMany",
			"params": [
				{ "name": "ids", "description": "", "type": "Array" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshots", "description": "", "type": "Array" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 253,
			"description": "Builds a URL for fetching an async `hasMany` relationship when a URL\nis not provided by the server.\n\nExample:\n\n```app/adapters/application.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  urlForFindHasMany(id, modelName, snapshot) {\n    let baseUrl = this.buildURL(modelName, id);\n    return `${baseUrl}/relationships`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForFindHasMany",
			"params": [
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 280,
			"description": "Builds a URL for fetching an async `belongsTo` relationship when a url\nis not provided by the server.\n\nExample:\n\n```app/adapters/application.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  urlForFindBelongsTo(id, modelName, snapshot) {\n    let baseUrl = this.buildURL(modelName, id);\n    return `${baseUrl}/relationships`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForFindBelongsTo",
			"params": [
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 307,
			"description": "Builds a URL for a `record.save()` call when the record was created\nlocally using `store.createRecord()`.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  urlForCreateRecord(modelName, snapshot) {\n    return this._super(...arguments) + '/new';\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForCreateRecord",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 332,
			"description": "Builds a URL for a `record.save()` call when the record has been updated locally.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  urlForUpdateRecord(id, modelName, snapshot) {\n    return `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForUpdateRecord",
			"params": [
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 357,
			"description": "Builds a URL for a `record.save()` call when the record has been deleted locally.\n\nExample:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  urlForDeleteRecord(id, modelName, snapshot) {\n    return this._super(...arguments) + '/destroy';\n  }\n});\n```",
			"itemtype": "method",
			"name": "urlForDeleteRecord",
			"params": [
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "url", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 382,
			"itemtype": "method",
			"name": "urlPrefix",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "path", "description": "", "type": "String" },
				{ "name": "parentURL", "description": "", "type": "String" }
			],
			"return": { "description": "urlPrefix", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/-private/build-url-mixin.js",
			"line": 423,
			"description": "Determines the pathname for a given type.\n\nBy default, it pluralizes the type's name (for example,\n'post' becomes 'posts' and 'person' becomes 'people').\n\n### Pathname customization\n\nFor example, if you have an object `LineItem` with an\nendpoint of `/line_items/`.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { decamelize } from '@ember/string';\nimport { pluralize } from 'ember-inflector';\n\nexport default RESTAdapter.extend({\n  pathForType: function(modelName) {\n    var decamelized = decamelize(modelName);\n    return pluralize(decamelized);\n  }\n});\n```",
			"itemtype": "method",
			"name": "pathForType",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "path", "type": "String" },
			"class": "BuildURLMixin",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 66,
			"description": "If you would like your adapter to use a custom serializer you can\nset the `defaultSerializer` property to be the name of the custom\nserializer.\n\nNote the `defaultSerializer` serializer has a lower priority than\na model specific serializer (i.e. `PostSerializer`) or the\n`application` serializer.\n\n```app/adapters/django.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  defaultSerializer: 'django'\n});\n```",
			"deprecated": true,
			"itemtype": "property",
			"name": "defaultSerializer",
			"type": "{String}",
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 89,
			"description": "The `findRecord()` method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to `findRecord()` being called, you\nshould query your persistence layer for a record with the given ID. The `findRecord`\nmethod should return a promise that will resolve to a JavaScript object that will be\nnormalized by the serializer.\n\nHere is an example of the `findRecord` implementation:\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  findRecord(store, type, id, snapshot) {\n    return new RSVP.Promise(function(resolve, reject) {\n      $.getJSON(`/${type.modelName}/${id}`).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "findRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 125,
			"description": "The `findAll()` method is used to retrieve all records for a given type.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  findAll(store, type) {\n    return new RSVP.Promise(function(resolve, reject) {\n      $.getJSON(`/${type.modelName}`).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "findAll",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{
					"name": "neverSet",
					"description": "a value is never provided to this argument",
					"type": "Undefined"
				},
				{ "name": "snapshotRecordArray", "description": "", "type": "SnapshotRecordArray" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 157,
			"description": "This method is called when you call `query` on the store.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  query(store, type, query) {\n    return new RSVP.Promise(function(resolve, reject) {\n      $.getJSON(`/${type.modelName}`, query).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "query",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "query", "description": "", "type": "Object" },
				{ "name": "recordArray", "description": "", "type": "AdapterPopulatedRecordArray" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 189,
			"description": "The `queryRecord()` method is invoked when the store is asked for a single\nrecord through a query object.\n\nIn response to `queryRecord()` being called, you should always fetch fresh\ndata. Once found, you can asynchronously call the store's `push()` method\nto push the record into the store.\n\nHere is an example `queryRecord` implementation:\n\nExample\n\n```app/adapters/application.js\nimport Adapter, { BuildURLMixin } from '@ember-data/adapter';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend(BuildURLMixin, {\n  queryRecord(store, type, query) {\n    return new RSVP.Promise(function(resolve, reject) {\n      $.getJSON(`/${type.modelName}`, query).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "queryRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Subclass of Model" },
				{ "name": "query", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 227,
			"description": "If the globally unique IDs for your records should be generated on the client,\nimplement the `generateIdForRecord()` method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record's `primaryKey`.\n\nMost traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls `didCreateRecord()`. Only implement this method if\nyou intend to generate record IDs on the client-side.\n\nThe `generateIdForRecord()` method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:\n\n```javascript\nimport Adapter from '@ember-data/adapter';\nimport { v4 } from 'uuid';\n\nexport default Adapter.extend({\n  generateIdForRecord(store, type, inputProperties) {\n    return v4();\n  }\n});\n```",
			"itemtype": "method",
			"name": "generateIdForRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "the Model class of the record", "type": "Model" },
				{
					"name": "inputProperties",
					"description": "a hash of properties to set on the\n  newly created record.",
					"type": "Object"
				}
			],
			"return": { "description": "id", "type": "(String|Number)" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 261,
			"description": "Proxies to the serializer's `serialize` method.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  createRecord(store, type, snapshot) {\n    let data = this.serialize(snapshot, { includeId: true });\n    let url = `/${type.modelName}`;\n\n    // ...\n  }\n});\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "serialized snapshot", "type": "Object" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 288,
			"description": "Implement this method in a subclass to handle the creation of\nnew records.\n\nSerializes the record and sends it to the server.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport { run } from '@ember/runloop';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  createRecord(store, type, snapshot) {\n    let data = this.serialize(snapshot, { includeId: true });\n\n    return new RSVP.Promise(function(resolve, reject) {\n      $.ajax({\n        type: 'POST',\n        url: `/${type.modelName}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "createRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "the Model class of the record", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 331,
			"description": "Implement this method in a subclass to handle the updating of\na record.\n\nSerializes the record update and sends it to the server.\n\nThe updateRecord method is expected to return a promise that will\nresolve with the serialized record. This allows the backend to\ninform the Ember Data store the current state of this record after\nthe update. If it is not possible to return a serialized record\nthe updateRecord promise can also resolve with `undefined` and the\nEmber Data store will assume all of the updates were successfully\napplied on the backend.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport { run } from '@ember/runloop';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  updateRecord(store, type, snapshot) {\n    let data = this.serialize(snapshot, { includeId: true });\n    let id = snapshot.id;\n\n    return new RSVP.Promise(function(resolve, reject) {\n      $.ajax({\n        type: 'PUT',\n        url: `/${type.modelName}/${id}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "updateRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "the Model class of the record", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 383,
			"description": "Implement this method in a subclass to handle the deletion of\na record.\n\nSends a delete request for the record to the server.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport { run } from '@ember/runloop';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  deleteRecord(store, type, snapshot) {\n    let data = this.serialize(snapshot, { includeId: true });\n    let id = snapshot.id;\n\n    return new RSVP.Promise(function(resolve, reject) {\n      $.ajax({\n        type: 'DELETE',\n        url: `/${type.modelName}/${id}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "deleteRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "the Model class of the record", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 427,
			"description": "By default the store will try to coalesce all `fetchRecord` calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false.",
			"itemtype": "property",
			"name": "coalesceFindRequests",
			"type": "{boolean}",
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 438,
			"description": "The store will call `findMany` instead of multiple `findRecord`\nrequests to find multiple records at once if coalesceFindRequests\nis true.\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nimport { run } from '@ember/runloop';\nimport RSVP from 'RSVP';\nimport $ from 'jquery';\n\nexport default Adapter.extend({\n  findMany(store, type, ids, snapshots) {\n    return new RSVP.Promise(function(resolve, reject) {\n      $.ajax({\n        type: 'GET',\n        url: `/${type.modelName}/`,\n        dataType: 'json',\n        data: { filter: { id: ids.join(',') } }\n      }).then(function(data) {\n        run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "findMany",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "the Model class of the records", "type": "Model" },
				{ "name": "ids", "description": "", "type": "Array" },
				{ "name": "snapshots", "description": "", "type": "Array" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 477,
			"description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nFor example, if your API has nested URLs that depend on the parent, you will\nwant to group records by their parent.\n\nThe default implementation returns the records as a single group.",
			"itemtype": "method",
			"name": "groupRecordsForFindMany",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshots", "description": "", "type": "Array" }
			],
			"return": {
				"description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
				"type": "Array"
			},
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 496,
			"description": "This method is used by the store to determine if the store should\nreload a record from the adapter when a record is requested by\n`store.findRecord`.\n\nIf this method returns `true`, the store will re-fetch a record from\nthe adapter. If this method returns `false`, the store will resolve\nimmediately using the cached record.\n\nFor example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:\n\n```javascript\nshouldReloadRecord(store, ticketSnapshot) {\n  let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n  let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n\n  if (timeDiff > 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\nThis method would ensure that whenever you do `store.findRecord('ticket',\nid)` you will always get a ticket that is no more than 20 minutes old. In\ncase the cached version is more than 20 minutes old, `findRecord` will not\nresolve until you fetched the latest version.\n\nBy default this hook returns `false`, as most UIs should not block user\ninteractions while waiting on data update.\n\nNote that, with default settings, `shouldBackgroundReloadRecord` will always\nre-fetch the records in the background even if `shouldReloadRecord` returns\n`false`. You can override `shouldBackgroundReloadRecord` if this does not\nsuit your use case.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "shouldReloadRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 546,
			"description": "This method is used by the store to determine if the store should\nreload all records from the adapter when records are requested by\n`store.findAll`.\n\nIf this method returns `true`, the store will re-fetch all records from\nthe adapter. If this method returns `false`, the store will resolve\nimmediately using the cached records.\n\nFor example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:\n\n```javascript\nshouldReloadAll(store, snapshotArray) {\n  let snapshots = snapshotArray.snapshots();\n\n  return snapshots.any((ticketSnapshot) => {\n    let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n    let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n\n    if (timeDiff > 20) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n```\n\nThis method would ensure that whenever you do `store.findAll('ticket')` you\nwill always get a list of tickets that are no more than 20 minutes old. In\ncase a cached version is more than 20 minutes old, `findAll` will not\nresolve until you fetched the latest versions.\n\nBy default, this method returns `true` if the passed `snapshotRecordArray`\nis empty (meaning that there are no records locally available yet),\notherwise, it returns `false`.\n\nNote that, with default settings, `shouldBackgroundReloadAll` will always\nre-fetch all the records in the background even if `shouldReloadAll` returns\n`false`. You can override `shouldBackgroundReloadAll` if this does not suit\nyour use case.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "shouldReloadAll",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshotRecordArray", "description": "", "type": "SnapshotRecordArray" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 601,
			"description": "This method is used by the store to determine if the store should\nreload a record after the `store.findRecord` method resolves a\ncached record.\n\nThis method is *only* checked by the store when the store is\nreturning a cached record.\n\nIf this method returns `true` the store will re-fetch a record from\nthe adapter.\n\nFor example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n`shouldBackgroundReloadRecord` as follows:\n\n```javascript\nshouldBackgroundReloadRecord(store, snapshot) {\n  let { downlink, effectiveType } = navigator.connection;\n\n  return downlink > 0 && effectiveType === '4g';\n}\n```\n\nBy default, this hook returns `true` so the data for the record is updated\nin the background.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "shouldBackgroundReloadRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/index.js",
			"line": 637,
			"description": "This method is used by the store to determine if the store should\nreload a record array after the `store.findAll` method resolves\nwith a cached record array.\n\nThis method is *only* checked by the store when the store is\nreturning a cached record array.\n\nIf this method returns `true` the store will re-fetch all records\nfrom the adapter.\n\nFor example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n`shouldBackgroundReloadAll` as follows:\n\n```javascript\nshouldBackgroundReloadAll(store, snapshotArray) {\n  let { downlink, effectiveType } = navigator.connection;\n\n  return downlink > 0 && effectiveType === '4g';\n}\n```\n\nBy default this method returns `true`, indicating that a background reload\nshould always be triggered.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "shouldBackgroundReloadAll",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshotRecordArray", "description": "", "type": "SnapshotRecordArray" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "Adapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/json-api.js",
			"line": 149,
			"itemtype": "method",
			"name": "ajaxOptions",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "url", "description": "", "type": "String" },
				{
					"name": "type",
					"description": "The request type GET, POST, PUT, DELETE etc.",
					"type": "String"
				},
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONAPIAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/json-api.js",
			"line": 165,
			"description": "By default the JSONAPIAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of:\n\n```javascript\n{\n  data: {\n    id: 1,\n    type: 'post',\n    relationship: {\n      comments: {\n        data: [\n          { id: 1, type: 'comment' },\n          { id: 2, type: 'comment' }\n        ]\n      }\n    }\n  }\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?filter[id]=1,2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n```\n\nwill also send a request to: `GET /comments?filter[id]=1,2`\n\nNote: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n`groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.",
			"itemtype": "property",
			"name": "coalesceFindRequests",
			"type": "{boolean}",
			"class": "JSONAPIAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 325,
			"description": "By default, the RESTAdapter will send the query params sorted alphabetically to the\nserver.\n\nFor example:\n\n```js\nstore.query('posts', { sort: 'price', category: 'pets' });\n```\n\nwill generate a requests like this `/posts?category=pets&sort=price`, even if the\nparameters were specified in a different order.\n\nThat way the generated URL will be deterministic and that simplifies caching mechanisms\nin the backend.\n\nSetting `sortQueryParams` to a falsey value will respect the original order.\n\nIn case you want to sort the query parameters with a different criteria, set\n`sortQueryParams` to your custom sort function.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  sortQueryParams(params) {\n    let sortedKeys = Object.keys(params).sort().reverse();\n    let len = sortedKeys.length, newParams = {};\n\n    for (let i = 0; i < len; i++) {\n      newParams[sortedKeys[i]] = params[sortedKeys[i]];\n    }\n\n    return newParams;\n  }\n});\n```",
			"itemtype": "method",
			"name": "sortQueryParams",
			"params": [{ "name": "obj", "description": "", "type": "Object" }],
			"return": { "description": "", "type": "Object" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 382,
			"description": "By default the RESTAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of:\n\n```javascript\n{\n  post: {\n    id: 1,\n    comments: [1, 2]\n  }\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?ids[]=1&ids[]=2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n```\n\nwill also send a request to: `GET /comments?ids[]=1&ids[]=2`\n\nNote: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n`groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.",
			"itemtype": "property",
			"name": "coalesceFindRequests",
			"type": "{boolean}",
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 431,
			"description": "Endpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  namespace: 'api/1'\n});\n```\n\nRequests for the `Post` model would now target `/api/1/post/`.",
			"itemtype": "property",
			"name": "namespace",
			"type": "{String}",
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 449,
			"description": "An adapter can target other hosts by setting the `host` property.\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\n\nexport default RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n```\n\nRequests for the `Post` model would now target `https://api.example.com/post/`.",
			"itemtype": "property",
			"name": "host",
			"type": "{String}",
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 466,
			"description": "Some APIs require HTTP headers, e.g. to provide an API\nkey. Arbitrary headers can be set as key/value pairs on the\n`RESTAdapter`'s `headers` object and Ember Data will send them\nalong with each ajax request. For dynamic headers see [headers\ncustomization](/ember-data/release/classes/RESTAdapter).\n\n```app/adapters/application.js\nimport RESTAdapter from '@ember-data/adapter/rest';\nimport { computed } from '@ember/object';\n\nexport default RESTAdapter.extend({\n  headers: computed(function() {\n    return {\n      'API_KEY': 'secret key',\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  })\n});\n```",
			"itemtype": "property",
			"name": "headers",
			"type": "{Object}",
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 491,
			"description": "Called by the store in order to fetch the JSON for a given\ntype and ID.\n\nThe `findRecord` method makes an Ajax request to a URL computed by\n`buildURL`, and returns a promise for the resulting payload.\n\nThis method performs an HTTP `GET` request with the id provided as part of the query string.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "findRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "id", "description": "", "type": "String" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 515,
			"description": "Called by the store in order to fetch a JSON array for all\nof the records for a given type.\n\nThe `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
			"itemtype": "method",
			"name": "findAll",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{
					"name": "neverSet",
					"description": "a value is never provided to this argument",
					"type": "Undefined"
				},
				{ "name": "snapshotRecordArray", "description": "", "type": "SnapshotRecordArray" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 540,
			"description": "Called by the store in order to fetch a JSON array for\nthe records that match a particular query.\n\nThe `query` method makes an Ajax (HTTP GET) request to a URL\ncomputed by `buildURL`, and returns a promise for the resulting\npayload.\n\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
			"itemtype": "method",
			"name": "query",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "query", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 567,
			"description": "Called by the store in order to fetch a JSON object for\nthe record that matches a particular query.\n\nThe `queryRecord` method makes an Ajax (HTTP GET) request to a URL\ncomputed by `buildURL`, and returns a promise for the resulting\npayload.\n\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "queryRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "query", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 595,
			"description": "Called by the store in order to fetch several records together if `coalesceFindRequests` is true\n\nFor example, if the original payload looks like:\n\n```js\n{\n  \"id\": 1,\n  \"title\": \"Rails is omakase\",\n  \"comments\": [ 1, 2, 3 ]\n}\n```\n\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n\n```\nids[]=1&ids[]=2&ids[]=3\n```\n\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\n\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
			"itemtype": "method",
			"name": "findMany",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "ids", "description": "", "type": "Array" },
				{ "name": "snapshots", "description": "", "type": "Array" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 633,
			"description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"comments\": \"/posts/1/comments\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/posts/1/comments`.\n\nThe `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\n\nThe format of your `links` value will influence the final request URL via the `urlPrefix` method:\n\n* Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n\n* Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n\n* Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.",
			"itemtype": "method",
			"name": "findHasMany",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "url", "description": "", "type": "String" },
				{
					"name": "relationship",
					"description": "meta object describing the relationship",
					"type": "Object"
				}
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 678,
			"description": "Called by the store in order to fetch the JSON for the unloaded record in a\nbelongs-to relationship that was originally specified as a URL (inside of\n`links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 1,\n    \"name\": \"Tom Dale\",\n    \"links\": { \"group\": \"/people/1/group\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/people/1/group`.\n\nThe `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.\n\nThe format of your `links` value will influence the final request URL via the `urlPrefix` method:\n\n* Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n\n* Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n\n* Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.",
			"itemtype": "method",
			"name": "findBelongsTo",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "url", "description": "", "type": "String" },
				{
					"name": "relationship",
					"description": "meta object describing the relationship",
					"type": "Object"
				}
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 722,
			"description": "Called by the store when a newly created record is\nsaved via the `save` method on a model record instance.\n\nThe `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
			"itemtype": "method",
			"name": "createRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 746,
			"description": "Called by the store when an existing record is saved\nvia the `save` method on a model record instance.\n\nThe `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
			"itemtype": "method",
			"name": "updateRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 771,
			"description": "Called by the store when a record is deleted.\n\nThe `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.",
			"itemtype": "method",
			"name": "deleteRecord",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "type", "description": "", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 812,
			"description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nThis implementation groups together records that have the same base URL but\ndiffering ids. For example `/comments/1` and `/comments/2` will be grouped together\nbecause we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\n\nIt also supports urls where ids are passed as a query param, such as `/comments?id=1`\nbut not those where there is more than 1 query param such as `/comments?id=2&name=David`\nCurrently only the query param of `id` is supported. If you need to support others, please\noverride this or the `_stripIDFromURL` method.\n\nIt does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\nand `/posts/2/comments/3`",
			"itemtype": "method",
			"name": "groupRecordsForFindMany",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "snapshots", "description": "", "type": "Array" }
			],
			"return": {
				"description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
				"type": "Array"
			},
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 880,
			"description": "Takes an ajax response, and returns the json payload or an error.\n\nBy default this hook just returns the json payload passed to it.\nYou might want to override it in two cases:\n\n1. Your API might return useful results in the response headers.\nResponse headers are passed in as the second argument.\n\n2. Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a `InvalidError` or a\n`AdapterError` (or a sub class) from this hook and it will automatically\nreject the promise and put your record into the invalid or error state.\n\nReturning a `InvalidError` from this method will cause the\nrecord to transition into the `invalid` state and make the\n`errors` object available on the record. When returning an\n`InvalidError` the store will attempt to normalize the error data\nreturned from the server using the serializer's `extractErrors`\nmethod.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "handleResponse",
			"params": [
				{ "name": "status", "description": "", "type": "Number" },
				{ "name": "headers", "description": "", "type": "Object" },
				{ "name": "payload", "description": "", "type": "Object" },
				{
					"name": "requestData",
					"description": "- the original request information",
					"type": "Object"
				}
			],
			"return": { "description": "response", "type": "Object | AdapterError" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 937,
			"description": "Default `handleResponse` implementation uses this hook to decide if the\nresponse is a success.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "isSuccess",
			"params": [
				{ "name": "status", "description": "", "type": "Number" },
				{ "name": "headers", "description": "", "type": "Object" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 952,
			"description": "Default `handleResponse` implementation uses this hook to decide if the\nresponse is an invalid error.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "isInvalid",
			"params": [
				{ "name": "status", "description": "", "type": "Number" },
				{ "name": "headers", "description": "", "type": "Object" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 967,
			"description": "Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\n\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\n\nBy default, `ajax` method has the following behavior:\n\n* It sets the response `dataType` to `\"json\"`\n* If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n  `application/json; charset=utf-8`\n* If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n  data is the serialized record in the case of a save.\n* Registers success and failure handlers.",
			"itemtype": "method",
			"name": "ajax",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "url", "description": "", "type": "String" },
				{
					"name": "type",
					"description": "The request type GET, POST, PUT, DELETE etc.",
					"type": "String"
				},
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1033,
			"itemtype": "method",
			"name": "_ajaxRequest",
			"access": "private",
			"tagname": "",
			"params": [
				{
					"name": "options",
					"description": "jQuery ajax options to be used for the ajax request",
					"type": "Object"
				}
			],
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1042,
			"itemtype": "method",
			"name": "_najaxRequest",
			"access": "private",
			"tagname": "",
			"params": [
				{
					"name": "options",
					"description": "jQuery ajax options to be used for the najax request",
					"type": "Object"
				}
			],
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1079,
			"itemtype": "method",
			"name": "ajaxOptions",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "url", "description": "", "type": "String" },
				{
					"name": "type",
					"description": "The request type GET, POST, PUT, DELETE etc.",
					"type": "String"
				},
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1151,
			"itemtype": "method",
			"name": "parseErrorResponse",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "responseText", "description": "", "type": "String" }],
			"return": { "description": "", "type": "Object" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1169,
			"itemtype": "method",
			"name": "normalizeErrorResponse",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "status", "description": "", "type": "Number" },
				{ "name": "headers", "description": "", "type": "Object" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"return": { "description": "errors payload", "type": "Array" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1191,
			"description": "Generates a detailed (\"friendly\") error message, with plenty\nof information for debugging (good luck!)",
			"itemtype": "method",
			"name": "generatedDetailedMessage",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "status", "description": "", "type": "Number" },
				{ "name": "headers", "description": "", "type": "Object" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "requestData", "description": "", "type": "Object" }
			],
			"return": { "description": "detailed error message", "type": "String" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../adapter/addon/rest.js",
			"line": 1355,
			"description": "Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.",
			"params": [
				{ "name": "_options", "description": "", "type": "Object" },
				{ "name": "adapter", "description": "", "type": "Adapter" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "RESTAdapter",
			"module": "@ember-data/adapter"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 47,
			"description": "Specifies how records can be filtered based on the state of the record\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array",
			"itemtype": "method",
			"name": "getFilters",
			"access": "private",
			"tagname": "",
			"return": {
				"description": "List of objects defining filters\n The object should have a `name` and `desc` property",
				"type": "Array"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 69,
			"description": "Fetch the model types and observe them for changes.\nMaintains the list of model types without needing the Model package for detection.",
			"itemtype": "method",
			"name": "watchModelTypes",
			"access": "public",
			"tagname": "",
			"params": [
				{
					"name": "typesAdded",
					"description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
					"type": "Function"
				},
				{
					"name": "typesUpdated",
					"description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
					"type": "Function"
				}
			],
			"return": { "description": "Method to call to remove all observers", "type": "Function" },
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 113,
			"description": "Loop over the discovered types and use the callbacks from watchModelTypes to notify\nthe consumer of this adapter about the mdoels.",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "discoveredTypes", "description": "", "type": "Map" },
				{ "name": "type", "description": "", "type": "String" },
				{ "name": "typesAdded", "description": "", "type": "Function" },
				{ "name": "typesUpdated", "description": "", "type": "Function" },
				{ "name": "releaseMethods", "description": "", "type": "Array" }
			],
			"internal": "",
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 135,
			"description": "Creates a human readable string used for column headers",
			"itemtype": "method",
			"name": "columnNameToDesc",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "name", "description": "The attribute name", "type": "String" }],
			"return": {
				"description": "Human readable string based on the attribute name",
				"type": "String"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 151,
			"description": "Get the columns for a given model type",
			"itemtype": "method",
			"name": "columnsForType",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "typeClass", "description": "", "type": "Model" }],
			"return": {
				"description": "An array of columns of the following format:\n name: {String} The name of the column\n desc: {String} Humanized description (what would show in a table column name)",
				"type": "Array"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 180,
			"description": "Fetches all loaded records for a given type",
			"itemtype": "method",
			"name": "getRecords",
			"internal": "",
			"params": [
				{ "name": "modelClass", "description": "of the record", "type": "Model" },
				{ "name": "modelName", "description": "of the record", "type": "String" }
			],
			"return": {
				"description": "An array of Model records\n This array will be observed for changes,\n so it should update when new records are added/removed",
				"type": "Array"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 206,
			"description": "Gets the values for each column\nThis is the attribute values for a given record",
			"itemtype": "method",
			"name": "getRecordColumnValues",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "record", "description": "to get values from", "type": "Model" }],
			"return": {
				"description": "Keys should match column names defined by the model type",
				"type": "Object"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 228,
			"description": "Returns keywords to match when searching records",
			"itemtype": "method",
			"name": "getRecordKeywords",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "record", "description": "", "type": "Model" }],
			"return": {
				"description": "Relevant keywords for search based on the record's attribute values",
				"type": "Array"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 244,
			"description": "Returns the values of filters defined by `getFilters`\nThese reflect the state of the record",
			"itemtype": "method",
			"name": "getRecordFilterValues",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "record", "description": "", "type": "Model" }],
			"return": { "description": "The record state filter values", "type": "Object" },
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 261,
			"description": "Returns a color that represents the record's state\nPossible colors: black, blue, green",
			"itemtype": "method",
			"name": "getRecordColor",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "record", "description": "", "type": "Model" }],
			"return": { "description": "The record color", "type": "String" },
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../debug/addon/index.js",
			"line": 280,
			"description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs",
			"itemtype": "method",
			"name": "observeRecord",
			"internal": "",
			"params": [
				{ "name": "record", "description": "", "type": "Model" },
				{
					"name": "recordUpdated",
					"description": "Callback used to notify changes",
					"type": "Function"
				}
			],
			"return": {
				"description": "The function to call to remove all observers",
				"type": "Function"
			},
			"class": "InspectorDataAdapter",
			"module": "@ember-data/debug"
		},
		{
			"file": "../model/addon/-private/attr.js",
			"line": 29,
			"description": "`attr` defines an attribute on a [Model](/ember-data/release/classes/Model).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[Transform](/ember-data/release/classes/Transform).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if none is supplied.\n\nExample\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  verified: attr('boolean', { defaultValue: false })\n});\n```\n\nDefault value can also be a function. This is useful it you want to return\na new object for each attribute.\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  settings: attr({\n    defaultValue() {\n      return {};\n    }\n  })\n});\n```\n\nThe `options` hash is passed as second argument to a transforms'\n`serialize` and `deserialize` method. This allows to configure a\ntransformation and adapt the corresponding value, based on the config:\n\n```app/models/post.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  text: attr('text', {\n    uppercase: true\n  })\n});\n```\n\n```app/transforms/text.js\nimport Transform from '@ember-data/serializer/transform';\n\nexport default Transform.extend({\n  serialize(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  },\n\n  deserialize(value) {\n    return value;\n  }\n})\n```",
			"itemtype": "method",
			"name": "attr",
			"access": "public",
			"tagname": "",
			"static": 1,
			"params": [
				{ "name": "type", "description": "the attribute type", "type": "String|Object" },
				{ "name": "options", "description": "a hash of options", "type": "Object" }
			],
			"return": { "description": "", "type": "Attribute" },
			"class": "@ember-data/model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/belongs-to.js",
			"line": 11,
			"description": "`belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n\n`belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`belongsTo`:\n\n```app/models/user.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  profile: belongsTo('profile')\n});\n```\n\n```app/models/profile.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  user: belongsTo('user')\n});\n```\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the key name.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo()\n});\n```\n\nwill lookup for a Post type.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.\n\n```\nlet post = comment.get('post');\n\n```",
			"itemtype": "method",
			"name": "belongsTo",
			"access": "public",
			"tagname": "",
			"static": 1,
			"params": [
				{
					"name": "modelName",
					"description": "(optional) type of the relationship",
					"type": "String"
				},
				{ "name": "options", "description": "(optional) a hash of options", "type": "Object" }
			],
			"return": { "description": "relationship", "type": "Ember.computed" },
			"class": "@ember-data/model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 86,
			"description": "Register with target handler",
			"itemtype": "method",
			"name": "_registerHandlers",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 99,
			"itemtype": "property",
			"name": "errorsByAttributeName",
			"type": "{MapWithDefault}",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 108,
			"description": "Returns errors for a given attribute\n\n```javascript\nlet user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save().catch(function(){\n  user.get('errors').errorsFor('email'); // returns:\n  // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n});\n```",
			"itemtype": "method",
			"name": "errorsFor",
			"params": [{ "name": "attribute", "description": "", "type": "String" }],
			"return": { "description": "", "type": "Array" },
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 136,
			"description": "An array containing all of the error messages for this\nrecord. This is useful for displaying all errors to the user.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
			"itemtype": "property",
			"name": "messages",
			"type": "{Array}",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 153,
			"itemtype": "property",
			"name": "content",
			"type": "{Array}",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 162,
			"itemtype": "method",
			"name": "unknownProperty",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 174,
			"description": "Total number of errors.",
			"itemtype": "property",
			"name": "length",
			"type": "{Number}",
			"readonly": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 182,
			"itemtype": "property",
			"name": "isEmpty",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 189,
			"description": "Manually adds errors to the record. This will trigger the `becameInvalid` event/ lifecycle method on\n the record and transition the record into an `invalid` state.\n\nExample\n```javascript\n let errors = get(user, 'errors');\n\n // add multiple errors\n errors.add('password', [\n   'Must be at least 12 characters',\n   'Must contain at least one symbol',\n   'Cannot contain your name'\n ]);\n\n errors.errorsFor('password');\n // =>\n // [\n //   { attribute: 'password', message: 'Must be at least 12 characters' },\n //   { attribute: 'password', message: 'Must contain at least one symbol' },\n //   { attribute: 'password', message: 'Cannot contain your name' },\n // ]\n\n // add a single error\n errors.add('username', 'This field is required');\n\n errors.errorsFor('password');\n // =>\n // [\n //   { attribute: 'username', message: 'This field is required' },\n // ]\n```",
			"itemtype": "method",
			"name": "add",
			"params": [
				{
					"name": "attribute",
					"description": "- the property name of an attribute or relationship",
					"type": "String"
				},
				{
					"name": "messages",
					"description": "- an error message or array of error messages for the attribute",
					"type": "String[]|string"
				}
			],
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 238,
			"description": "Adds error messages to a given attribute without sending event.",
			"itemtype": "method",
			"name": "_add",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 253,
			"itemtype": "method",
			"name": "_findOrCreateMessages",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 278,
			"description": "Manually removes all errors for a given member from the record.\n  This will transition the record into a `valid` state, and\n triggers the `becameValid` event and lifecycle method.\n\nExample:\n\n```javascript\n let errors = get('user', errors);\n errors.add('phone', ['error-1', 'error-2']);\n\n errors.errorsFor('phone');\n // =>\n // [\n //   { attribute: 'phone', message: 'error-1' },\n //   { attribute: 'phone', message: 'error-2' },\n // ]\n\n errors.remove('phone');\n\n errors.errorsFor('phone');\n // => undefined\n```",
			"itemtype": "method",
			"name": "remove",
			"params": [
				{
					"name": "member",
					"description": "- the property name of an attribute or relationship",
					"type": "String"
				}
			],
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 319,
			"description": "Removes all error messages from the given attribute without sending event.",
			"itemtype": "method",
			"name": "_remove",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 338,
			"description": "Manually clears all errors for the record.\n  This will transition the record into a `valid` state, and\n  will trigger the `becameValid` event and lifecycle method.\n\n  Example:\n\n```javascript\nlet errors = get('user', errors);\nerrors.add('username', ['error-a']);\nerrors.add('phone', ['error-1', 'error-2']);\n\nerrors.errorsFor('username');\n// =>\n// [\n//   { attribute: 'username', message: 'error-a' },\n// ]\n\nerrors.errorsFor('phone');\n// =>\n// [\n//   { attribute: 'phone', message: 'error-1' },\n//   { attribute: 'phone', message: 'error-2' },\n// ]\n\nerrors.clear();\n\nerrors.errorsFor('username');\n// => undefined\n\nerrors.errorsFor('phone');\n// => undefined\n\nerrors.get('messages')\n// => []\n```",
			"itemtype": "method",
			"name": "remove",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 388,
			"description": "Removes all error messages.\nto the record.",
			"itemtype": "method",
			"name": "_clear",
			"access": "private",
			"tagname": "",
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/errors.js",
			"line": 415,
			"description": "Checks if there are error messages for the given attribute.\n\n```app/routes/user/edit.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    save: function(user) {\n      if (user.get('errors').has('email')) {\n        return alert('Please update your email before attempting to save.');\n      }\n      user.save();\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "has",
			"params": [{ "name": "attribute", "description": "", "type": "String" }],
			"return": {
				"description": "true if there some errors on given attribute",
				"type": "Boolean"
			},
			"class": "Errors",
			"module": "@ember-data/store"
		},
		{
			"file": "../model/addon/-private/has-many.js",
			"line": 10,
			"description": "`hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n`hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a related model.\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`hasMany`:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany('tag')\n});\n```\n\n```app/models/tag.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  posts: hasMany('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the singularized key name.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany()\n});\n```\n\nwill lookup for a Tag type.\n\n#### Explicit Inverses\n\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\n\nHowever, sometimes you may have multiple `belongsTo`/`hasMany` for the\nsame type. You can specify which property on the related model is\nthe inverse using `hasMany`'s `inverse` option:\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  onePost: belongsTo('post'),\n  twoPost: belongsTo('post'),\n  redPost: belongsTo('post'),\n  bluePost: belongsTo('post')\n});\n```\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n```\n\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return a [ManyArray](/ember-data/release/classes/ManyArray) instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.\n\n```\npost.get('comments').forEach((comment) => {\n\n});\n\n```\n\nIf you are using `links` with sync relationships, you have to use\n`ref.reload` to fetch the resources.",
			"itemtype": "method",
			"name": "hasMany",
			"access": "public",
			"tagname": "",
			"static": 1,
			"params": [
				{ "name": "type", "description": "(optional) type of the relationship", "type": "String" },
				{ "name": "options", "description": "(optional) a hash of options", "type": "Object" }
			],
			"return": { "description": "relationship", "type": "Ember.computed" },
			"class": "@ember-data/model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 190,
			"description": "If this property is `true` the record is in the `empty`\nstate. Empty is the first state all records enter after they have\nbeen created. Most records created by the store will quickly\ntransition to the `loading` state if data needs to be fetched from\nthe server or the `created` state if the record is created on the\nclient. A record can also enter the empty state if the adapter is\nunable to locate the record.",
			"itemtype": "property",
			"name": "isEmpty",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 204,
			"description": "If this property is `true` the record is in the `loading` state. A\nrecord enters this state when the store asks the adapter for its\ndata. It remains in this state until the adapter provides the\nrequested data.",
			"itemtype": "property",
			"name": "isLoading",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 215,
			"description": "If this property is `true` the record is in the `loaded` state. A\nrecord enters this state when its data is populated. Most of a\nrecord's lifecycle is spent inside substates of the `loaded`\nstate.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('isLoaded'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('isLoaded'); // true\n});\n```",
			"itemtype": "property",
			"name": "isLoaded",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 237,
			"description": "If this property is `true` the record is in the `dirty` state. The\nrecord has local changes that have not yet been saved by the\nadapter. This includes records that have been created (but not yet\nsaved) or deleted.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('hasDirtyAttributes'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('hasDirtyAttributes'); // false\n  model.set('foo', 'some value');\n  model.get('hasDirtyAttributes'); // true\n});\n```",
			"since": "1.13.0",
			"itemtype": "property",
			"name": "hasDirtyAttributes",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 264,
			"description": "If this property is `true` the record is in the `saving` state. A\nrecord enters the saving state when `save` is called, but the\nadapter has not yet acknowledged that the changes have been\npersisted to the backend.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('isSaving'); // false\nlet promise = record.save();\nrecord.get('isSaving'); // true\npromise.then(function() {\n  record.get('isSaving'); // false\n});\n```",
			"itemtype": "property",
			"name": "isSaving",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 287,
			"description": "If this property is `true` the record is in the `deleted` state\nand has been marked for deletion. When `isDeleted` is true and\n`hasDirtyAttributes` is true, the record is deleted locally but the deletion\nwas not yet persisted. When `isSaving` is true, the change is\nin-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\nchange has persisted.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('isDeleted');    // false\nrecord.deleteRecord();\n\n// Locally deleted\nrecord.get('isDeleted');           // true\nrecord.get('hasDirtyAttributes');  // true\nrecord.get('isSaving');            // false\n\n// Persisting the deletion\nlet promise = record.save();\nrecord.get('isDeleted');    // true\nrecord.get('isSaving');     // true\n\n// Deletion Persisted\npromise.then(function() {\n  record.get('isDeleted');          // true\n  record.get('isSaving');           // false\n  record.get('hasDirtyAttributes'); // false\n});\n```",
			"itemtype": "property",
			"name": "isDeleted",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 325,
			"description": "If this property is `true` the record is in the `new` state. A\nrecord will be in the `new` state when it has been created on the\nclient and the adapter has not yet report that it was successfully\nsaved.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('isNew'); // true\n\nrecord.save().then(function(model) {\n  model.get('isNew'); // false\n});\n```",
			"itemtype": "property",
			"name": "isNew",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 347,
			"description": "If this property is `true` the record is in the `valid` state.\n\nA record will be in the `valid` state when the adapter did not report any\nserver-side validation failures.",
			"itemtype": "property",
			"name": "isValid",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 366,
			"description": "If the record is in the dirty state this property will report what\nkind of change has caused it to move into the dirty\nstate. Possible values are:\n\n- `created` The record has been created by the client and not yet saved to the adapter.\n- `updated` The record has been updated by the client and not yet saved to the adapter.\n- `deleted` The record has been deleted by the client and not yet saved to the adapter.\n\nExample\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('dirtyType'); // 'created'\n```",
			"itemtype": "property",
			"name": "dirtyType",
			"type": "{String}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 388,
			"description": "If `true` the adapter reported that it was unable to save local\nchanges to the backend for any reason other than a server-side\nvalidation error.\n\nExample\n\n```javascript\nrecord.get('isError'); // false\nrecord.set('foo', 'valid value');\nrecord.save().then(null, function() {\n  record.get('isError'); // true\n});\n```",
			"itemtype": "property",
			"name": "isError",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 415,
			"description": "If `true` the store is attempting to reload the record from the adapter.\n\nExample\n\n```javascript\nrecord.get('isReloading'); // false\nrecord.reload();\nrecord.get('isReloading'); // true\n```",
			"itemtype": "property",
			"name": "isReloading",
			"type": "{Boolean}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 432,
			"description": "All ember models have an id property. This is an identifier\nmanaged by an external source. These are always coerced to be\nstrings before being used internally. Note when declaring the\nattributes for a model it is an error to declare an id\nattribute.\n\n```javascript\nlet record = store.createRecord('model');\nrecord.get('id'); // null\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('id'); // '1'\n});\n```",
			"itemtype": "property",
			"name": "id",
			"type": "{String}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 452,
			"itemtype": "property",
			"name": "currentState",
			"access": "private",
			"tagname": "",
			"type": "{Object}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 459,
			"itemtype": "property",
			"name": "_internalModel",
			"access": "private",
			"tagname": "",
			"type": "{Object}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 466,
			"itemtype": "property",
			"name": "recordData",
			"access": "private",
			"tagname": "",
			"type": "undefined (reserved)",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 473,
			"itemtype": "property",
			"name": "store",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 478,
			"description": "When the record is in the `invalid` state this object will contain\nany errors returned by the adapter. When present the errors hash\ncontains keys corresponding to the invalid property names\nand values which are arrays of Javascript objects with two keys:\n\n- `message` A string containing the error message from the backend\n- `attribute` The name of the property associated with this error message\n\n```javascript\nrecord.get('errors.length'); // 0\nrecord.set('foo', 'invalid value');\nrecord.save().catch(function() {\n  record.get('errors').get('foo');\n  // [{message: 'foo should be a number.', attribute: 'foo'}]\n});\n```\n\nThe `errors` property us useful for displaying error messages to\nthe user.\n\n```handlebars\n<label>Username: {{input value=username}} </label>\n{{#each model.errors.username as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n<label>Email: {{input value=email}} </label>\n{{#each model.errors.email as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\n\nYou can also access the special `messages` property on the error\nobject to get an array of all the error strings.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
			"itemtype": "property",
			"name": "errors",
			"type": "{Errors}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 578,
			"description": "This property holds the `AdapterError` object with which\nlast adapter operation was rejected.",
			"itemtype": "property",
			"name": "adapterError",
			"type": "{AdapterError}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 587,
			"description": "Create a JSON representation of the record, using the serialization\nstrategy of the store's adapter.\n\n   `serialize` takes an optional hash as a parameter, currently\nsupported options are:\n\n   - `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
			"itemtype": "method",
			"name": "serialize",
			"params": [{ "name": "options", "description": "", "type": "Object" }],
			"return": {
				"description": "an object whose values are primitive JSON values only",
				"type": "Object"
			},
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 605,
			"description": "Use [JSONSerializer](JSONSerializer.html) to\nget the JSON representation of a record.\n\n`toJSON` takes an optional hash as a parameter, currently\nsupported options are:\n\n- `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
			"itemtype": "method",
			"name": "toJSON",
			"params": [{ "name": "options", "description": "", "type": "Object" }],
			"return": { "description": "A JSON representation of the object.", "type": "Object" },
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 636,
			"description": "Fired when the record is ready to be interacted with,\nthat is either loaded from the server or created locally.",
			"itemtype": "event",
			"name": "ready",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 644,
			"description": "Fired when the record is loaded from the server.",
			"itemtype": "event",
			"name": "didLoad",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 651,
			"description": "Fired when the record is updated.",
			"itemtype": "event",
			"name": "didUpdate",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 658,
			"description": "Fired when a new record is commited to the server.",
			"itemtype": "event",
			"name": "didCreate",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 665,
			"description": "Fired when the record is deleted.",
			"itemtype": "event",
			"name": "didDelete",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 672,
			"description": "Fired when the record becomes invalid.",
			"itemtype": "event",
			"name": "becameInvalid",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 679,
			"description": "Fired when the record enters the error state.",
			"itemtype": "event",
			"name": "becameError",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 686,
			"description": "Fired when the record is rolled back.",
			"itemtype": "event",
			"name": "rolledBack",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 694,
			"itemtype": "method",
			"name": "send",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "name", "description": "", "type": "String" },
				{ "name": "context", "description": "", "type": "Object" }
			],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 704,
			"itemtype": "method",
			"name": "transitionTo",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "name", "description": "", "type": "String" }],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 713,
			"description": "Marks the record as deleted but does not save it. You must call\n`save` afterwards if you want to persist it. You might use this\nmethod if you want to allow the user to still `rollbackAttributes()`\nafter a delete was made.\n\nExample\n\n```app/routes/model/delete.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    softDelete() {\n      this.get('controller.model').deleteRecord();\n    },\n    confirm() {\n      this.get('controller.model').save();\n    },\n    undo() {\n      this.get('controller.model').rollbackAttributes();\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "deleteRecord",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 745,
			"description": "Same as `deleteRecord`, but saves the record immediately.\n\nExample\n\n```app/routes/model/delete.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    delete() {\n      this.get('controller.model').destroyRecord().then(function() {\n        controller.transitionToRoute('model.index');\n      });\n    }\n  }\n});\n```\n\nIf you pass an object on the `adapterOptions` property of the options\nargument it will be passed to your adapter via the snapshot\n\n```js\nrecord.destroyRecord({ adapterOptions: { subscribe: false } });\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  deleteRecord(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```",
			"itemtype": "method",
			"name": "destroyRecord",
			"params": [{ "name": "options", "description": "", "type": "Object" }],
			"return": {
				"description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
				"type": "Promise"
			},
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 794,
			"description": "Unloads the record from the store. This will not send a delete request\nto your server, it just unloads the record from memory.",
			"itemtype": "method",
			"name": "unloadRecord",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 807,
			"itemtype": "method",
			"name": "_notifyProperties",
			"access": "private",
			"tagname": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 824,
			"description": "Returns an object, whose keys are changed properties, and value is\nan [oldProp, newProp] array.\n\nThe array represents the diff of the canonical state with the local state\nof the model. Note: if the model is created locally, the canonical state is\nempty since the adapter hasn't acknowledged the attributes yet:\n\nExample\n\n```app/models/mascot.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  name: attr('string'),\n  isAdmin: attr('boolean', {\n    defaultValue: false\n  })\n});\n```\n\n```javascript\nlet mascot = store.createRecord('mascot');\n\nmascot.changedAttributes(); // {}\n\nmascot.set('name', 'Tomster');\nmascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n\nmascot.set('isAdmin', true);\nmascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n\nmascot.save().then(function() {\n  mascot.changedAttributes(); // {}\n\n  mascot.set('isAdmin', false);\n  mascot.changedAttributes(); // { isAdmin: [true, false] }\n});\n```",
			"itemtype": "method",
			"name": "changedAttributes",
			"return": {
				"description": "an object, whose keys are changed properties,\n  and value is an [oldProp, newProp] array.",
				"type": "Object"
			},
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 872,
			"description": "If the model `hasDirtyAttributes` this function will discard any unsaved\nchanges. If the model `isNew` it will be removed from the store.\n\nExample\n\n```javascript\nrecord.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.rollbackAttributes();\nrecord.get('name'); // 'Untitled Document'\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "rollbackAttributes",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 914,
			"description": "Save the record and persist any changes to the record to an\nexternal source via the adapter.\n\nExample\n\n```javascript\nrecord.set('name', 'Tomster');\nrecord.save().then(function() {\n  // Success callback\n}, function() {\n  // Error callback\n});\n```\n\n   If you pass an object using the `adapterOptions` property of the options\n   argument it will be passed to your adapter via the snapshot.\n\n```js\nrecord.save({ adapterOptions: { subscribe: false } });\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  updateRecord(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```",
			"itemtype": "method",
			"name": "save",
			"params": [{ "name": "options", "description": "", "type": "Object" }],
			"return": {
				"description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
				"type": "Promise"
			},
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 960,
			"description": "Reload the record from the adapter.\n\nThis will only work if the record has already finished loading.\n\nExample\n\n```app/routes/model/view.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    reload() {\n      this.controller.get('model').reload().then(function(model) {\n        // do something with the reloaded model\n      });\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "reload",
			"params": [
				{
					"name": "options",
					"description": "optional, may include `adapterOptions` hash which will be passed to adapter request",
					"type": "Object"
				}
			],
			"return": {
				"description": "a promise that will be resolved with the record when the\nadapter returns successfully or rejected if the adapter returns\nwith an error.",
				"type": "Promise"
			},
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1002,
			"description": "Override the default event firing from Ember.Evented to\nalso call methods with the given name.",
			"itemtype": "method",
			"name": "trigger",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "name", "description": "", "type": "String" }],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1036,
			"description": "Get the reference for the specified belongsTo relationship.\n\nExample\n\n```app/models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  user: belongsTo({ async: true })\n});\n```\n\n```javascript\nlet blog = store.push({\n  data: {\n    type: 'blog',\n    id: 1,\n    relationships: {\n      user: {\n        data: { type: 'user', id: 1 }\n      }\n    }\n  }\n});\nlet userRef = blog.belongsTo('user');\n\n// check if the user relationship is loaded\nlet isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nlet user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n  let id = userRef.id();\n} else if (userRef.remoteType() === \"link\") {\n  let link = userRef.link();\n}\n\n// load user (via store.findRecord or store.findBelongsTo)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({\n  type: 'user',\n  id: 1,\n  attributes: {\n    username: \"@user\"\n  }\n}).then(function(user) {\n  userRef.value() === user;\n});\n```",
			"itemtype": "method",
			"name": "belongsTo",
			"params": [{ "name": "name", "description": "of the relationship", "type": "String" }],
			"since": "2.5.0",
			"return": { "description": "reference for this relationship", "type": "BelongsToReference" },
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1103,
			"description": "Get the reference for the specified hasMany relationship.\n\nExample\n\n```app/models/blog.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n\nlet blog = store.push({\n  data: {\n    type: 'blog',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [\n          { type: 'comment', id: 1 },\n          { type: 'comment', id: 2 }\n        ]\n      }\n    }\n  }\n});\nlet commentsRef = blog.hasMany('comments');\n\n// check if the comments are loaded already\nlet isLoaded = commentsRef.value() !== null;\n\n// get the records of the reference (null if not yet available)\nlet comments = commentsRef.value();\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n\n// load comments (via store.findMany or store.findHasMany)\ncommentsRef.load().then(...)\n\n// or trigger a reload\ncommentsRef.reload().then(...)\n\n// provide data for reference\ncommentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {\n  commentsRef.value() === comments;\n});\n```",
			"itemtype": "method",
			"name": "hasMany",
			"params": [{ "name": "name", "description": "of the relationship", "type": "String" }],
			"since": "2.5.0",
			"return": { "description": "reference for this relationship", "type": "HasManyReference" },
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1165,
			"description": "Provides info about the model for debugging purposes\nby grouping the properties into more semantic groups.\n\nMeant to be used by debugging tools such as the Chrome Ember Extension.\n\n- Groups all attributes in \"Attributes\" group.\n- Groups all belongsTo relationships in \"Belongs To\" group.\n- Groups all hasMany relationships in \"Has Many\" group.\n- Groups all flags in \"Flags\" group.\n- Flags relationship CPs as expensive properties.",
			"itemtype": "method",
			"name": "_debugInfo",
			"access": "private",
			"tagname": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1230,
			"description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.\n\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, descriptor);\n```\n\n- `name` the name of the current property in the iteration\n- `descriptor` the meta object that describes this relationship\n\nThe relationship descriptor argument is an object with the following properties.\n\n- **key** <span class=\"type\">String</span> the name of this relationship on the Model\n- **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n- **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n- **parentType** <span class=\"type\">Model</span> the type of the Model that owns this relationship\n- **type** <span class=\"type\">String</span> the type name of the related Model\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n serialize: function(record, options) {\n   let json = {};\n\n   record.eachRelationship(function(name, descriptor) {\n     if (descriptor.kind === 'hasMany') {\n       let serializedHasManyName = name.toUpperCase() + '_IDS';\n       json[serializedHasManyName] = record.get(name).mapBy('id');\n     }\n   });\n\n   return json;\n }\n  });\n```",
			"itemtype": "method",
			"name": "eachRelationship",
			"params": [
				{ "name": "callback", "description": "the callback to invoke", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Any"
				}
			],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1306,
			"itemtype": "property",
			"name": "data",
			"access": "private",
			"tagname": "",
			"deprecated": true,
			"type": "{Object}",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1446,
			"description": "Create should only ever be called by the store. To create an instance of a\n`Model` in a dirty state use `store.createRecord`.\n\n   To create instances of `Model` in a clean state, use `store.push`",
			"itemtype": "method",
			"name": "create",
			"access": "private",
			"tagname": "",
			"static": 1,
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1457,
			"description": "Represents the model's class name as a string. This can be used to look up the model's class name through\n`Store`'s modelFor method.\n\n`modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.\nFor example:\n\n```javascript\nstore.modelFor('post').modelName; // 'post'\nstore.modelFor('blog-post').modelName; // 'blog-post'\n```\n\nThe most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload\nkeys to underscore (instead of dasherized), you might use the following code:\n\n```javascript\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { underscore } from '@ember/string';\n\nexport default const PostSerializer = RESTSerializer.extend({\n  payloadKeyFromModelName(modelName) {\n    return underscore(modelName);\n  }\n});\n```",
			"itemtype": "property",
			"name": "modelName",
			"type": "String",
			"readonly": "",
			"static": 1,
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1506,
			"description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   comments: hasMany('comment')\n });\n```\n\nCalling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.",
			"itemtype": "method",
			"name": "typeForRelationship",
			"static": 1,
			"params": [
				{ "name": "name", "description": "the name of the relationship", "type": "String" },
				{ "name": "store", "description": "an instance of Store", "type": "Store" }
			],
			"return": { "description": "the type of the relationship, or undefined", "type": "Model" },
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1536,
			"description": "Find the relationship which is the inverse of the one asked for.\n\nFor example, if you define models like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   comments: hasMany('message')\n });\n```\n\n```app/models/message.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   owner: belongsTo('post')\n });\n```\n\n``` js\nstore.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\nstore.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n```",
			"itemtype": "method",
			"name": "inverseFor",
			"static": 1,
			"params": [
				{ "name": "name", "description": "the name of the relationship", "type": "String" },
				{ "name": "store", "description": "", "type": "Store" }
			],
			"return": { "description": "the inverse relationship, or null", "type": "Object" },
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1681,
			"description": "The model's relationships as a map, keyed on the type of the\nrelationship. The value of each entry is an array containing a descriptor\nfor each relationship with that type, describing the name of the relationship\nas well as the type.\n\nFor example, given the following model definition:\n\n```app/models/blog.js\nimport Model, { belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   users: hasMany('user'),\n   owner: belongsTo('user'),\n   posts: hasMany('post')\n });\n```\n\nThis computed property would return a map describing these\nrelationships, like this:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\nimport User from 'app/models/user';\nimport Post from 'app/models/post';\n\nlet relationships = Ember.get(Blog, 'relationships');\nrelationships.get('user');\n//=> [ { name: 'users', kind: 'hasMany' },\n//     { name: 'owner', kind: 'belongsTo' } ]\nrelationships.get('post');\n//=> [ { name: 'posts', kind: 'hasMany' } ]\n```",
			"itemtype": "property",
			"name": "relationships",
			"static": 1,
			"type": "Map",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1724,
			"description": "A hash containing lists of the model's relationships, grouped\nby the relationship kind. For example, given a model with this\ndefinition:\n\n```app/models/blog.js\nimport Model, { belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   users: hasMany('user'),\n   owner: belongsTo('user'),\n\n   posts: hasMany('post')\n });\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nlet relationshipNames = Ember.get(Blog, 'relationshipNames');\nrelationshipNames.hasMany;\n//=> ['users', 'posts']\nrelationshipNames.belongsTo;\n//=> ['owner']\n```",
			"itemtype": "property",
			"name": "relationshipNames",
			"static": 1,
			"type": "Object",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1773,
			"description": "An array of types directly related to a model. Each type will be\nincluded once, regardless of the number of relationships it has with\nthe model.\n\nFor example, given a model with this definition:\n\n```app/models/blog.js\nimport Model, { belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   users: hasMany('user'),\n   owner: belongsTo('user'),\n\n   posts: hasMany('post')\n });\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nlet relatedTypes = Ember.get(Blog, 'relatedTypes');\n//=> [ User, Post ]\n```",
			"itemtype": "property",
			"name": "relatedTypes",
			"static": 1,
			"type": "Ember.Array",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1808,
			"description": "A map whose keys are the relationships of a model and whose values are\nrelationship descriptors.\n\nFor example, given a model with this\ndefinition:\n\n```app/models/blog.js\nimport Model, { belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   users: hasMany('user'),\n   owner: belongsTo('user'),\n\n   posts: hasMany('post')\n });\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nlet relationshipsByName = Ember.get(Blog, 'relationshipsByName');\nrelationshipsByName.get('users');\n//=> { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }\nrelationshipsByName.get('owner');\n//=> { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }\n```",
			"itemtype": "property",
			"name": "relationshipsByName",
			"static": 1,
			"type": "Map",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1848,
			"description": "A map whose keys are the fields of the model and whose values are strings\ndescribing the kind of the field. A model's fields are the union of all of its\nattributes and relationships.\n\nFor example:\n\n```app/models/blog.js\nimport Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   users: hasMany('user'),\n   owner: belongsTo('user'),\n\n   posts: hasMany('post'),\n\n   title: attr('string')\n });\n```\n\n```js\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nlet fields = Ember.get(Blog, 'fields');\nfields.forEach(function(kind, field) {\n   console.log(field, kind);\n });\n\n// prints:\n// users, hasMany\n// owner, belongsTo\n// posts, hasMany\n// title, attribute\n```",
			"itemtype": "property",
			"name": "fields",
			"static": 1,
			"type": "Map",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1903,
			"description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
			"itemtype": "method",
			"name": "eachRelationship",
			"static": 1,
			"params": [
				{ "name": "callback", "description": "the callback to invoke", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Any"
				}
			],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1919,
			"description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
			"itemtype": "method",
			"name": "eachRelatedType",
			"static": 1,
			"params": [
				{ "name": "callback", "description": "the callback to invoke", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Any"
				}
			],
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 1960,
			"description": "A map whose keys are the attributes of the model (properties\ndescribed by attr) and whose values are the meta object for the\nproperty.\n\nExample\n\n```app/models/person.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n   firstName: attr('string'),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n```\n\n```javascript\nimport Ember from 'ember';\nimport Person from 'app/models/person';\n\nlet attributes = Ember.get(Person, 'attributes')\n\nattributes.forEach(function(meta, name) {\n   console.log(name, meta);\n });\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
			"itemtype": "property",
			"name": "attributes",
			"static": 1,
			"type": "{Map}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 2017,
			"description": "A map whose keys are the attributes of the model (properties\ndescribed by attr) and whose values are type of transformation\napplied to each attribute. This map does not include any\nattributes that do not have an transformation type.\n\nExample\n\n```app/models/person.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n   firstName: attr(),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n```\n\n```javascript\nimport Ember from 'ember';\nimport Person from 'app/models/person';\n\nlet transformedAttributes = Ember.get(Person, 'transformedAttributes')\n\ntransformedAttributes.forEach(function(field, type) {\n   console.log(field, type);\n });\n\n// prints:\n// lastName string\n// birthday date\n```",
			"itemtype": "property",
			"name": "transformedAttributes",
			"static": 1,
			"type": "{Map}",
			"readonly": "",
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 2067,
			"description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr('string'),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachAttribute(function(name, meta) {\n   console.log(name, meta);\n });\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
			"itemtype": "method",
			"name": "eachAttribute",
			"params": [
				{ "name": "callback", "description": "The callback to execute", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Object",
					"optional": true
				}
			],
			"static": 1,
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 2116,
			"description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\napplied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr(),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachTransformedAttribute(function(name, type) {\n   console.log(name, type);\n });\n\n// prints:\n// lastName string\n// birthday date\n```",
			"itemtype": "method",
			"name": "eachTransformedAttribute",
			"params": [
				{ "name": "callback", "description": "The callback to execute", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Object",
					"optional": true
				}
			],
			"static": 1,
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../model/addon/-private/model.js",
			"line": 2166,
			"description": "Returns the name of the model class.",
			"itemtype": "method",
			"name": "toString",
			"static": 1,
			"class": "Model",
			"module": "@ember-data/model"
		},
		{
			"file": "../record-data/addon/-private/record-data.ts",
			"line": 51,
			"deprecated": true,
			"class": "BooleanTransform",
			"module": "@ember-data/record-data"
		},
		{
			"file": "../record-data/addon/-private/record-data.ts",
			"line": 481,
			"description": "Computes the set of internal models reachable from `this` across exactly one\nrelationship.",
			"return": {
				"description": "An array containing the internal models that `this` belongs\nto or has many.",
				"type": "Array"
			},
			"class": "BooleanTransform",
			"module": "@ember-data/record-data"
		},
		{
			"file": "../record-data/addon/-private/record-data.ts",
			"line": 500,
			"description": "Computes the set of internal models reachable from this internal model.\n\nReachability is determined over the relationship graph (ie a graph where\nnodes are internal models and edges are belongs to or has many\nrelationships).",
			"return": {
				"description": "An array including `this` and all internal models reachable\nfrom `this`.",
				"type": "Array"
			},
			"class": "BooleanTransform",
			"module": "@ember-data/record-data"
		},
		{
			"file": "../record-data/addon/-private/record-data.ts",
			"line": 629,
			"description": "Receives options passed to `store.createRecord` and is given the opportunity\nto handle them.\n\nThe return value is an object of options to pass to `Record.create()`",
			"params": [{ "name": "options", "description": "" }],
			"access": "private",
			"tagname": "",
			"class": "BooleanTransform",
			"module": "@ember-data/record-data"
		},
		{
			"file": "../serializer/addon/-private/transforms/transform.js",
			"line": 78,
			"description": "When given a deserialized value from a record attribute this\nmethod must return the serialized value.\n\nExample\n\n```javascript\nimport { isEmpty } from '@ember/utils';\n\nserialize(deserialized, options) {\n  return isEmpty(deserialized) ? null : Number(deserialized);\n}\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [
				{ "name": "deserialized", "description": "The deserialized value" },
				{ "name": "options", "description": "hash of options passed to `attr`" }
			],
			"return": { "description": "The serialized value" },
			"class": "Transform",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/transforms/transform.js",
			"line": 99,
			"description": "When given a serialized value from a JSON object this method must\nreturn the deserialized value for the record attribute.\n\nExample\n\n```javascript\ndeserialize(serialized, options) {\n  return empty(serialized) ? null : Number(serialized);\n}\n```",
			"itemtype": "method",
			"name": "deserialize",
			"params": [
				{ "name": "serialized", "description": "The serialized value" },
				{ "name": "options", "description": "hash of options passed to `attr`" }
			],
			"return": { "description": "The deserialized value" },
			"class": "Transform",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 104,
			"description": "Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered\n\nA payload with an attr configured for embedded records needs to be extracted:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```",
			"itemtype": "method",
			"name": "normalize",
			"params": [
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "hash", "description": "to be normalized", "type": "Object" },
				{ "name": "prop", "description": "the hash has been referenced by", "type": "String" }
			],
			"return": { "description": "the normalized hash", "type": "Object" },
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 147,
			"description": "Serialize `belongsTo` relationship when it is configured as an embedded object.\n\nThis example of an author model belongs to a post model:\n\n```js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nPost = Model.extend({\n  title:    attr('string'),\n  body:     attr('string'),\n  author:   belongsTo('author')\n});\n\nAuthor = Model.extend({\n  name:     attr('string'),\n  post:     belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded author\n\n```app/serializers/post.js\nimport RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend(EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' }\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"author\": {\n      \"id\": \"2\"\n      \"name\": \"dhh\"\n    }\n  }\n}\n```",
			"itemtype": "method",
			"name": "serializeBelongsTo",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 248,
			"description": "Serializes `hasMany` relationships when it is configured as embedded objects.\n\nThis example of a post model has many comments:\n\n```js\nimport Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\nPost = Model.extend({\n  title:    attr('string'),\n  body:     attr('string'),\n  comments: hasMany('comment')\n});\n\nComment = Model.extend({\n  body:     attr('string'),\n  post:     belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded comments\n\n```app/serializers/post.js\nimport RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend(EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { embedded: 'always' }\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```\n\nThe attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.\nWhen extracting the only option is `records`.\n\nSo `{ embedded: 'always' }` is shorthand for:\n`{ serialize: 'records', deserialize: 'records' }`\n\nTo embed the `ids` for a related object (using a hasMany relationship):\n\n```app/serializers/post.js\nimport RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend(EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { serialize: 'ids', deserialize: 'records' }\n  }\n})\n```\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [\"1\", \"2\"]\n  }\n}\n```\n\nTo embed the relationship as a collection of objects with `id` and `type` keys, set\n`ids-and-types` for the related object.\n\nThis is particularly useful for polymorphic relationships where records don't share\nthe same table and the `id` is not enough information.\n\nFor example having a user that has many pets:\n\n```js\nUser = Model.extend({\n  name: attr('string'),\n  pets: hasMany('pet', { polymorphic: true })\n});\n\nPet = Model.extend({\n  name: attr('string'),\n});\n\nCat = Pet.extend({\n  // ...\n});\n\nParrot = Pet.extend({\n  // ...\n});\n```\n\n```app/serializers/user.js\nimport RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend(EmbeddedRecordsMixin, {\n  attrs: {\n    pets: { serialize: 'ids-and-types', deserialize: 'records' }\n  }\n});\n```\n\n```js\n{\n  \"user\": {\n    \"id\": \"1\"\n    \"name\": \"Bertin Osborne\",\n    \"pets\": [\n      { \"id\": \"1\", \"type\": \"Cat\" },\n      { \"id\": \"1\", \"type\": \"Parrot\"}\n    ]\n  }\n}\n```",
			"itemtype": "method",
			"name": "serializeHasMany",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 462,
			"description": "When serializing an embedded record, modify the property (in the `JSON` payload)\nthat refers to the parent record (foreign key for the relationship).\n\nSerializing a `belongsTo` relationship removes the property that refers to the\nparent record\n\nSerializing a `hasMany` relationship does not remove the property that refers to\nthe parent record.",
			"itemtype": "method",
			"name": "removeEmbeddedForeignKey",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "embeddedSnapshot", "description": "", "type": "Snapshot" },
				{ "name": "relationship", "description": "", "type": "Object" },
				{ "name": "json", "description": "", "type": "Object" }
			],
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 539,
			"itemtype": "method",
			"name": "_extractEmbeddedRecords",
			"access": "private",
			"tagname": "",
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 557,
			"itemtype": "method",
			"name": "_extractEmbeddedHasMany",
			"access": "private",
			"tagname": "",
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 586,
			"itemtype": "method",
			"name": "_extractEmbeddedBelongsTo",
			"access": "private",
			"tagname": "",
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/-private/embedded-records-mixin.js",
			"line": 609,
			"itemtype": "method",
			"name": "_normalizeEmbeddedRelationship",
			"access": "private",
			"tagname": "",
			"class": "EmbeddedRecordsMixin",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/index.js",
			"line": 27,
			"description": "The `store` property is the application's `store` that contains\nall records. It can be used to look up serializers for other model\ntypes that may be nested inside the payload response.\n\nExample:\n\n```js\nSerializer.extend({\n  extractRelationship(relationshipModelName, relationshipHash) {\n    var modelClass = this.store.modelFor(relationshipModelName);\n    var relationshipSerializer = this.store.serializerFor(relationshipModelName);\n    return relationshipSerializer.normalize(modelClass, relationshipHash);\n  }\n});\n```",
			"itemtype": "property",
			"name": "store",
			"type": "{Store}",
			"access": "public",
			"tagname": "",
			"class": "Serializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/index.js",
			"line": 49,
			"description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure\n\nExample:\n\n```js\nSerializer.extend({\n  normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n    if (requestType === 'findRecord') {\n      return this.normalize(primaryModelClass, payload);\n    } else {\n      return payload.reduce(function(documentHash, item) {\n        let { data, included } = this.normalize(primaryModelClass, item);\n        documentHash.included.push(...included);\n        documentHash.data.push(data);\n        return documentHash;\n      }, { data: [], included: [] })\n    }\n  }\n});\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "Serializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/index.js",
			"line": 85,
			"description": "The `serialize` method is used when a record is saved in order to convert\nthe record into the form that your external data source expects.\n\n`serialize` takes an optional `options` hash with a single option:\n\n- `includeId`: If this is `true`, `serialize` should include the ID\n  in the serialized object it builds.\n\nExample:\n\n```js\nSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      id: snapshot.id\n    };\n\n    snapshot.eachAttribute((key, attribute) => {\n      json[key] = snapshot.attr(key);\n    });\n\n    snapshot.eachRelationship((key, relationship) => {\n      if (relationship.kind === 'belongsTo') {\n        json[key] = snapshot.belongsTo(key, { id: true });\n      } else if (relationship.kind === 'hasMany') {\n        json[key] = snapshot.hasMany(key, { ids: true });\n      }\n    });\n\n    return json;\n  },\n});\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object", "optional": true }
			],
			"return": { "description": "", "type": "Object" },
			"class": "Serializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/index.js",
			"line": 127,
			"description": "The `normalize` method is used to convert a payload received from your\nexternal data source into the normalized form `store.push()` expects. You\nshould override this method, munge the hash and return the normalized\npayload.\n\nExample:\n\n```js\nSerializer.extend({\n  normalize(modelClass, resourceHash) {\n    var data = {\n      id:            resourceHash.id,\n      type:          modelClass.modelName,\n      attributes:    resourceHash\n    };\n    return { data: data };\n  }\n})\n```",
			"itemtype": "method",
			"name": "normalize",
			"params": [
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "hash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "Serializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 132,
			"itemtype": "method",
			"name": "_normalizeDocumentHelper",
			"params": [{ "name": "documentHash", "description": "", "type": "Object" }],
			"return": { "description": "", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 169,
			"itemtype": "method",
			"name": "_normalizeRelationshipDataHelper",
			"params": [{ "name": "relationshipDataHash", "description": "", "type": "Object" }],
			"return": { "description": "", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 181,
			"itemtype": "method",
			"name": "_normalizeResourceHelper",
			"params": [{ "name": "resourceHash", "description": "", "type": "Object" }],
			"return": { "description": "", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 210,
			"itemtype": "method",
			"name": "pushPayload",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 220,
			"itemtype": "method",
			"name": "_normalizeResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" },
				{ "name": "isSingle", "description": "", "type": "Boolean" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 273,
			"description": "Returns a relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
			"itemtype": "method",
			"name": "extractRelationship",
			"params": [{ "name": "relationshipHash", "description": "", "type": "Object" }],
			"return": { "description": "", "type": "Object" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 301,
			"description": "Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
			"itemtype": "method",
			"name": "extractRelationships",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Object" },
				{ "name": "resourceHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 338,
			"itemtype": "method",
			"name": "_extractType",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Model" },
				{ "name": "resourceHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "String" },
			"access": "private",
			"tagname": "",
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 349,
			"description": "Dasherizes and singularizes the model name in the payload to match\nthe format Ember Data uses internally for the model name.\n\nFor example the key `posts` would be converted to `post` and the\nkey `studentAssesments` would be converted to `student-assesment`.",
			"itemtype": "method",
			"name": "modelNameFromPayloadKey",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "the model's modelName", "type": "String" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 365,
			"description": "Converts the model name to a pluralized version of the model name.\n\nFor example `post` would be converted to `posts` and\n`student-assesment` would be converted to `student-assesments`.",
			"itemtype": "method",
			"name": "payloadKeyFromModelName",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "", "type": "String" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 401,
			"description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\nBy default `JSONAPISerializer` follows the format used on the examples of\nhttp://jsonapi.org/format and uses dashes as the word separator in the JSON\nattribute keys.\n\nThis behaviour can be easily customized by extending this method.\n\nExample\n\n```app/serializers/application.js\nimport JSONAPISerializer from '@ember-data/serializer/json-api';\nimport { dasherize } from '@ember/string';\n\nexport default JSONAPISerializer.extend({\n  keyForAttribute(attr, method) {\n    return dasherize(attr).toUpperCase();\n  }\n});\n```",
			"itemtype": "method",
			"name": "keyForAttribute",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "method", "description": "", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json-api.js",
			"line": 432,
			"description": "`keyForRelationship` can be used to define a custom key when\nserializing and deserializing relationship properties.\nBy default `JSONAPISerializer` follows the format used on the examples of\nhttp://jsonapi.org/format and uses dashes as word separators in\nrelationship properties.\n\nThis behaviour can be easily customized by extending this method.\n\nExample\n\n ```app/serializers/post.js\n import JSONAPISerializer from '@ember-data/serializer/json-api';\n import { underscore } from '@ember/string';\n\n export default JSONAPISerializer.extend({\n   keyForRelationship(key, relationship, method) {\n     return underscore(key);\n   }\n });\n ```",
			"itemtype": "method",
			"name": "keyForRelationship",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "typeClass", "description": "", "type": "String" },
				{ "name": "method", "description": "", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "JSONAPISerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 84,
			"description": "The `primaryKey` is used when serializing and deserializing\ndata. Ember Data always uses the `id` property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\n`primaryKey` property to match the `primaryKey` of your external\nstore.\n\nExample\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  primaryKey: '_id'\n});\n```",
			"itemtype": "property",
			"name": "primaryKey",
			"type": "{String}",
			"default": "'id'",
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 108,
			"description": "The `attrs` object can be used to declare a simple mapping between\nproperty names on `Model` records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty `key` can also be used to designate the attribute's key on\nthe response payload.\n\nExample\n\n```app/models/person.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  occupation: attr('string'),\n  admin: attr('boolean')\n});\n```\n\n```app/serializers/person.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: { key: 'career' }\n  }\n});\n```\n\nYou can also remove attributes and relationships by setting the `serialize`\nkey to `false` in your mapping object.\n\nExample\n\n```app/serializers/person.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  attrs: {\n    admin: { serialize: false },\n    occupation: { key: 'career' }\n  }\n});\n```\n\nWhen serialized:\n\n```javascript\n{\n  \"firstName\": \"Harry\",\n  \"lastName\": \"Houdini\",\n  \"career\": \"magician\"\n}\n```\n\nNote that the `admin` is now not included in the payload.\n\nSetting `serialize` to `true` enforces serialization for hasMany\nrelationships even if it's neither a many-to-many nor many-to-none\nrelationship.",
			"itemtype": "property",
			"name": "attrs",
			"type": "{Object}",
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 176,
			"description": "Given a subclass of `Model` and a JSON object this method will\niterate through each attribute of the `Model` and invoke the\n`Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.",
			"itemtype": "method",
			"name": "applyTransforms",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "data", "description": "The data to transform", "type": "Object" }
			],
			"return": { "description": "data The transformed data object", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 205,
			"description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure\n\nThis method delegates to a more specific normalize method based on\nthe `requestType`.\n\nTo override this method with a custom one, make sure to call\n`return this._super(store, primaryModelClass, payload, id, requestType)` with your\npre-processed data.\n\nHere's an example of using `normalizeResponse` manually:\n\n```javascript\nsocket.on('message', function(message) {\n  var data = message.data;\n  var modelClass = store.modelFor(data.modelName);\n  var serializer = store.serializerFor(data.modelName);\n  var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n\n  store.push(normalized);\n});\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 265,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeFindRecordResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 279,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeQueryRecordResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 293,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeFindAllResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 307,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeFindBelongsToResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 321,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeFindHasManyResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 335,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeFindManyResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 349,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeQueryResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 363,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeCreateRecordResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 377,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeDeleteRecordResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 391,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeUpdateRecordResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 405,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeSaveResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 419,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeSingleResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 433,
			"since": "1.13.0",
			"itemtype": "method",
			"name": "normalizeArrayResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 447,
			"itemtype": "method",
			"name": "_normalizeResponse",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "primaryModelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "String|Number" },
				{ "name": "requestType", "description": "", "type": "String" },
				{ "name": "isSingle", "description": "", "type": "Boolean" }
			],
			"return": { "description": "JSON-API Document", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 496,
			"description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\n\nExample\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport { underscore } from '@ember/string';\nimport { get } from '@ember/object';\n\nexport default JSONSerializer.extend({\n  normalize(typeClass, hash) {\n    var fields = get(typeClass, 'fields');\n\n    fields.forEach(function(type, field) {\n      var payloadField = underscore(field);\n      if (field === payloadField) { return; }\n\n      hash[field] = hash[payloadField];\n      delete hash[payloadField];\n    });\n\n    return this._super.apply(this, arguments);\n  }\n});\n```",
			"itemtype": "method",
			"name": "normalize",
			"params": [
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "hash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 559,
			"description": "Returns the resource's ID.",
			"itemtype": "method",
			"name": "extractId",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Object" },
				{ "name": "resourceHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 573,
			"description": "Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n\nhttp://jsonapi.org/format/#document-resource-object-attributes",
			"itemtype": "method",
			"name": "extractAttributes",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Object" },
				{ "name": "resourceHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 597,
			"description": "Returns a relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
			"itemtype": "method",
			"name": "extractRelationship",
			"params": [
				{ "name": "relationshipModelName", "description": "", "type": "Object" },
				{ "name": "relationshipHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 631,
			"description": "Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships\n\n`relationshipOptions` is a hash which contains more information about the\npolymorphic relationship which should be extracted:\n  - `resourceHash` complete hash of the resource the relationship should be\n    extracted from\n  - `relationshipKey` key under which the value for the relationship is\n    extracted from the resourceHash\n  - `relationshipMeta` meta information about the relationship",
			"itemtype": "method",
			"name": "extractPolymorphicRelationship",
			"params": [
				{ "name": "relationshipModelName", "description": "", "type": "Object" },
				{ "name": "relationshipHash", "description": "", "type": "Object" },
				{ "name": "relationshipOptions", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 654,
			"description": "Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
			"itemtype": "method",
			"name": "extractRelationships",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Object" },
				{ "name": "resourceHash", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 725,
			"itemtype": "method",
			"name": "modelNameFromPayloadKey",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "the model's modelName", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 735,
			"itemtype": "method",
			"name": "normalizeRelationships",
			"access": "private",
			"tagname": "",
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 758,
			"itemtype": "method",
			"name": "normalizeUsingDeclaredMapping",
			"access": "private",
			"tagname": "",
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 791,
			"description": "Looks up the property key that was set by the custom `attr` mapping\npassed to the serializer.",
			"itemtype": "method",
			"name": "_getMappedKey",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "key", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 830,
			"description": "Check attrs.key.serialize property to inform if the `key`\ncan be serialized",
			"itemtype": "method",
			"name": "_canSerialize",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "true if the key can be serialized", "type": "Boolean" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 845,
			"description": "When attrs.key.serialize is set to true then\nit takes priority over the other checks and the related\nattribute/relationship will be serialized",
			"itemtype": "method",
			"name": "_mustSerialize",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "true if the key must be serialized", "type": "Boolean" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 861,
			"description": "Check if the given hasMany relationship should be serialized\n\nBy default only many-to-many and many-to-none relationships are serialized.\nThis could be configured per relationship by Serializer's `attrs` object.",
			"itemtype": "method",
			"name": "shouldSerializeHasMany",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "relationshipType", "description": "", "type": "String" }
			],
			"return": {
				"description": "true if the hasMany relationship should be serialized",
				"type": "Boolean"
			},
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 882,
			"description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```app/models/comment.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  title: attr(),\n  body: attr(),\n\n  author: belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```javascript\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    };\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport { singularize } from 'ember-inflector';\n\nexport default JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    });\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(singularize(name)) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```javascript\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = this._super(...arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "json", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1059,
			"description": "You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\nThe hash property should be modified by reference.\n\nFor example, your server may expect underscored root objects.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { decamelize } from '@ember/string';\n\nexport default RESTSerializer.extend({\n  serializeIntoHash(data, type, snapshot, options) {\n    var root = decamelize(type.modelName);\n    data[root] = this.serialize(snapshot, options);\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializeIntoHash",
			"params": [
				{ "name": "hash", "description": "", "type": "Object" },
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1091,
			"description": "`serializeAttribute` can be used to customize how `attr`\nproperties are serialized\n\nFor example if you wanted to ensure all your attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  serializeAttribute(snapshot, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    this._super(snapshot, json.attributes, key, attributes);\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializeAttribute",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "attribute", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1137,
			"description": "`serializeBelongsTo` can be used to customize how `belongsTo`\nproperties are serialized.\n\nExample\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport { isNone } from '@ember/utils';\n\nexport default JSONSerializer.extend({\n  serializeBelongsTo(snapshot, json, relationship) {\n    var key = relationship.key;\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n\n    json[key] = isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializeBelongsTo",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1190,
			"description": "`serializeHasMany` can be used to customize how `hasMany`\nproperties are serialized.\n\nExample\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport DS from 'ember-data';\n\nexport default JSONSerializer.extend({\n  serializeHasMany(snapshot, json, relationship) {\n    var key = relationship.key;\n    if (key === 'comments') {\n      return;\n    } else {\n      this._super(...arguments);\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializeHasMany",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1236,
			"description": "You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n`{ polymorphic: true }` is pass as the second argument to the\n`belongsTo` function.\n\nExample\n\n```app/serializers/comment.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport { isNone } from '@ember/utils';\n\nexport default JSONSerializer.extend({\n  serializePolymorphicType(snapshot, json, relationship) {\n    var key = relationship.key;\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForAttribute ? this.keyForAttribute(key, 'serialize') : key;\n\n    if (isNone(belongsTo)) {\n      json[key + '_type'] = null;\n    } else {\n      json[key + '_type'] = belongsTo.modelName;\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializePolymorphicType",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1271,
			"description": "`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\n\nExample\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer.extend({\n  extractMeta(store, typeClass, payload) {\n    if (payload && payload.hasOwnProperty('_pagination')) {\n      let meta = payload._pagination;\n      delete payload._pagination;\n      return meta;\n    }\n  }\n});\n```",
			"itemtype": "method",
			"name": "extractMeta",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "modelClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1305,
			"description": "`extractErrors` is used to extract model errors when a call\nto `Model#save` fails with an `InvalidError`. By default\nEmber Data expects error information to be located on the `errors`\nproperty of the payload object.\n\nThis serializer expects this `errors` object to be an Array similar\nto the following, compliant with the https://jsonapi.org/format/#errors specification:\n\n```js\n{\n  \"errors\": [\n    {\n      \"detail\": \"This username is already taken!\",\n      \"source\": {\n        \"pointer\": \"data/attributes/username\"\n      }\n    }, {\n      \"detail\": \"Doesn't look like a valid email.\",\n      \"source\": {\n        \"pointer\": \"data/attributes/email\"\n      }\n    }\n  ]\n}\n```\n\nThe key `detail` provides a textual description of the problem.\nAlternatively, the key `title` can be used for the same purpose.\n\nThe nested keys `source.pointer` detail which specific element\nof the request data was invalid.\n\nNote that JSON-API also allows for object-level errors to be placed\nin an object with pointer `data`, signifying that the problem\ncannot be traced to a specific attribute:\n\n```javascript\n{\n  \"errors\": [\n    {\n      \"detail\": \"Some generic non property error message\",\n      \"source\": {\n        \"pointer\": \"data\"\n      }\n    }\n  ]\n}\n```\n\nWhen turn into a `Errors` object, you can read these errors\nthrough the property `base`:\n\n```handlebars\n{{#each model.errors.base as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\nExample of alternative implementation, overriding the default\nbehavior to deal with a different format of errors:\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default JSONSerializer.extend({\n  extractErrors(store, typeClass, payload, id) {\n    if (payload && typeof payload === 'object' && payload._problems) {\n      payload = payload._problems;\n      this.normalizeErrors(typeClass, payload);\n    }\n    return payload;\n  }\n});\n```",
			"itemtype": "method",
			"name": "extractErrors",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "payload", "description": "", "type": "Object" },
				{ "name": "id", "description": "", "type": "(String|Number)" }
			],
			"return": { "description": "json The deserialized errors", "type": "Object" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1416,
			"description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\n\nExample\n\n```app/serializers/application.js\nimport JSONSerializer from '@ember-data/serializer/json';\nimport { underscore } from '@ember/string';\n\nexport default JSONSerializer.extend({\n  keyForAttribute(attr, method) {\n    return underscore(attr).toUpperCase();\n  }\n});\n```",
			"itemtype": "method",
			"name": "keyForAttribute",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "method", "description": "", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1442,
			"description": "`keyForRelationship` can be used to define a custom key when\nserializing and deserializing relationship properties. By default\n`JSONSerializer` does not provide an implementation of this method.\n\nExample\n\n  ```app/serializers/post.js\n  import JSONSerializer from '@ember-data/serializer/json';\n  import { underscore } from '@ember/string';\n\n  export default JSONSerializer.extend({\n    keyForRelationship(key, relationship, method) {\n      return `rel_${underscore(key)}`;\n    }\n  });\n  ```",
			"itemtype": "method",
			"name": "keyForRelationship",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "typeClass", "description": "", "type": "String" },
				{ "name": "method", "description": "", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1470,
			"description": "`keyForLink` can be used to define a custom key when deserializing link\nproperties.",
			"itemtype": "method",
			"name": "keyForLink",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "kind", "description": "`belongsTo` or `hasMany`", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/json.js",
			"line": 1485,
			"itemtype": "method",
			"name": "transformFor",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "attributeType", "description": "", "type": "String" },
				{ "name": "skipAssertion", "description": "", "type": "Boolean" }
			],
			"return": { "description": "transform", "type": "Transform" },
			"class": "JSONSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 61,
			"description": "`keyForPolymorphicType` can be used to define a custom key when\nserializing and deserializing a polymorphic type. By default, the\nreturned key is `${key}Type`.\n\nExample\n\n ```app/serializers/post.js\n import RESTSerializer from '@ember-data/serializer/rest';\n\n export default RESTSerializer.extend({\n   keyForPolymorphicType(key, relationship) {\n     var relationshipKey = this.keyForRelationship(key);\n\n     return 'type-' + relationshipKey;\n   }\n });\n ```",
			"itemtype": "method",
			"name": "keyForPolymorphicType",
			"params": [
				{ "name": "key", "description": "", "type": "String" },
				{ "name": "typeClass", "description": "", "type": "String" },
				{ "name": "method", "description": "", "type": "String" }
			],
			"return": { "description": "normalized key", "type": "String" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 92,
			"description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nFor example, if you have a payload that looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nThe `normalize` method will be called three times:\n\n* With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n* With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n* With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations. You will only need to implement\n`normalize` and manipulate the payload as desired.\n\nFor example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n`id`, you can specify how to normalize just the comments:\n\n```app/serializers/post.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend({\n  normalize(model, hash, prop) {\n    if (prop === 'comments') {\n      hash.id = hash._id;\n      delete hash._id;\n    }\n\n    return this._super(...arguments);\n  }\n});\n```\n\nOn each call to the `normalize` method, the third parameter (`prop`) is always\none of the keys that were in the original payload or in the result of another\nnormalization as `normalizeResponse`.",
			"itemtype": "method",
			"name": "normalize",
			"params": [
				{ "name": "modelClass", "description": "", "type": "Model" },
				{ "name": "resourceHash", "description": "", "type": "Object" },
				{ "name": "prop", "description": "", "type": "String" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 159,
			"description": "Normalizes an array of resource payloads and returns a JSON-API Document\nwith primary data and, if any, included data as `{ data, included }`.",
			"itemtype": "method",
			"name": "_normalizeArray",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "arrayHash", "description": "", "type": "Object" },
				{ "name": "prop", "description": "", "type": "String" }
			],
			"return": { "description": "", "type": "Object" },
			"access": "private",
			"tagname": "",
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 360,
			"description": "This method allows you to push a payload containing top-level\ncollections of records organized per type.\n\n```js\n{\n  \"posts\": [{\n    \"id\": \"1\",\n    \"title\": \"Rails is omakase\",\n    \"author\", \"1\",\n    \"comments\": [ \"1\" ]\n  }],\n  \"comments\": [{\n    \"id\": \"1\",\n    \"body\": \"FIRST\"\n  }],\n  \"users\": [{\n    \"id\": \"1\",\n    \"name\": \"@d2h\"\n  }]\n}\n```\n\nIt will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.",
			"itemtype": "method",
			"name": "pushPayload",
			"params": [
				{ "name": "store", "description": "", "type": "Store" },
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 420,
			"description": "This method is used to convert each JSON root key in the payload\ninto a modelName that it can use to look up the appropriate model for\nthat part of the payload.\n\nFor example, your server may send a model name that does not correspond with\nthe name of the model in your app. Let's take a look at an example model,\nand an example payload:\n\n```app/models/post.js\nimport Model from '@ember-data/model';\n\nexport default Model.extend({\n});\n```\n\n```javascript\n  {\n    \"blog/post\": {\n      \"id\": \"1\n    }\n  }\n```\n\nEmber Data is going to normalize the payload's root key for the modelName. As a result,\nit will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n(or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\nbecause it cannot find the \"blog/post\" model.\n\nSince we want to remove this namespace, we can define a serializer for the application that will\nremove \"blog/\" from the payload key whenver it's encountered by Ember Data:\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend({\n  modelNameFromPayloadKey(payloadKey) {\n    if (payloadKey === 'blog/post') {\n      return this._super(payloadKey.replace('blog/', ''));\n    } else {\n     return this._super(payloadKey);\n    }\n  }\n});\n```\n\nAfter refreshing, Ember Data will appropriately look up the \"post\" model.\n\nBy default the modelName for a model is its\nname in dasherized form. This means that a payload key like \"blogPost\" would be\nnormalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\ncan use the correct inflection to do this for you. Most of the time, you won't\nneed to override `modelNameFromPayloadKey` for this purpose.",
			"itemtype": "method",
			"name": "modelNameFromPayloadKey",
			"params": [{ "name": "key", "description": "", "type": "String" }],
			"return": { "description": "the model's modelName", "type": "String" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 484,
			"description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```app/models/comment.js\nimport Model, { attr, belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  title: attr(),\n  body: attr(),\n\n  author: belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```js\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```app/serializers/post.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    };\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { pluralize } from 'ember-inflector';\n\nexport default RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    });\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(singularize(name)) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```js\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```app/serializers/post.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = this._super(snapshot, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "json", "type": "Object" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 640,
			"description": "You can use this method to customize the root keys serialized into the JSON.\nThe hash property should be modified by reference (possibly using something like _.extend)\nBy default the REST Serializer sends the modelName of a model, which is a camelized\nversion of the name.\n\nFor example, your server may expect underscored root objects.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { decamelize } from '@ember/string';\n\nexport default RESTSerializer.extend({\n  serializeIntoHash(data, type, record, options) {\n    var root = decamelize(type.modelName);\n    data[root] = this.serialize(record, options);\n  }\n});\n```",
			"itemtype": "method",
			"name": "serializeIntoHash",
			"params": [
				{ "name": "hash", "description": "", "type": "Object" },
				{ "name": "typeClass", "description": "", "type": "Model" },
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 671,
			"description": "You can use `payloadKeyFromModelName` to override the root key for an outgoing\nrequest. By default, the RESTSerializer returns a camelized version of the\nmodel's name.\n\nFor a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer\nwill send it to the server with `tacoParty` as the root key in the JSON payload:\n\n```js\n{\n  \"tacoParty\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```\n\nFor example, your server may expect dasherized root objects:\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\nimport { dasherize } from '@ember/string';\n\nexport default RESTSerializer.extend({\n  payloadKeyFromModelName(modelName) {\n    return dasherize(modelName);\n  }\n});\n```\n\nGiven a `TacoParty` model, calling `save` on it would produce an outgoing\nrequest like:\n\n```js\n{\n  \"taco-party\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```",
			"itemtype": "method",
			"name": "payloadKeyFromModelName",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "", "type": "String" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 721,
			"description": "You can use this method to customize how polymorphic objects are serialized.\nBy default the REST Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.",
			"itemtype": "method",
			"name": "serializePolymorphicType",
			"params": [
				{ "name": "snapshot", "description": "", "type": "Snapshot" },
				{ "name": "json", "description": "", "type": "Object" },
				{ "name": "relationship", "description": "", "type": "Object" }
			],
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../serializer/addon/rest.js",
			"line": 743,
			"description": "You can use this method to customize how a polymorphic relationship should\nbe extracted.",
			"itemtype": "method",
			"name": "extractPolymorphicRelationship",
			"params": [
				{ "name": "relationshipType", "description": "", "type": "Object" },
				{ "name": "relationshipHash", "description": "", "type": "Object" },
				{ "name": "relationshipOptions", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "RESTSerializer",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/identifiers/utils/uuid-v4.ts",
			"line": 49,
			"description": "Convert array of 16 byte values to UUID string format of the form:\nXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
			"class": "RootState",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/identifiers/cache.ts",
			"line": 117,
			"description": "hook to allow management of merge conflicts with identifiers.\n\nwe allow late binding of this private internal merge so that `internalModelFactory`\ncan insert itself here to handle elimination of duplicates",
			"internal": "",
			"class": "RootState",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/identifiers/cache.ts",
			"line": 129,
			"internal": "",
			"class": "RootState",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/identifiers/cache.ts",
			"line": 238,
			"description": "allows us to peek without generating when needed\nuseful for the \"create\" case when we need to see if\nwe are accidentally overwritting something",
			"internal": "",
			"class": "RootState",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/adapter-populated-record-array.js",
			"line": 75,
			"itemtype": "method",
			"name": "_setInternalModels",
			"params": [
				{ "name": "internalModels", "description": "", "type": "Array" },
				{ "name": "payload", "description": "normalized payload", "type": "Object" }
			],
			"access": "private",
			"tagname": "",
			"class": "AdapterPopulatedRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 33,
			"description": "The array of client ids backing the record array. When a\nrecord is requested from the record array, the record\nfor the client id at the same index is materialized, if\nnecessary, by the store.",
			"itemtype": "property",
			"name": "content",
			"access": "private",
			"tagname": "",
			"type": "Ember.Array",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 45,
			"description": "The flag to signal a `RecordArray` is finished loading data.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isLoaded'); // true\n```",
			"itemtype": "property",
			"name": "isLoaded",
			"type": "Boolean",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 59,
			"description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
			"itemtype": "property",
			"name": "isUpdating",
			"type": "Boolean",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 76,
			"description": "The store that created this record array.",
			"itemtype": "property",
			"name": "store",
			"access": "private",
			"tagname": "",
			"type": "Store",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 93,
			"description": "The modelClass represented by this record array.",
			"itemtype": "property",
			"name": "type",
			"type": "Model",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 106,
			"description": "Retrieves an object from the content by index.",
			"itemtype": "method",
			"name": "objectAtContent",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "index", "description": "", "type": "Number" }],
			"return": { "description": "record", "type": "Model" },
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 119,
			"description": "Used to get the latest version of all of the records in this array\nfrom the adapter.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isUpdating'); // false\n\npeople.update().then(function() {\n  people.get('isUpdating'); // false\n});\n\npeople.get('isUpdating'); // true\n```",
			"itemtype": "method",
			"name": "update",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 166,
			"description": "Adds an internal model to the `RecordArray` without duplicates",
			"itemtype": "method",
			"name": "_pushInternalModels",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "internalModel", "description": "", "type": "InternalModel" }],
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 180,
			"description": "Removes an internalModel to the `RecordArray`.",
			"itemtype": "method",
			"name": "removeInternalModel",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "internalModel", "description": "", "type": "InternalModel" }],
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 191,
			"description": "Saves all of the records in the `RecordArray`.\n\nExample\n\n```javascript\nvar messages = store.peekAll('message');\nmessages.forEach(function(message) {\n  message.set('hasBeenSeen', true);\n});\nmessages.save();\n```",
			"itemtype": "method",
			"name": "save",
			"return": { "description": "promise", "type": "PromiseArray" },
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-arrays/record-array.js",
			"line": 228,
			"itemtype": "method",
			"name": "_unregisterFromManager",
			"access": "private",
			"tagname": "",
			"class": "RecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 31,
			"description": "The `id` of the record that this reference refers to. Together, the\n`type()` and `id()` methods form a composite key for the identity\nmap. This can be used to access the id of an async relationship\nwithout triggering a fetch that would normally happen if you\nattempted to use `record.get('relationship.id')`.\n\nExample\n\n```javascript\n// models/blog.js\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n   let id = userRef.id();\n }\n```",
			"itemtype": "method",
			"name": "id",
			"return": {
				"description": "The id of the record in this belongsTo relationship.",
				"type": "String"
			},
			"class": "BelongsToReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 81,
			"description": "`push` can be used to update the data in the relationship and Ember\nData will treat the new data as the conanical value of this\nrelationship on the backend.\n\nExample\n\n```app/models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// provide data for reference\nuserRef.push({\n   data: {\n     type: 'user',\n     id: 1,\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value() === user;\n });\n```",
			"itemtype": "method",
			"name": "push",
			"params": [
				{
					"name": "objectOrPromise",
					"description": "a promise that resolves to a JSONAPI document object describing the new value of this relationship.",
					"type": "Object|Promise"
				}
			],
			"return": {
				"description": "A promise that resolves with the new value in this belongs-to relationship.",
				"type": "Promise<record>"
			},
			"class": "BelongsToReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 152,
			"description": "`value()` synchronously returns the current value of the belongs-to\nrelationship. Unlike `record.get('relationshipName')`, calling\n`value()` on a reference does not trigger a fetch if the async\nrelationship is not yet loaded. If the relationship is not loaded\nit will always return `null`.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\n// provide data for reference\nuserRef.push({\n   data: {\n     type: 'user',\n     id: 1,\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value(); // user\n });\n```",
			"itemtype": "method",
			"name": "value",
			"return": { "description": "the record in this relationship", "type": "Model" },
			"class": "BelongsToReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 214,
			"description": "Loads a record in a belongs-to relationship if it is not already\nloaded. If the relationship is already loaded this method does not\ntrigger a new load.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\nuserRef.load().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference.\n\nExample\n\n```javascript\nuserRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n  userRef.value() === user;\n});\n```\n\n```app/adapters/user.js\nexport default ApplicationAdapter.extend({\n  findRecord(store, type, id, snapshot) {\n    // In the adapter you will have access to adapterOptions.\n    let adapterOptions = snapshot.adapterOptions;\n  }\n});\n```",
			"itemtype": "method",
			"name": "load",
			"params": [{ "name": "options", "description": "the options to pass in.", "type": "Object" }],
			"return": {
				"description": "a promise that resolves with the record in this belongs-to relationship.",
				"type": "Promise"
			},
			"class": "BelongsToReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/belongs-to.js",
			"line": 278,
			"description": "Triggers a reload of the value in this relationship. If the\nremoteType is `\"link\"` Ember Data will use the relationship link to\nreload the relationship. Otherwise it will reload the record by its\nid.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.reload().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference. A full example\ncan be found in the `load` method.\n\nExample\n\n```javascript\nuserRef.reload({ adapterOptions: { isPrivate: true } })\n```",
			"itemtype": "method",
			"name": "reload",
			"params": [{ "name": "options", "description": "the options to pass in.", "type": "Object" }],
			"return": {
				"description": "a promise that resolves with the record in this belongs-to relationship after the reload has completed.",
				"type": "Promise"
			},
			"class": "BelongsToReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 35,
			"description": "This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the \"link\" otherwise it defaults to \"id\".\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
			"itemtype": "method",
			"name": "remoteType",
			"return": {
				"description": "The name of the remote type. This should either be `link` or `ids`",
				"type": "String"
			},
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 84,
			"description": "`ids()` returns an array of the record IDs in this relationship.\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.ids(); // ['1']\n```",
			"itemtype": "method",
			"name": "ids",
			"return": { "description": "The ids in this has-many relationship", "type": "Array" },
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 128,
			"description": "`push` can be used to update the data in the relationship and Ember\nData will treat the new data as the canonical value of this\nrelationship on the backend.\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.ids(); // ['1']\n\ncommentsRef.push([\n[{ type: 'comment', id: 2 }],\n[{ type: 'comment', id: 3 }],\n])\n\ncommentsRef.ids(); // ['2', '3']\n```",
			"itemtype": "method",
			"name": "push",
			"params": [
				{
					"name": "objectOrPromise",
					"description": "a promise that resolves to a JSONAPI document object describing the new value of this relationship.",
					"type": "Array|Promise"
				}
			],
			"return": { "description": "", "type": "ManyArray" },
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 213,
			"description": "`value()` synchronously returns the current value of the has-many\nrelationship. Unlike `record.get('relationshipName')`, calling\n`value()` on a reference does not trigger a fetch if the async\nrelationship is not yet loaded. If the relationship is not loaded\nit will always return `null`.\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\npost.get('comments').then(function(comments) {\n  commentsRef.value() === comments\n})\n```",
			"itemtype": "method",
			"name": "value",
			"return": { "description": "", "type": "ManyArray" },
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 260,
			"description": "Loads the relationship if it is not already loaded.  If the\nrelationship is already loaded this method does not trigger a new\nload. This causes a request to the specified\nrelationship link or reloads all items currently in the relationship.\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.load().then(function(comments) {\n  //...\n});\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference.\n\nExample\n\n```javascript\ncommentsRef.load({ adapterOptions: { isPrivate: true } })\n  .then(function(comments) {\n    //...\n  });\n```\n\n```app/adapters/comment.js\nexport default ApplicationAdapter.extend({\n  findMany(store, type, id, snapshots) {\n    // In the adapter you will have access to adapterOptions.\n    let adapterOptions = snapshots[0].adapterOptions;\n  }\n});\n```",
			"itemtype": "method",
			"name": "load",
			"params": [{ "name": "options", "description": "the options to pass in.", "type": "Object" }],
			"return": {
				"description": "a promise that resolves with the ManyArray in\nthis has-many relationship.",
				"type": "Promise"
			},
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/has-many.js",
			"line": 326,
			"description": "Reloads this has-many relationship. This causes a request to the specified\nrelationship link or reloads all items currently in the relationship.\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.reload().then(function(comments) {\n  //...\n});\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference. A full example\ncan be found in the `load` method.\n\nExample\n\n```javascript\ncommentsRef.reload({ adapterOptions: { isPrivate: true } })\n```",
			"itemtype": "method",
			"name": "reload",
			"params": [{ "name": "options", "description": "the options to pass in.", "type": "Object" }],
			"return": {
				"description": "a promise that resolves with the ManyArray in this has-many relationship.",
				"type": "Promise"
			},
			"class": "HasManyReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 23,
			"description": "The `id` of the record that this reference refers to.\n\nTogether, the `type` and `id` properties form a composite key for\nthe identity map.\n\nExample\n\n```javascript\nlet userRef = store.getReference('user', 1);\n\nuserRef.id(); // '1'\n```",
			"itemtype": "method",
			"name": "id",
			"return": { "description": "The id of the record.", "type": "String" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 44,
			"description": "How the reference will be looked up when it is loaded. Currently\nthis always returns `identity` to signify that a record will be\nloaded by its `type` and `id`.\n\nExample\n\n```javascript\nconst userRef = store.getReference('user', 1);\n\nuserRef.remoteType(); // 'identity'\n```",
			"itemtype": "method",
			"name": "remoteType",
			"return": { "description": "'identity'", "type": "String" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 64,
			"description": "This API allows you to provide a reference with new data. The\nsimplest usage of this API is similar to `store.push`: you provide a\nnormalized hash of data and the object represented by the reference\nwill update.\n\nIf you pass a promise to `push`, Ember Data will not ask the adapter\nfor the data if another attempt to fetch it is made in the\ninterim. When the promise resolves, the underlying object is updated\nwith the new data, and the promise returned by *this function* is resolved\nwith that object.\n\nFor example, `recordReference.push(promise)` will be resolved with a\nrecord.\n\n Example\n\n ```javascript\n let userRef = store.getReference('user', 1);\n\n // provide data for reference\n userRef.push({\n   data: {\n     id: \"1\",\n     type: \"user\",\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value() === user;\n });\n ```",
			"itemtype": "method",
			"name": "push",
			"params": [
				{
					"name": "objectOrPromise",
					"description": "a JSON:API ResourceDocument or a promise resolving to one"
				}
			],
			"return": { "description": "a promise for the value (record or relationship)" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 108,
			"description": "If the entity referred to by the reference is already loaded, it is\npresent as `reference.value`. Otherwise the value returned by this function\nis `null`.\n\n Example\n\n ```javascript\n let userRef = store.getReference('user', 1);\n\n userRef.value(); // user\n ```",
			"itemtype": "method",
			"name": "value",
			"return": { "description": "the record for this RecordReference", "type": "Model" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 131,
			"description": "Triggers a fetch for the backing entity based on its `remoteType`\n(see `remoteType` definitions per reference type).\n\nExample\n\n```javascript\nlet userRef = store.getReference('user', 1);\n\n// load user (via store.find)\nuserRef.load().then(...)\n```",
			"itemtype": "method",
			"name": "load",
			"return": { "description": "the record for this RecordReference", "type": "Promise<record>" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/record.ts",
			"line": 154,
			"description": "Reloads the record if it is already loaded. If the record is not\nloaded it will load the record via `store.findRecord`\n\nExample\n\n```javascript\nlet userRef = store.getReference('user', 1);\n\n// or trigger a reload\nuserRef.reload().then(...)\n```",
			"itemtype": "method",
			"name": "reload",
			"return": { "description": "the record for this RecordReference", "type": "Promise<record>" },
			"class": "RecordReference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/reference.ts",
			"line": 44,
			"description": "This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the \"link\" otherwise it defaults to \"id\".\n\nExample\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
			"itemtype": "method",
			"name": "remoteType",
			"return": {
				"description": "The name of the remote type. This should either be \"link\" or \"ids\"",
				"type": "String"
			},
			"class": "Reference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/reference.ts",
			"line": 93,
			"description": "The link Ember Data will use to fetch or reload this belongs-to\nrelationship.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         links: {\n           related: '/articles/1/author'\n         }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"link\") {\n   let link = userRef.link();\n }\n```",
			"itemtype": "method",
			"name": "link",
			"return": {
				"description": "The link Ember Data will use to fetch or reload this belongs-to relationship.",
				"type": "String"
			},
			"class": "Reference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/references/reference.ts",
			"line": 143,
			"description": "The meta data for the belongs-to relationship.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo({ async: true })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         links: {\n           related: {\n             href: '/articles/1/author'\n           },\n           meta: {\n             lastUpdated: 1458014400000\n           }\n         }\n       }\n     }\n   }\n });\n\nlet userRef = blog.belongsTo('user');\n\nuserRef.meta() // { lastUpdated: 1458014400000 }\n```",
			"itemtype": "method",
			"name": "meta",
			"return": {
				"description": "The meta information for the belongs-to relationship.",
				"type": "Object"
			},
			"class": "Reference",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/store/internal-model-factory.ts",
			"line": 69,
			"description": "The InternalModelFactory handles the lifecyle of\ninstantiating, caching, and destroying InternalModel\ninstances.",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/store/internal-model-factory.ts",
			"line": 135,
			"description": "Retrieve the InternalModel for a given { type, id, lid }.\n\nIf an InternalModel does not exist, it instantiates one.\n\nIf an InternalModel does exist bus has a scheduled destroy,\n  the scheduled destroy will be cancelled.",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/store/internal-model-factory.ts",
			"line": 173,
			"description": "Peek the InternalModel for a given { type, id, lid }.\n\nIf an InternalModel does not exist, return `null`.",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/store/record-data-store-wrapper.ts",
			"line": 36,
			"description": "Exists so that DefaultRecordData can check for model types\nin DEBUG for relationships. Should be refactored away.",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/store/record-data-store-wrapper.ts",
			"line": 46,
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 210,
			"description": "EmberData specific backburner instance",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 250,
			"description": "The default adapter to use to communicate to a backend server or\nother persistence layer. This will be overridden by an application\nadapter if present.\n\nIf you want to specify `app/adapters/custom.js` as a string, do:\n\n```js\nimport Store from '@ember-data/store';\n\nexport default Store.extend({\n  init() {\n    this._super(...arguments);\n    this.adapter = 'custom';\n  }\n});\n```",
			"itemtype": "property",
			"name": "adapter",
			"default": "'-json-api'",
			"type": "{String}",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 273,
			"description": "This property returns the adapter, after resolving a possible\nstring key.\n\nIf the supplied `adapter` was a class, or a String property\npath resolved to a class, this property will instantiate the\nclass.\n\nThis property is cacheable, so the same instance of a specified\nadapter class should be used for the lifetime of the store.",
			"itemtype": "property",
			"name": "defaultAdapter",
			"access": "private",
			"tagname": "",
			"return": { "description": "Adapter" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 289,
			"itemtype": "method",
			"name": "init",
			"access": "private",
			"tagname": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 551,
			"description": "Create a new record in the current store. The properties passed\nto this method are set on the newly created record.\n\nTo create a new instance of a `Post`:\n\n```js\nstore.createRecord('post', {\n  title: 'Ember is awesome!'\n});\n```\n\nTo create a new instance of a `Post` that has a relationship with a `User` record:\n\n```js\nlet user = this.store.peekRecord('user', 1);\nstore.createRecord('post', {\n  title: 'Ember is awesome!',\n  user: user\n});\n```",
			"itemtype": "method",
			"name": "createRecord",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{
					"name": "inputProperties",
					"description": "a hash of properties to set on the\n  newly created record.",
					"type": "Object"
				}
			],
			"return": { "description": "record", "type": "Model" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 623,
			"description": "If possible, this method asks the adapter to generate an ID for\na newly created record.",
			"itemtype": "method",
			"name": "_generateId",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "properties", "description": "from the new record", "type": "Object" }
			],
			"return": { "description": "if the adapter can generate one, an ID", "type": "String" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 647,
			"description": "For symmetry, a record can be deleted via the store.\n\nExample\n\n```javascript\nlet post = store.createRecord('post', {\n  title: 'Ember is awesome!'\n});\n\nstore.deleteRecord(post);\n```",
			"itemtype": "method",
			"name": "deleteRecord",
			"params": [{ "name": "record", "description": "", "type": "Model" }],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 680,
			"description": "For symmetry, a record can be unloaded via the store.\nThis will cause the record to be destroyed and freed up for garbage collection.\n\nExample\n\n```javascript\nstore.findRecord('post', 1).then(function(post) {\n  store.unloadRecord(post);\n});\n```",
			"itemtype": "method",
			"name": "unloadRecord",
			"params": [{ "name": "record", "description": "", "type": "Model" }],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 716,
			"itemtype": "method",
			"name": "find",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "String|Integer" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"access": "private",
			"tagname": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 756,
			"description": "This method returns a record for a given type and id combination.\n\nThe `findRecord` method will always resolve its promise with the same\nobject for a given type and `id`.\n\nThe `findRecord` method will always return a **promise** that will be\nresolved with the record.\n\nExample\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n});\n```\n\nIf the record is not yet available, the store will ask the adapter's `find`\nmethod to find the necessary data. If the record is already present in the\nstore, it depends on the reload behavior _when_ the returned promise\nresolves.\n\n### Preloading\n\nYou can optionally `preload` specific attributes and relationships that you know of\nby passing them via the passed `options`.\n\nFor example, if your Ember route looks like `/posts/1/comments/2` and your API route\nfor the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\nwithout fetching the post you can pass in the post to the `findRecord` call:\n\n```javascript\nstore.findRecord('comment', 2, { preload: { post: 1 } });\n```\n\nIf you have access to the post model you can also pass the model itself:\n\n```javascript\nstore.findRecord('post', 1).then(function (myPostModel) {\n  store.findRecord('comment', 2, { post: myPostModel });\n});\n```\n\n### Reloading\n\nThe reload behavior is configured either via the passed `options` hash or\nthe result of the adapter's `shouldReloadRecord`.\n\nIf `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\nto `true`, then the returned promise resolves once the adapter returns\ndata, regardless if the requested record is already in the store:\n\n```js\nstore.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\n// adapter#findRecord resolves with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\nstore.findRecord('post', 1, { reload: true }).then(function(post) {\n  post.get('revision'); // 2\n});\n```\n\nIf no reload is indicated via the above mentioned ways, then the promise\nimmediately resolves with the cached version in the store.\n\n### Background Reloading\n\nOptionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\nthen a background reload is started, which updates the records' data, once\nit is available:\n\n```js\n// app/adapters/post.js\nimport ApplicationAdapter from \"./application\";\n\nexport default ApplicationAdapter.extend({\n  shouldReloadRecord(store, snapshot) {\n    return false;\n  },\n\n  shouldBackgroundReloadRecord(store, snapshot) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\nlet blogPost = store.findRecord('post', 1).then(function(post) {\n  post.get('revision'); // 1\n});\n\n// later, once adapter#findRecord resolved with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\n\nblogPost.get('revision'); // 2\n```\n\nIf you would like to force or prevent background reloading, you can set a\nboolean value for `backgroundReload` in the options object for\n`findRecord`.\n\n```app/routes/post/edit.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n  }\n});\n```\n\nIf you pass an object on the `adapterOptions` property of the options\nargument it will be passed to you adapter via the snapshot\n\n```app/routes/post/edit.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findRecord('post', params.post_id, {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findRecord(store, type, id, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```\n\nSee [peekRecord](Store/methods/peekRecord?anchor=peekRecord) to get the cached version of a record.\n\n### Retrieving Related Model Records\n\nIf you use an adapter such as Ember's default\n[`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\nthat supports the [JSON API specification](http://jsonapi.org/) and if your server\nendpoint supports the use of an\n['include' query parameter](http://jsonapi.org/format/#fetching-includes),\nyou can use `findRecord()` to automatically retrieve additional records related to\nthe one you request by supplying an `include` parameter in the `options` object.\n\nFor example, given a `post` model that has a `hasMany` relationship with a `comment`\nmodel, when we retrieve a specific post we can have the server also return that post's\ncomments in the same request:\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findRecord('post', params.post_id, { include: 'comments' });\n  }\n});\n\n```\nIn this case, the post's comments would then be available in your template as\n`model.comments`.\n\nMultiple relationships can be requested using an `include` parameter consisting of a\ncomma-separated list (without white-space) while nested relationships can be specified\nusing a dot-separated sequence of relationship names. So to request both the post's\ncomments and the authors of those comments the request would look like this:\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });\n  }\n});\n\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "findRecord",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "(String|Integer)" },
				{ "name": "options", "description": "", "type": "Object", "optional": true },
				{
					"name": "preload",
					"description": "- optional set of attributes and relationships passed in either as IDs or as actual models",
					"type": "Object"
				}
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1070,
			"description": "This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.",
			"access": "private",
			"tagname": "",
			"itemtype": "method",
			"name": "findByIds",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "ids", "description": "", "type": "Array" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1101,
			"description": "This method is called by `findRecord` if it discovers that a particular\ntype/id pair hasn't been loaded yet to kick off a request to the\nadapter.",
			"itemtype": "method",
			"name": "_fetchRecord",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "internalModel", "description": "model", "type": "InternalModel" }],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1381,
			"description": "Get the reference for the specified record.\n\nExample\n\n```javascript\nlet userRef = store.getReference('user', 1);\n\n// check if the user is loaded\nlet isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nlet user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === 'id') {\nlet id = userRef.id();\n}\n\n// load user (via store.find)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({ id: 1, username: '@user' }).then(function(user) {\n  userRef.value() === user;\n});\n```",
			"itemtype": "method",
			"name": "getReference",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "String|Integer" }
			],
			"since": "2.5.0",
			"return": { "description": "", "type": "RecordReference" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1429,
			"description": "Get a record by a given type and ID without triggering a fetch.\n\nThis method will synchronously return the record if it is available in the store,\notherwise it will return `null`. A record is available if it has been fetched earlier, or\npushed manually into the store.\n\nSee [findRecord](Store/methods/findRecord?anchor=findRecord) if you would like to request this record from the backend.\n\n_Note: This is a synchronous method and does not return a promise._\n\n```js\nlet post = store.peekRecord('post', 1);\n\npost.get('id'); // 1\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "peekRecord",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "String|Integer" }
			],
			"return": { "description": "record", "type": "Model|null" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1474,
			"description": "This method is called by the record's `reload` method.\n\nThis method calls the adapter's `find` method, which returns a promise. When\n**that** promise resolves, `_reloadRecord` will resolve the promise returned\nby the record's `reload`.",
			"itemtype": "method",
			"name": "_reloadRecord",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "Model" },
				{ "name": "options", "description": "optional to include adapterOptions" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1504,
			"description": "This method returns true if a record for a given modelName and id is already\nloaded in the store. Use this function to know beforehand if a findRecord()\nwill result in a request or that it will be a cache hit.\n\nExample\n\n```javascript\nstore.hasRecordForId('post', 1); // false\nstore.findRecord('post', 1).then(function() {\n  store.hasRecordForId('post', 1); // true\n});\n```",
			"itemtype": "method",
			"name": "hasRecordForId",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "(String|Integer)" }
			],
			"return": { "description": "", "type": "Boolean" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1543,
			"description": "Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.",
			"itemtype": "method",
			"name": "recordForId",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "id", "description": "", "type": "(String|Integer)" }
			],
			"return": { "description": "record", "type": "Model" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1570,
			"itemtype": "method",
			"name": "findMany",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "internalModels", "description": "", "type": "Array" }],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1589,
			"description": "If a relationship was originally populated by the adapter as a link\n(as opposed to a list of IDs), this method is called when the\nrelationship is fetched.\n\nThe link (which is usually a URL) is passed through unchanged, so the\nadapter can make whatever request it wants.\n\nThe usual use-case is for the server to register a URL as a link, and\nthen use that URL in the future to make a request for the relationship.",
			"itemtype": "method",
			"name": "findHasMany",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "InternalModel" },
				{ "name": "link", "description": "", "type": "Any" },
				{ "name": "relationship", "description": "", "type": "(Relationship)" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1686,
			"itemtype": "method",
			"name": "findBelongsTo",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "InternalModel" },
				{ "name": "link", "description": "", "type": "Any" },
				{ "name": "relationship", "description": "", "type": "Relationship" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1807,
			"description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nEach time this method is called a new request is made through the adapter.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { page: 1 });\n```\n\nThe request made to the server will look something like this:\n\n```\nGET \"/api/v1/person?page=1\"\n```\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { ids: [1, 2, 3] });\n```\n\nThe request made to the server will look something like this:\n\n```\nGET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\ndecoded: \"/api/v1/person?ids[]=1&ids[]=2&ids[]=3\"\n```\n\nThis method returns a promise, which is resolved with an\n[`AdapterPopulatedRecordArray`](/ember-data/release/classes/AdapterPopulatedRecordArray)\nonce the server returns.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "query",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{
					"name": "query",
					"description": "an opaque query to be used by the adapter",
					"type": "Any"
				},
				{
					"name": "options",
					"description": "optional, may include `adapterOptions` hash which will be passed to adapter.query",
					"type": "Object"
				}
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 1897,
			"description": "This method makes a request for one record, where the `id` is not known\nbeforehand (if the `id` is known, use [`findRecord`](Store/methods/findRecord?anchor=findRecord)\ninstead).\n\nThis method can be used when it is certain that the server will return a\nsingle object for the primary data.\n\nEach time this method is called a new request is made through the adapter.\n\nLet's assume our API provides an endpoint for the currently logged in user\nvia:\n\n```\n// GET /api/current_user\n{\n  user: {\n    id: 1234,\n    username: 'admin'\n  }\n}\n```\n\nSince the specific `id` of the `user` is not known beforehand, we can use\n`queryRecord` to get the user:\n\n```javascript\nstore.queryRecord('user', {}).then(function(user) {\n  let username = user.get('username');\n  console.log(`Currently logged in as ${username}`);\n});\n```\n\nThe request is made through the adapters' `queryRecord`:\n\n```app/adapters/user.js\nimport $ from 'jquery';\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  queryRecord(modelName, query) {\n    return $.getJSON('/api/current_user');\n  }\n});\n```\n\nNote: the primary use case for `store.queryRecord` is when a single record\nis queried and the `id` is not known beforehand. In all other cases\n`store.query` and using the first item of the array is likely the preferred\nway:\n\n```\n// GET /users?username=unique\n{\n  data: [{\n    id: 1234,\n    type: 'user',\n    attributes: {\n      username: \"unique\"\n    }\n  }]\n}\n```\n\n```javascript\nstore.query('user', { username: 'unique' }).then(function(users) {\n  return users.get('firstObject');\n}).then(function(user) {\n  let id = user.get('id');\n});\n```\n\nThis method returns a promise, which resolves with the found record.\n\nIf the adapter returns no data for the primary data of the payload, then\n`queryRecord` resolves with `null`:\n\n```\n// GET /users?username=unique\n{\n  data: null\n}\n```\n\n```javascript\nstore.queryRecord('user', { username: 'unique' }).then(function(user) {\n  console.log(user); // null\n});\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "queryRecord",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{
					"name": "query",
					"description": "an opaque query to be used by the adapter",
					"type": "Any"
				},
				{
					"name": "options",
					"description": "optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord",
					"type": "Object"
				}
			],
			"return": {
				"description": "promise which resolves with the found record or `null`",
				"type": "Promise"
			},
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2032,
			"description": "`findAll` asks the adapter's `findAll` method to find the records for the\ngiven type, and returns a promise which will resolve with all records of\nthis type present in the store, even if the adapter only returns a subset\nof them.\n\n```app/routes/authors.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findAll('author');\n  }\n});\n```\n\n_When_ the returned promise resolves depends on the reload behavior,\nconfigured via the passed `options` hash and the result of the adapter's\n`shouldReloadAll` method.\n\n### Reloading\n\nIf `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n`true`, then the returned promise resolves once the adapter returns data,\nregardless if there are already records in the store:\n\n```js\nstore.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\n// adapter#findAll resolves with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\nstore.findAll('author', { reload: true }).then(function(authors) {\n  authors.getEach('id'); // ['first', 'second']\n});\n```\n\nIf no reload is indicated via the above mentioned ways, then the promise\nimmediately resolves with all the records currently loaded in the store.\n\n### Background Reloading\n\nOptionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\nthen a background reload is started. Once this resolves, the array with\nwhich the promise resolves, is updated automatically so it contains all the\nrecords in the store:\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\nexport default Adapter.extend({\n  shouldReloadAll(store, snapshotsArray) {\n    return false;\n  },\n\n  shouldBackgroundReloadAll(store, snapshotsArray) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\nlet allAuthors;\nstore.findAll('author').then(function(authors) {\n  authors.getEach('id'); // ['first']\n\n  allAuthors = authors;\n});\n\n// later, once adapter#findAll resolved with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\n\nallAuthors.getEach('id'); // ['first', 'second']\n```\n\nIf you would like to force or prevent background reloading, you can set a\nboolean value for `backgroundReload` in the options object for\n`findAll`.\n\n```app/routes/post/edit.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model() {\n    return this.store.findAll('post', { backgroundReload: false });\n  }\n});\n```\n\nIf you pass an object on the `adapterOptions` property of the options\nargument it will be passed to you adapter via the `snapshotRecordArray`\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model(params) {\n    return this.store.findAll('post', {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findAll(store, type, sinceToken, snapshotRecordArray) {\n    if (snapshotRecordArray.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```\n\nSee [peekAll](Store/methods/peekAll?anchor=peekAll) to get an array of current records in the\nstore, without waiting until a reload is finished.\n\n### Retrieving Related Model Records\n\nIf you use an adapter such as Ember's default\n[`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\nthat supports the [JSON API specification](http://jsonapi.org/) and if your server\nendpoint supports the use of an\n['include' query parameter](http://jsonapi.org/format/#fetching-includes),\nyou can use `findAll()` to automatically retrieve additional records related to\nthose requested by supplying an `include` parameter in the `options` object.\n\nFor example, given a `post` model that has a `hasMany` relationship with a `comment`\nmodel, when we retrieve all of the post records we can have the server also return\nall of the posts' comments in the same request:\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model() {\n    return this.store.findAll('post', { include: 'comments' });\n  }\n});\n\n```\nMultiple relationships can be requested using an `include` parameter consisting of a\ncomma-separated list (without white-space) while nested relationships can be specified\nusing a dot-separated sequence of relationship names. So to request both the posts'\ncomments and the authors of those comments the request would look like this:\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  model() {\n    return this.store.findAll('post', { include: 'comments,comments.author' });\n  }\n});\n\n```\n\nSee [query](Store/methods/query?anchor=query) to only get a subset of records from the server.",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "findAll",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2236,
			"itemtype": "method",
			"name": "_fetchAll",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "", "type": "Model" },
				{ "name": "array", "description": "", "type": "RecordArray" }
			],
			"return": { "description": "promise", "type": "Promise" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2285,
			"itemtype": "method",
			"name": "_didUpdateAll",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"access": "private",
			"tagname": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2294,
			"description": "This method returns a filtered array that contains all of the\nknown records for a given type in the store.\n\nNote that because it's just a filter, the result will contain any\nlocally created records of the type, however, it will not make a\nrequest to the backend to retrieve additional records. If you\nwould like to request all the records from the backend please use\n[store.findAll](Store/methods/findAll?anchor=findAll).\n\nAlso note that multiple calls to `peekAll` for a given type will always\nreturn the same `RecordArray`.\n\nExample\n\n```javascript\nlet localPosts = store.peekAll('post');\n```",
			"since": "1.13.0",
			"itemtype": "method",
			"name": "peekAll",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "", "type": "RecordArray" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2331,
			"description": "This method unloads all records in the store.\nIt schedules unloading to happen during the next run loop.\n\nOptionally you can pass a type which unload all records for a given type.\n\n```javascript\nstore.unloadAll();\nstore.unloadAll('post');\n```",
			"itemtype": "method",
			"name": "unloadAll",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2375,
			"description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
			"itemtype": "method",
			"name": "scheduleSave",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "InternalModel" },
				{ "name": "resolver", "description": "", "type": "Resolver" },
				{ "name": "options", "description": "", "type": "Object" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2450,
			"description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
			"itemtype": "method",
			"name": "flushPendingSave",
			"access": "private",
			"tagname": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2499,
			"description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\n\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.",
			"itemtype": "method",
			"name": "didSaveRecord",
			"access": "private",
			"tagname": "",
			"params": [
				{
					"name": "internalModel",
					"description": "the in-flight internal model",
					"type": "InternalModel"
				},
				{ "name": "data", "description": "optional data (see above)", "type": "Object" },
				{
					"name": "op",
					"description": "the adapter operation that was committed",
					"type": "String"
				}
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2542,
			"description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected with a `InvalidError`.",
			"itemtype": "method",
			"name": "recordWasInvalid",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "InternalModel" },
				{ "name": "errors", "description": "", "type": "Object" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2563,
			"description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected (with anything other than a `InvalidError`).",
			"itemtype": "method",
			"name": "recordWasError",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "internalModel", "description": "", "type": "InternalModel" },
				{ "name": "error", "description": "", "type": "Error" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2580,
			"description": "Sets newly received ID from the adapter's `createRecord`, `updateRecord`\nor `deleteRecord`.",
			"itemtype": "method",
			"name": "setRecordId",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "newId", "description": "", "type": "String" },
				{ "name": "clientId", "description": "", "type": "String" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2601,
			"description": "This internal method is used by `push`.",
			"itemtype": "method",
			"name": "_load",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "data", "description": "", "type": "Object" }],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2646,
			"description": "Push some data for a given type into the store.\n\nThis method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n- record's `type` should always be in singular, dasherized form\n- members (properties) should be camelCased\n\n[Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n\n```js\nstore.push({\n  data: {\n    // primary data for single record of type `Person`\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Daniel',\n      lastName: 'Kmak'\n    }\n  }\n});\n```\n\n[Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n\n`data` property can also hold an array (of records):\n\n```js\nstore.push({\n  data: [\n    // an array of records\n    {\n      id: '1',\n      type: 'person',\n      attributes: {\n        firstName: 'Daniel',\n        lastName: 'Kmak'\n      }\n    },\n    {\n      id: '2',\n      type: 'person',\n      attributes: {\n        firstName: 'Tom',\n        lastName: 'Dale'\n      }\n    }\n  ]\n});\n```\n\n[Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n\nThere are some typical properties for `JSONAPI` payload:\n* `id` - mandatory, unique record's key\n* `type` - mandatory string which matches `model`'s dasherized name in singular form\n* `attributes` - object which holds data for record attributes - `attr`'s declared in model\n* `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n  - [`links`](http://jsonapi.org/format/#document-links)\n  - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n  - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n\nFor this model:\n\n```app/models/person.js\nimport Model, { attr, hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n\n  children: hasMany('person')\n});\n```\n\nTo represent the children as IDs:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        data: [\n          {\n            id: '2',\n            type: 'person'\n          },\n          {\n            id: '3',\n            type: 'person'\n          },\n          {\n            id: '4',\n            type: 'person'\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n[Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n\nTo represent the children relationship as a URL:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        links: {\n          related: '/people/1/children'\n        }\n      }\n    }\n  }\n}\n```\n\nIf you're streaming data or implementing an adapter, make sure\nthat you have converted the incoming data into this form. The\nstore's [normalize](Store/methods/normalize?anchor=normalize) method is a convenience\nhelper for converting a json payload into the form Ember Data\nexpects.\n\n```js\nstore.push(store.normalize('person', data));\n```\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.",
			"itemtype": "method",
			"name": "push",
			"params": [{ "name": "data", "description": "", "type": "Object" }],
			"return": { "description": "the record(s) that was created or\n  updated." },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 2930,
			"description": "Push some raw data into the store.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer;\n```\n\n```js\nlet pushData = {\n  posts: [\n    { id: 1, postTitle: \"Great post\", commentIds: [2] }\n  ],\n  comments: [\n    { id: 2, commentBody: \"Insightful comment\" }\n  ]\n}\n\nstore.pushPayload(pushData);\n```\n\nBy default, the data will be deserialized using a default\nserializer (the application serializer if it exists).\n\nAlternatively, `pushPayload` will accept a model type which\nwill determine which serializer will process the payload.\n\n```app/serializers/application.js\nimport RESTSerializer from '@ember-data/serializer/rest';\n\nexport default RESTSerializer;\n```\n\n```app/serializers/post.js\nimport JSONSerializer from '@ember-data/serializer/json';\n\nexport default JSONSerializer;\n```\n\n```js\nstore.pushPayload(pushData); // Will use the application serializer\nstore.pushPayload('post', pushData); // Will use the post serializer\n```",
			"itemtype": "method",
			"name": "pushPayload",
			"params": [
				{
					"name": "modelName",
					"description": "Optionally, a model type used to determine which serializer will be used",
					"type": "String"
				},
				{ "name": "inputPayload", "description": "", "type": "Object" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3026,
			"description": "TODO Only needed temporarily for test support",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3071,
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3078,
			"description": "Instantiation hook allowing applications or addons to configure the store\nto utilize a custom RecordData implementation.",
			"params": [
				{ "name": "modelName", "description": "" },
				{ "name": "id", "description": "" },
				{ "name": "clientId", "description": "" },
				{ "name": "storeWrapper", "description": "" }
			],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3096,
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3104,
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3120,
			"description": "`normalize` converts a json payload into the normalized form that\n[push](Store/methods/push?anchor=push) expects.\n\nExample\n\n```js\nsocket.on('message', function(message) {\n  let modelName = message.model;\n  let data = message.data;\n  store.push(store.normalize(modelName, data));\n});\n```",
			"itemtype": "method",
			"name": "normalize",
			"params": [
				{
					"name": "modelName",
					"description": "The name of the model type for this payload",
					"type": "String"
				},
				{ "name": "payload", "description": "", "type": "Object" }
			],
			"return": { "description": "The normalized payload", "type": "Object" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3171,
			"description": "TODO remove test usage",
			"internal": "",
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3184,
			"description": "Returns an instance of the adapter for a given type. For\nexample, `adapterFor('person')` will return an instance of\n`App.PersonAdapter`.\n\nIf no `App.PersonAdapter` is found, this method will look\nfor an `App.ApplicationAdapter` (the default adapter for\nyour entire application).\n\nIf no `App.ApplicationAdapter` is found, it will return\nthe value of the `defaultAdapter`.",
			"itemtype": "method",
			"name": "adapterFor",
			"access": "public",
			"tagname": "",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "Adapter" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3286,
			"description": "Returns an instance of the serializer for a given type. For\nexample, `serializerFor('person')` will return an instance of\n`App.PersonSerializer`.\n\nIf no `App.PersonSerializer` is found, this method will look\nfor an `App.ApplicationSerializer` (the default serializer for\nyour entire application).\n\nif no `App.ApplicationSerializer` is found, it will attempt\nto get the `defaultSerializer` from the `PersonAdapter`\n(`adapterFor('person')`).\n\nIf a serializer cannot be found on the adapter, it will fall back\nto an instance of `JSONSerializer`.",
			"itemtype": "method",
			"name": "serializerFor",
			"access": "public",
			"tagname": "",
			"params": [
				{ "name": "modelName", "description": "the record to serialize", "type": "String" }
			],
			"return": { "description": "", "type": "Serializer" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/core-store.ts",
			"line": 3658,
			"description": "Flag indicating whether all inverse records are available\n\ntrue if the inverse exists and is loaded (not empty)\ntrue if there is no inverse\nfalse if the inverse exists and is not loaded (empty)",
			"return": { "description": "", "type": "Boolean" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/deprecated-evented.js",
			"line": 29,
			"description": "Provides a way to call Evented without logging deprecation warnings",
			"params": [{ "name": "name", "description": "", "type": "String" }],
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/diff-array.js",
			"line": 5,
			"itemtype": "method",
			"name": "diffArray",
			"access": "private",
			"tagname": "",
			"params": [
				{ "name": "oldArray", "description": "the old array", "type": "Array" },
				{ "name": "newArray", "description": "the new array", "type": "Array" }
			],
			"return": {
				"description": "{\n    firstChangeIndex: <integer>,  // null if no change\n    addedCount: <integer>,        // 0 if no change\n    removedCount: <integer>       // 0 if no change\n  }",
				"type": "Hash"
			},
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/ds-model-store.ts",
			"line": 135,
			"description": "Returns the model class for the particular `modelName`.\n\nThe class of a model might be useful if you want to get a list of all the\nrelationship names of the model, see\n[`relationshipNames`](/ember-data/release/classes/Model?anchor=relationshipNames)\nfor example.",
			"itemtype": "method",
			"name": "modelFor",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "", "type": "Model" },
			"class": "Store",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/errors-utils.js",
			"line": 12,
			"description": "Convert an hash of errors into an array with errors in JSON-API format.\n ```javascript\nimport DS from 'ember-data';\n const { errorsHashToArray } = DS;\n let errors = {\n  base: 'Invalid attributes on saving this record',\n  name: 'Must be present',\n  age: ['Must be present', 'Must be a number']\n};\n let errorsArray = errorsHashToArray(errors);\n// [\n//   {\n//     title: \"Invalid Document\",\n//     detail: \"Invalid attributes on saving this record\",\n//     source: { pointer: \"/data\" }\n//   },\n//   {\n//     title: \"Invalid Attribute\",\n//     detail: \"Must be present\",\n//     source: { pointer: \"/data/attributes/name\" }\n//   },\n//   {\n//     title: \"Invalid Attribute\",\n//     detail: \"Must be present\",\n//     source: { pointer: \"/data/attributes/age\" }\n//   },\n//   {\n//     title: \"Invalid Attribute\",\n//     detail: \"Must be a number\",\n//     source: { pointer: \"/data/attributes/age\" }\n//   }\n// ]\n```",
			"itemtype": "method",
			"name": "errorsHashToArray",
			"access": "public",
			"tagname": "",
			"params": [
				{ "name": "errors", "description": "hash with errors as properties", "type": "Object" }
			],
			"return": { "description": "array of errors in JSON-API format", "type": "Array" },
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/errors-utils.js",
			"line": 78,
			"description": "Convert an array of errors in JSON-API format into an object.\n\n```javascript\nimport DS from 'ember-data';\n\nconst { errorsArrayToHash } = DS;\n\nlet errorsArray = [\n  {\n    title: 'Invalid Attribute',\n    detail: 'Must be present',\n    source: { pointer: '/data/attributes/name' }\n  },\n  {\n    title: 'Invalid Attribute',\n    detail: 'Must be present',\n    source: { pointer: '/data/attributes/age' }\n  },\n  {\n    title: 'Invalid Attribute',\n    detail: 'Must be a number',\n    source: { pointer: '/data/attributes/age' }\n  }\n];\n\nlet errors = errorsArrayToHash(errorsArray);\n// {\n//   \"name\": [\"Must be present\"],\n//   \"age\":  [\"Must be present\", \"must be a number\"]\n// }\n```",
			"itemtype": "method",
			"name": "errorsArrayToHash",
			"access": "public",
			"tagname": "",
			"params": [
				{ "name": "errors", "description": "array of errors in JSON-API format", "type": "Array" }
			],
			"return": { "description": "", "type": "Object" },
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/fetch-manager.ts",
			"line": 60,
			"description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/fetch-manager.ts",
			"line": 149,
			"description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
			"itemtype": "method",
			"name": "flushPendingSave",
			"access": "private",
			"tagname": "",
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/identity-map.ts",
			"line": 18,
			"description": "Retrieves the `InternalModelMap` for a given modelName,\ncreating one if one did not already exist. This is\nsimilar to `getWithDefault` or `get` on a `MapWithDefault`",
			"itemtype": "method",
			"name": "retrieve",
			"params": [{ "name": "modelName", "description": "a previously normalized modelName" }],
			"return": {
				"description": "the InternalModelMap for the given modelName",
				"type": "InternalModelMap"
			},
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/identity-map.ts",
			"line": 37,
			"description": "Clears the contents of all known `RecordMaps`, but does\nnot remove the InternalModelMap instances.",
			"itemtype": "method",
			"name": "clear",
			"class": "IdentityMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/internal-model-map.ts",
			"line": 26,
			"itemtype": "method",
			"name": "get",
			"params": [{ "name": "id", "description": "", "type": "String" }],
			"return": { "description": "", "type": "InternalModel" },
			"class": "InternalModelMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/internal-model-map.ts",
			"line": 93,
			"description": "An array of all models of this modelName",
			"itemtype": "property",
			"name": "models",
			"type": "Array",
			"class": "InternalModelMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/internal-model-map.ts",
			"line": 102,
			"description": "meta information about internalModels",
			"itemtype": "property",
			"name": "metadata",
			"type": "Object",
			"class": "InternalModelMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/internal-model-map.ts",
			"line": 111,
			"description": "Destroy all models in the internalModelTest and wipe metadata.",
			"itemtype": "method",
			"name": "clear",
			"class": "InternalModelMap",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 68,
			"description": "The loading state of this array",
			"itemtype": "property",
			"name": "isLoaded",
			"type": "Boolean",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 76,
			"description": "Used for async `hasMany` arrays\nto keep track of when they will resolve.",
			"itemtype": "property",
			"name": "promise",
			"type": "Ember.RSVP.Promise",
			"access": "private",
			"tagname": "",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 85,
			"description": "Metadata associated with the request for async hasMany relationships.\n\nExample\n\nGiven that the server returns the following JSON payload when fetching a\nhasMany relationship:\n\n```js\n{\n  \"comments\": [{\n    \"id\": 1,\n    \"comment\": \"This is the first comment\",\n  }, {\n// ...\n  }],\n\n  \"meta\": {\n    \"page\": 1,\n    \"total\": 5\n  }\n}\n```\n\nYou can then access the metadata via the `meta` property:\n\n```js\npost.get('comments').then(function(comments) {\n  var meta = comments.get('meta');\n\n// meta.page => 1\n// meta.total => 5\n});\n```",
			"itemtype": "property",
			"name": "meta",
			"type": "Object",
			"access": "public",
			"tagname": "",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 126,
			"description": "`true` if the relationship is polymorphic, `false` otherwise.",
			"itemtype": "property",
			"name": "isPolymorphic",
			"type": "Boolean",
			"access": "private",
			"tagname": "",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 134,
			"description": "The relationship which manages this array.",
			"itemtype": "property",
			"name": "relationship",
			"type": "ManyRelationship",
			"access": "private",
			"tagname": "",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 248,
			"description": "Reloads all of the records in the manyArray. If the manyArray\nholds a relationship that was originally fetched using a links url\nEmber Data will revisit the original links url to repopulate the\nrelationship.\n\nIf the manyArray holds the result of a `store.query()` reload will\nre-run the original query.\n\nExample\n\n```javascript\nvar user = store.peekRecord('user', 1)\nuser.login().then(function() {\n  user.get('permissions').then(function(permissions) {\n    return permissions.reload();\n  });\n});\n```",
			"itemtype": "method",
			"name": "reload",
			"access": "public",
			"tagname": "",
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 276,
			"description": "Saves all of the records in the `ManyArray`.\n\nExample\n\n```javascript\nstore.findRecord('inbox', 1).then(function(inbox) {\n  inbox.get('messages').then(function(messages) {\n    messages.forEach(function(message) {\n      message.set('isRead', true);\n    });\n    messages.save()\n  });\n});\n```",
			"itemtype": "method",
			"name": "save",
			"return": { "description": "promise", "type": "PromiseArray" },
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/many-array.js",
			"line": 307,
			"description": "Create a child record within the owner",
			"itemtype": "method",
			"name": "createRecord",
			"access": "private",
			"tagname": "",
			"params": [{ "name": "hash", "description": "", "type": "Object" }],
			"return": { "description": "record", "type": "Model" },
			"class": "ManyArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/normalize-model-name.js",
			"line": 10,
			"description": "This method normalizes a modelName into the format Ember Data uses\ninternally.",
			"itemtype": "method",
			"name": "normalizeModelName",
			"access": "public",
			"tagname": "",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "normalizedModelName", "type": "String" },
			"class": "RecordArrayManager",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-array-manager.js",
			"line": 132,
			"description": "Get the `RecordArray` for a modelName, which contains all loaded records of\ngiven modelName.",
			"itemtype": "method",
			"name": "liveRecordArrayFor",
			"params": [{ "name": "modelName", "description": "", "type": "String" }],
			"return": { "description": "", "type": "RecordArray" },
			"class": "RecordArrayManager",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-array-manager.js",
			"line": 174,
			"description": "Create a `RecordArray` for a modelName.",
			"itemtype": "method",
			"name": "createRecordArray",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "_content", "description": "(optional|private)", "type": "Array" }
			],
			"return": { "description": "", "type": "RecordArray" },
			"class": "RecordArrayManager",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-array-manager.js",
			"line": 203,
			"description": "Create a `AdapterPopulatedRecordArray` for a modelName with given query.",
			"itemtype": "method",
			"name": "createAdapterPopulatedRecordArray",
			"params": [
				{ "name": "modelName", "description": "", "type": "String" },
				{ "name": "query", "description": "", "type": "Object" }
			],
			"return": { "description": "", "type": "AdapterPopulatedRecordArray" },
			"class": "RecordArrayManager",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/record-array-manager.js",
			"line": 247,
			"description": "Unregister a RecordArray.\nSo manager will not update this array.",
			"itemtype": "method",
			"name": "unregisterRecordArray",
			"params": [{ "name": "array", "description": "", "type": "RecordArray" }],
			"class": "RecordArrayManager",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/schema-definition-service.ts",
			"line": 79,
			"params": [
				{ "name": "store", "description": "" },
				{ "name": "cache", "description": "modelFactoryCache" },
				{ "name": "normalizedModelName", "description": "already normalized modelName" }
			],
			"return": { "description": "", "type": "*" },
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 14,
			"description": "An array of snapshots",
			"access": "private",
			"tagname": "",
			"itemtype": "property",
			"name": "_snapshots",
			"type": "{Array}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 22,
			"description": "An array of records",
			"access": "private",
			"tagname": "",
			"itemtype": "property",
			"name": "_recordArray",
			"type": "{Array}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 30,
			"description": "Number of records in the array\n\nExample\n\n```app/adapters/post.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  shouldReloadAll(store, snapshotRecordArray) {\n    return !snapshotRecordArray.length;\n  },\n});\n```",
			"itemtype": "property",
			"name": "length",
			"type": "{Number}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 52,
			"description": "Meta objects for the record array.\n\nExample\n\n```app/adapters/post.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  shouldReloadAll(store, snapshotRecordArray) {\n    var lastRequestTime = snapshotRecordArray.meta.lastRequestTime;\n    var twentyMinutes = 20 * 60 * 1000;\n    return Date.now() > lastRequestTime + twentyMinutes;\n  },\n});\n```",
			"itemtype": "property",
			"name": "meta",
			"type": "{Object}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 74,
			"description": "A hash of adapter options passed into the store method for this request.\n\nExample\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findAll(store, type, sinceToken, snapshotRecordArray) {\n    if (snapshotRecordArray.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```",
			"itemtype": "property",
			"name": "adapterOptions",
			"type": "{Object}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 97,
			"description": "The relationships to include for this request.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  findAll(store, type, snapshotRecordArray) {\n    var url = `/${type.modelName}?include=${encodeURIComponent(snapshotRecordArray.include)}`;\n\n    return fetch(url).then((response) => response.json())\n  }\n});\n```",
			"itemtype": "property",
			"name": "include",
			"type": "{String|Array}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 120,
			"description": "The type of the underlying records for the snapshots in the array, as a Model",
			"itemtype": "property",
			"name": "type",
			"type": "{Model}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 128,
			"description": "The modelName of the underlying records for the snapshots in the array, as a Model",
			"itemtype": "property",
			"name": "type",
			"type": "{Model}",
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot-record-array.js",
			"line": 137,
			"description": "Get snapshots of the underlying record array\n\nExample\n\n```app/adapters/post.js\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default JSONAPIAdapter.extend({\n  shouldReloadAll(store, snapshotArray) {\n    var snapshots = snapshotArray.snapshots();\n\n    return snapshots.any(function(ticketSnapshot) {\n      var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');\n      if (timeDiff > 20) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n});\n```",
			"itemtype": "method",
			"name": "snapshots",
			"return": { "description": "Array of snapshots", "type": "Array" },
			"class": "SnapshotRecordArray",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 52,
			"description": "The id of the snapshot's underlying record\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.id; // => '1'\n```",
			"itemtype": "property",
			"name": "id",
			"type": "{String}",
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 67,
			"description": "A hash of adapter options",
			"itemtype": "property",
			"name": "adapterOptions",
			"type": "{Object}",
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 75,
			"description": "The name of the type of the underlying record for this snapshot, as a string.",
			"itemtype": "property",
			"name": "modelName",
			"type": "{String}",
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 88,
			"description": "The underlying record for this snapshot. Can be used to access methods and\nproperties defined on the record.\n\nExample\n\n```javascript\nlet json = snapshot.record.toJSON();\n```",
			"itemtype": "property",
			"name": "record",
			"type": "{Model}",
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 134,
			"description": "The type of the underlying record for this snapshot, as a Model.",
			"itemtype": "property",
			"name": "type",
			"type": "{Model}",
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 153,
			"description": "Returns the value of an attribute.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attr('author'); // => 'Tomster'\npostSnapshot.attr('title'); // => 'Ember.js rocks'\n```\n\nNote: Values are loaded eagerly and cached when the snapshot is created.",
			"itemtype": "method",
			"name": "attr",
			"params": [{ "name": "keyName", "description": "", "type": "String" }],
			"return": { "description": "The attribute value or undefined", "type": "Object" },
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 177,
			"description": "Returns all attributes and their corresponding values.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }\n```",
			"itemtype": "method",
			"name": "attributes",
			"return": { "description": "All attributes of the current snapshot", "type": "Object" },
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 194,
			"description": "Returns all changed attributes and their old and new values.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostModel.set('title', 'Ember.js rocks!');\npostSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n```",
			"itemtype": "method",
			"name": "changedAttributes",
			"return": {
				"description": "All changed attributes of the current snapshot",
				"type": "Object"
			},
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 220,
			"description": "Returns the current value of a belongsTo relationship.\n\n`belongsTo` takes an optional hash of options as a second parameter,\ncurrently supported options are:\n\n- `id`: set to `true` if you only want the ID of the related record to be\nreturned.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, title: 'Hello World' });\n// store.createRecord('comment', { body: 'Lorem ipsum', post: post });\ncommentSnapshot.belongsTo('post'); // => Snapshot\ncommentSnapshot.belongsTo('post', { id: true }); // => '1'\n\n// store.push('comment', { id: 1, body: 'Lorem ipsum' });\ncommentSnapshot.belongsTo('post'); // => undefined\n```\n\nCalling `belongsTo` will return a new Snapshot as long as there's any known\ndata for the relationship available, such as an ID. If the relationship is\nknown but unset, `belongsTo` will return `null`. If the contents of the\nrelationship is unknown `belongsTo` will return `undefined`.\n\nNote: Relationships are loaded lazily and cached upon first access.",
			"itemtype": "method",
			"name": "belongsTo",
			"params": [
				{ "name": "keyName", "description": "", "type": "String" },
				{ "name": "options", "description": "", "type": "Object", "optional": true }
			],
			"return": {
				"description": "A snapshot or ID of a known\nrelationship or null if the relationship is known but unset. undefined\nwill be returned if the contents of the relationship is unknown.",
				"type": "(Snapshot|String|null|undefined)"
			},
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 305,
			"description": "Returns the current value of a hasMany relationship.\n\n`hasMany` takes an optional hash of options as a second parameter,\ncurrently supported options are:\n\n- `ids`: set to `true` if you only want the IDs of the related records to be\nreturned.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\npostSnapshot.hasMany('comments'); // => [Snapshot, Snapshot]\npostSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']\n\n// store.push('post', { id: 1, title: 'Hello World' });\npostSnapshot.hasMany('comments'); // => undefined\n```\n\nNote: Relationships are loaded lazily and cached upon first access.",
			"itemtype": "method",
			"name": "hasMany",
			"params": [
				{ "name": "keyName", "description": "", "type": "String" },
				{ "name": "options", "description": "", "type": "Object", "optional": true }
			],
			"return": {
				"description": "An array of snapshots or IDs of a known\nrelationship or an empty array if the relationship is known but unset.\nundefined will be returned if the contents of the relationship is unknown.",
				"type": "(Array|undefined)"
			},
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 382,
			"description": "Iterates through all the attributes of the model, calling the passed\nfunction on each attribute.\n\nExample\n\n```javascript\nsnapshot.eachAttribute(function(name, meta) {\n  // ...\n});\n```",
			"itemtype": "method",
			"name": "eachAttribute",
			"params": [
				{ "name": "callback", "description": "the callback to execute", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Object",
					"optional": true
				}
			],
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 409,
			"description": "Iterates through all the relationships of the model, calling the passed\nfunction on each relationship.\n\nExample\n\n```javascript\nsnapshot.eachRelationship(function(name, relationship) {\n  // ...\n});\n```",
			"itemtype": "method",
			"name": "eachRelationship",
			"params": [
				{ "name": "callback", "description": "the callback to execute", "type": "Function" },
				{
					"name": "binding",
					"description": "the value to which the callback's `this` should be bound",
					"type": "Object",
					"optional": true
				}
			],
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/snapshot.js",
			"line": 436,
			"description": "Serializes the snapshot using the serializer for the model.\n\nExample\n\n```app/adapters/application.js\nimport Adapter from '@ember-data/adapter';\n\nexport default Adapter.extend({\n  createRecord(store, type, snapshot) {\n    var data = snapshot.serialize({ includeId: true });\n    var url = `/${type.modelName}`;\n\n    return fetch(url, {\n      method: 'POST',\n      body: data,\n    }).then((response) => response.json())\n  }\n});\n```",
			"itemtype": "method",
			"name": "serialize",
			"params": [{ "name": "options", "description": "", "type": "Object" }],
			"return": {
				"description": "an object whose values are primitive JSON values only",
				"type": "Object"
			},
			"class": "Snapshot",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/ts-upgrade-map.ts",
			"line": 9,
			"description": "Maps public interfaces to internal class implementations",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/system/ts-upgrade-map.ts",
			"line": 19,
			"description": "Casts a public interface to the matching internal class implementation",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/utils/brand.ts",
			"line": 7,
			"description": "Use this brand to assign a string key to an interface\nfor mapping the interface to a tightly coupled internal\nclass implementation.\n\nThis allows us to expose the interface publicly but\nseamlessly upgrade these interfaces for our own use\ninternally when internal methods and properties are\nneeded.",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/utils/symbol.ts",
			"line": 5,
			"description": "This symbol provides a Symbol replacement for browsers that do not have it\n(eg. IE 11).\n\nThe replacement is different from the native Symbol in some ways. It is a\nfunction that produces an output:\n- iterable;\n- that is a string, not a symbol.",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 22,
			"description": "Serves as a reference to a `Resource` but does not contain\nany data itself.\n\nUsed to establish relationship linkages between `Resources` and\nto address data that may not be available synchronously.\n\n[JSON:API Spec](https://jsonapi.org/format/#document-resource-identifier-objects)",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 35,
			"description": "While not officially part of the `JSON:API` spec,\n`ember-data` allows the use of `lid` as a local\nidentifier for a `Resource`.",
			"recommended": "It is best to include the lid used when creating\n  a new resource if this is the response to a new resource creation,\n  also recommended if this resource type uses secondary indexes.\n\nOnce a `ResourceIdentifierObject` has been seen by the cache, `lid`\nshould always be present. Only when inbound from the an `API` response\nis `lid` considered optional.\n\n[Identifiers RFC](https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md#ember-data--identifiers)",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 52,
			"description": "While valid in the `JSON:API` spec,\n`ember-data` ignores `meta` on `ResourceIdentifierObjects`",
			"ignored": "this property goes un-utilized and will be lost",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 61,
			"description": "Serves as a reference to a resource created on the client\nbut not yet persisted.",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 66,
			"description": "Resources newly created on the client _may_\nnot have an `id` available to them prior\nto completion of their first successful `save`.\n\n`id` will be `null` in this case.",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 76,
			"description": "Resources newly created on the client _will always_\nhave an `lid` assigned immediately and available.",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/ember-data-json-api.ts",
			"line": 98,
			"description": "Contains the data for an existing resource in JSON:API format",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/identifier.ts",
			"line": 15,
			"description": "An Identifier specific to a record which may or may not\nbe present in the cache.\n\nThe absence of an `id` DOES NOT indicate that this\nIdentifier is for a new client-created record as it\nmay also indicate that it was generated for a secondary\nindex and the primary `id` index is not yet known.",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/identifier.ts",
			"line": 29,
			"description": "Used when an Identifier is known to be the stable version",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/identifier.ts",
			"line": 38,
			"description": "Used when a RecordIdentifier is known to be the stable version",
			"internal": "",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/identifier.ts",
			"line": 49,
			"description": "A method which can expect to receive various data as its first argument\nand the name of a bucket as its second argument. Currently the second\nargument will always be `record` data should conform to a `json-api`\n`Resource` interface, but will be the normalized json data for a single\nresource that has been given to the store.\n\nThe method must return a unique (to at-least the given bucket) string identifier\nfor the given data as a string to be used as the `lid` of an `Identifier` token.\n\nThis method will only be called by either `getOrCreateRecordIdentifier` or\n`createIdentifierForNewRecord` when an identifier for the supplied data\nis not already known via `lid` or `type + id` combo and one needs to be\ngenerated or retrieved from a proprietary cache.\n\n`data` will be the same data argument provided to `getOrCreateRecordIdentifier`\nand in the `createIdentifierForNewRecord` case will be an object with\nonly `type` as a key.",
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 124,
			"description": "This method is responsible for normalizing the value resolved from the promise returned\nby an Adapter request into the format expected by the `Store`.\n\nThe output should be a [JSON:API Document](https://jsonapi.org/format/#document-structure)\nwith the following additional restrictions:\n\n- `type` should be formatted in the `singular` `dasherized` `lowercase` form\n- `members` (the property names of attributes and relationships) should be formatted\n   to match their definition in the corresponding `Model` definition. Typically this\n   will be `camelCase`.\n- [`lid`](https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md) is\n   a valid optional sibling to `id` and `type` in both [Resources](https://jsonapi.org/format/#document-resource-objects)\n   and [Resource Identifier Objects](https://jsonapi.org/format/#document-resource-identifier-objects)",
			"itemtype": "method",
			"name": "normalizeResponse",
			"access": "public",
			"tagname": "",
			"params": [
				{
					"name": "store",
					"description": "The store service that initiated the request being normalized",
					"type": "Store"
				},
				{
					"name": "schema",
					"description": "An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
					"type": "ShimModelClass"
				},
				{
					"name": "rawPayload",
					"description": "The raw JSON response data returned from an API request.\n This correlates to the value the promise returned by the adapter method that performed\n the request resolved to.",
					"type": "JSONObject"
				},
				{
					"name": "id",
					"description": "For a findRecord request, this is the id initially provided\n in the call to store.findRecord. Else this value is null.",
					"type": "String|null"
				},
				{
					"name": "requestType",
					"description": "The\n type of request the Adapter had been asked to perform.",
					"type": "'findRecord' | 'queryRecord' | 'findAll' | 'findBelongsTo' | 'findHasMany' | 'findMany' | 'query' | 'createRecord' | 'deleteRecord' | 'updateRecord'"
				}
			],
			"return": {
				"description": "a document following the structure of a JSON:API Document.",
				"type": "JsonApiDocument"
			},
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 172,
			"description": "This method is responsible for serializing an individual record\nvia a [Snapshot](Snapshot) into the format expected by the API.\n\nThis method is called by `snapshot.serialize()`.\n\nWhen using `Model`, this method is called by `record.serialize()`.\n\nWhen using `JSONAPIAdapter` or `RESTAdapter` this method is called\nby `updateRecord` and `createRecord` if `Serializer.serializeIntoHash`\nis not implemented.",
			"itemtype": "method",
			"name": "serialize",
			"access": "public",
			"tagname": "",
			"params": [
				{
					"name": "snapshot",
					"description": "A Snapshot for the record to serialize",
					"type": "Snapshot"
				},
				{ "name": "options", "description": "", "type": "Object", "optional": true }
			],
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 191,
			"description": "This method is intended to normalize data into a [JSON:API Document](https://jsonapi.org/format/#document-structure)\nwith a data member containing a single [Resource](https://jsonapi.org/format/#document-resource-objects).\n\n- `type` should be formatted in the singular, dasherized and lowercase form\n- `members` (the property names of attributes and relationships) should be formatted\n   to match their definition in the corresponding `Model` definition. Typically this\n   will be `camelCase`.\n- [`lid`](https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md) is\n   a valid optional sibling to `id` and `type` in both [Resources](https://jsonapi.org/format/#document-resource-objects)\n   and [Resource Identifier Objects](https://jsonapi.org/format/#document-resource-identifier-objects)\n\nThis method is called by the `Store` when `store.normalize(modelName, payload)` is\ncalled. It is recommended to use `store.serializerFor(modelName).normalizeResponse`\nover `store.normalize`.\n\nThis method may be called when also using the `RESTSerializer`\nwhen `serializer.pushPayload` is called by `store.pushPayload`.\nHowever, it is recommended to use `store.push` over `store.pushPayload` after normalizing\nthe payload directly.\n\nExample:\n```js\nfunction pushPayload(store, modelName, rawPayload) {\n  const ModelClass = store.modelFor(modelName);\n  const serializer = store.serializerFor(modelName);\n  const jsonApiPayload = serializer.normalizeResponse(store, ModelClass, rawPayload, null, 'query');\n\n  return store.push(jsonApiPayload);\n}\n```\n\nThis method may be called when also using the `JSONAPISerializer`\nwhen normalizing included records. If mixing serializer usage in this way\nwe recommend implementing this method, but caution that it may lead\nto unexpected mixing of formats.\n\nThis method may also be called when normalizing embedded relationships when\nusing the `EmbeddedRecordsMixin`. If using this mixin in a serializer in\nyour application we recommend implementing this method, but caution that\nit may lead to unexpected mixing of formats.",
			"itemtype": "method",
			"name": "normalize [OPTIONAL]",
			"access": "public",
			"tagname": "",
			"optional": 1,
			"params": [
				{
					"name": "schema",
					"description": "An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
					"type": "ShimModelClass"
				},
				{
					"name": "rawPayload",
					"description": "Some raw JSON data to be normalized into a JSON:API Resource.",
					"type": "JSONObject"
				},
				{
					"name": "prop",
					"description": "When called by the EmbeddedRecordsMixin this param will be the\n property at which the object provided as rawPayload was found.",
					"type": "String",
					"optional": true
				}
			],
			"return": {
				"description": "A JSON:API Document\n containing a single JSON:API Resource\n as its primary data.",
				"type": "SingleResourceDocument"
			},
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 247,
			"description": "When using `JSONAPIAdapter` or `RESTAdapter` this method is called\nby `adapter.updateRecord` and `adapter.createRecord` if `serializer.serializeIntoHash`\nis implemented. If this method is not implemented, `serializer.serialize`\nwill be called in this case.\n\nYou can use this method to customize the root keys serialized into the payload.\nThe hash property should be modified by reference.\n\nFor instance, your API may expect resources to be keyed by underscored type in the payload:\n\n```js\n{\n  _user: {\n    type: 'user',\n    id: '1'\n  }\n}\n```\n\nWhich when using these adapters can be achieved by implementing this method similar\nto the following:\n\n```js\nserializeIntoHash(hash, ModelClass, snapshot, options) {\n  hash[`_${snapshot.modelName}`] = this.serialize(snapshot, options).data;\n}\n```",
			"itemtype": "method",
			"name": "serializeIntoHash [OPTIONAL]",
			"access": "public",
			"tagname": "",
			"optional": 1,
			"params": [
				{
					"name": "hash",
					"description": "A top most object of the request payload onto\n which to append the serialized record"
				},
				{
					"name": "schema",
					"description": "An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
					"type": "ShimModelClass"
				},
				{
					"name": "snapshot",
					"description": "A Snapshot for the record to serialize",
					"type": "Snapshot"
				},
				{ "name": "options", "description": "", "optional": true }
			],
			"return": { "description": "", "type": "Void" },
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
			"line": 289,
			"description": "This method allows for normalization of data when `store.pushPayload` is called\nand should be implemented if you want to use that method.\n\nThe method is responsible for pushing new data to the store using `store.push`\nonce any necessary normalization has occurred, and no data in the store will be\nupdated unless it does so.\n\nThe normalized form pushed to the store should be a [JSON:API Document](https://jsonapi.org/format/#document-structure)\nwith the following additional restrictions:\n\n- `type` should be formatted in the singular, dasherized and lowercase form\n- `members` (the property names of attributes and relationships) should be formatted\n   to match their definition in the corresponding `Model` definition. Typically this\n   will be `camelCase`.\n- [`lid`](https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md) is\n   a valid optional sibling to `id` and `type` in both [Resources](https://jsonapi.org/format/#document-resource-objects)\n   and [Resource Identifier Objects](https://jsonapi.org/format/#document-resource-identifier-objects)\n\nIf you need better control over normalization or want access to the records being added or updated\nin the store, we recommended using `store.push` over `store.pushPayload` after normalizing\nthe payload directly. This can even take advantage of an existing serializer for the format\nthe data is in, for example:\n\n```js\nfunction pushPayload(store, modelName, rawPayload) {\n  const ModelClass = store.modelFor(modelName);\n  const serializer = store.serializerFor(modelName);\n  const jsonApiPayload = serializer.normalizeResponse(store, ModelClass, rawPayload, null, 'query');\n\n  return store.push(jsonApiPayload);\n}\n```",
			"itemtype": "method",
			"name": "pushPayload [OPTIONAL]",
			"access": "public",
			"tagname": "",
			"optional": 1,
			"params": [
				{
					"name": "store",
					"description": "The store service that initiated the request being normalized",
					"type": "Store"
				},
				{
					"name": "rawPayload",
					"description": "The raw JSON response data returned from an API request.\n This JSON should be in the API format expected by the serializer.",
					"type": "JSONObject"
				}
			],
			"return": { "description": "", "type": "Void" },
			"class": "MinimumSerializerInterface",
			"module": "@ember-data/serializer"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data-record-wrapper.ts",
			"line": 34,
			"deprecated": true,
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data-schemas.ts",
			"line": 8,
			"internal": "",
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts",
			"line": 8,
			"description": "Provides a encapsulated API access to a subset of store methods\nfor RecordData implementations.",
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts",
			"line": 13,
			"internal": "",
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts",
			"line": 21,
			"description": "update the `id` for the record of type `modelName` with the corresponding `clientId`\nThis operation can only be done for records whose `id` is `null`.",
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data.ts",
			"line": 20,
			"deprecated": true,
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/ts-interfaces/record-data.ts",
			"line": 53,
			"deprecated": true,
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "../store/addon/-private/utils/promise-record.ts",
			"line": 9,
			"description": "Get the materialized model from the internalModel/promise\nthat returns an internal model and return it in a promiseObject.\n\nUseful for returning from find methods",
			"internal": "",
			"class": "@ember-data",
			"module": "@ember-data/store"
		},
		{
			"file": "addon/-private/core.js",
			"line": 10,
			"itemtype": "property",
			"name": "VERSION",
			"access": "public",
			"tagname": "",
			"static": 1,
			"class": "@ember-data",
			"module": "@ember-data"
		}
	],
	"warnings": [
		{
			"message": "replacing incorrect tag: returns with return",
			"line": " ../adapter/addon/rest.js:1355"
		},
		{ "message": "unknown tag: internal", "line": " ../debug/addon/index.js:113" },
		{ "message": "unknown tag: internal", "line": " ../debug/addon/index.js:180" },
		{ "message": "unknown tag: internal", "line": " ../debug/addon/index.js:280" },
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/identifiers/cache.ts:117"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/identifiers/cache.ts:129"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/identifiers/cache.ts:238"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:69"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:135"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:173"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/store/record-data-store-wrapper.ts:36"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/store/record-data-store-wrapper.ts:46"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/core-store.ts:3026"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/core-store.ts:3071"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/core-store.ts:3096"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/core-store.ts:3104"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/core-store.ts:3171"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/ts-upgrade-map.ts:9"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/system/ts-upgrade-map.ts:19"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/utils/brand.ts:7"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/utils/symbol.ts:5"
		},
		{
			"message": "unknown tag: recommended",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:35"
		},
		{
			"message": "unknown tag: ignored",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:52"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:29"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:38"
		},
		{
			"message": "replacing incorrect tag: returns with return",
			"line": " ../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts:124"
		},
		{
			"message": "replacing incorrect tag: returns with return",
			"line": " ../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts:191"
		},
		{
			"message": "replacing incorrect tag: returns with return",
			"line": " ../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts:247"
		},
		{
			"message": "replacing incorrect tag: returns with return",
			"line": " ../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts:289"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/record-data-schemas.ts:8"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts:13"
		},
		{
			"message": "unknown tag: internal",
			"line": " ../store/addon/-private/utils/promise-record.ts:9"
		},
		{
			"message": "Missing item type\nHelper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.",
			"line": " ../adapter/addon/rest.js:1355"
		},
		{
			"message": "Missing item type\nLoop over the discovered types and use the callbacks from watchModelTypes to notify\nthe consumer of this adapter about the mdoels.",
			"line": " ../debug/addon/index.js:113"
		},
		{ "message": "Missing item type", "line": " ../record-data/addon/-private/record-data.ts:51" },
		{
			"message": "Missing item type\nComputes the set of internal models reachable from `this` across exactly one\nrelationship.",
			"line": " ../record-data/addon/-private/record-data.ts:481"
		},
		{
			"message": "Missing item type\nComputes the set of internal models reachable from this internal model.\n\nReachability is determined over the relationship graph (ie a graph where\nnodes are internal models and edges are belongs to or has many\nrelationships).",
			"line": " ../record-data/addon/-private/record-data.ts:500"
		},
		{
			"message": "Missing item type\nReceives options passed to `store.createRecord` and is given the opportunity\nto handle them.\n\nThe return value is an object of options to pass to `Record.create()`",
			"line": " ../record-data/addon/-private/record-data.ts:629"
		},
		{
			"message": "Missing item type\nConvert array of 16 byte values to UUID string format of the form:\nXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
			"line": " ../store/addon/-private/identifiers/utils/uuid-v4.ts:49"
		},
		{
			"message": "Missing item type\nhook to allow management of merge conflicts with identifiers.\n\nwe allow late binding of this private internal merge so that `internalModelFactory`\ncan insert itself here to handle elimination of duplicates",
			"line": " ../store/addon/-private/identifiers/cache.ts:117"
		},
		{ "message": "Missing item type", "line": " ../store/addon/-private/identifiers/cache.ts:129" },
		{
			"message": "Missing item type\nallows us to peek without generating when needed\nuseful for the \"create\" case when we need to see if\nwe are accidentally overwritting something",
			"line": " ../store/addon/-private/identifiers/cache.ts:238"
		},
		{
			"message": "Missing item type\nThe InternalModelFactory handles the lifecyle of\ninstantiating, caching, and destroying InternalModel\ninstances.",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:69"
		},
		{
			"message": "Missing item type\nRetrieve the InternalModel for a given { type, id, lid }.\n\nIf an InternalModel does not exist, it instantiates one.\n\nIf an InternalModel does exist bus has a scheduled destroy,\n  the scheduled destroy will be cancelled.",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:135"
		},
		{
			"message": "Missing item type\nPeek the InternalModel for a given { type, id, lid }.\n\nIf an InternalModel does not exist, return `null`.",
			"line": " ../store/addon/-private/system/store/internal-model-factory.ts:173"
		},
		{
			"message": "Missing item type\nExists so that DefaultRecordData can check for model types\nin DEBUG for relationships. Should be refactored away.",
			"line": " ../store/addon/-private/system/store/record-data-store-wrapper.ts:36"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/system/store/record-data-store-wrapper.ts:46"
		},
		{
			"message": "Missing item type\nEmberData specific backburner instance",
			"line": " ../store/addon/-private/system/core-store.ts:210"
		},
		{
			"message": "Missing item type\nTODO Only needed temporarily for test support",
			"line": " ../store/addon/-private/system/core-store.ts:3026"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/system/core-store.ts:3071"
		},
		{
			"message": "Missing item type\nInstantiation hook allowing applications or addons to configure the store\nto utilize a custom RecordData implementation.",
			"line": " ../store/addon/-private/system/core-store.ts:3078"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/system/core-store.ts:3096"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/system/core-store.ts:3104"
		},
		{
			"message": "Missing item type\nTODO remove test usage",
			"line": " ../store/addon/-private/system/core-store.ts:3171"
		},
		{
			"message": "Missing item type\nFlag indicating whether all inverse records are available\n\ntrue if the inverse exists and is loaded (not empty)\ntrue if there is no inverse\nfalse if the inverse exists and is not loaded (empty)",
			"line": " ../store/addon/-private/system/core-store.ts:3658"
		},
		{
			"message": "Missing item type\nProvides a way to call Evented without logging deprecation warnings",
			"line": " ../store/addon/-private/system/deprecated-evented.js:29"
		},
		{
			"message": "Missing item type\nThis method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
			"line": " ../store/addon/-private/system/fetch-manager.ts:60"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/system/schema-definition-service.ts:79"
		},
		{
			"message": "Missing item type\nMaps public interfaces to internal class implementations",
			"line": " ../store/addon/-private/system/ts-upgrade-map.ts:9"
		},
		{
			"message": "Missing item type\nCasts a public interface to the matching internal class implementation",
			"line": " ../store/addon/-private/system/ts-upgrade-map.ts:19"
		},
		{
			"message": "Missing item type\nUse this brand to assign a string key to an interface\nfor mapping the interface to a tightly coupled internal\nclass implementation.\n\nThis allows us to expose the interface publicly but\nseamlessly upgrade these interfaces for our own use\ninternally when internal methods and properties are\nneeded.",
			"line": " ../store/addon/-private/ts-interfaces/utils/brand.ts:7"
		},
		{
			"message": "Missing item type\nThis symbol provides a Symbol replacement for browsers that do not have it\n(eg. IE 11).\n\nThe replacement is different from the native Symbol in some ways. It is a\nfunction that produces an output:\n- iterable;\n- that is a string, not a symbol.",
			"line": " ../store/addon/-private/ts-interfaces/utils/symbol.ts:5"
		},
		{
			"message": "Missing item type\nServes as a reference to a `Resource` but does not contain\nany data itself.\n\nUsed to establish relationship linkages between `Resources` and\nto address data that may not be available synchronously.\n\n[JSON:API Spec](https://jsonapi.org/format/#document-resource-identifier-objects)",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:22"
		},
		{
			"message": "Missing item type\nWhile not officially part of the `JSON:API` spec,\n`ember-data` allows the use of `lid` as a local\nidentifier for a `Resource`.",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:35"
		},
		{
			"message": "Missing item type\nWhile valid in the `JSON:API` spec,\n`ember-data` ignores `meta` on `ResourceIdentifierObjects`",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:52"
		},
		{
			"message": "Missing item type\nServes as a reference to a resource created on the client\nbut not yet persisted.",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:61"
		},
		{
			"message": "Missing item type\nResources newly created on the client _may_\nnot have an `id` available to them prior\nto completion of their first successful `save`.\n\n`id` will be `null` in this case.",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:66"
		},
		{
			"message": "Missing item type\nResources newly created on the client _will always_\nhave an `lid` assigned immediately and available.",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:76"
		},
		{
			"message": "Missing item type\nContains the data for an existing resource in JSON:API format",
			"line": " ../store/addon/-private/ts-interfaces/ember-data-json-api.ts:98"
		},
		{
			"message": "Missing item type\nAn Identifier specific to a record which may or may not\nbe present in the cache.\n\nThe absence of an `id` DOES NOT indicate that this\nIdentifier is for a new client-created record as it\nmay also indicate that it was generated for a secondary\nindex and the primary `id` index is not yet known.",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:15"
		},
		{
			"message": "Missing item type\nUsed when an Identifier is known to be the stable version",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:29"
		},
		{
			"message": "Missing item type\nUsed when a RecordIdentifier is known to be the stable version",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:38"
		},
		{
			"message": "Missing item type\nA method which can expect to receive various data as its first argument\nand the name of a bucket as its second argument. Currently the second\nargument will always be `record` data should conform to a `json-api`\n`Resource` interface, but will be the normalized json data for a single\nresource that has been given to the store.\n\nThe method must return a unique (to at-least the given bucket) string identifier\nfor the given data as a string to be used as the `lid` of an `Identifier` token.\n\nThis method will only be called by either `getOrCreateRecordIdentifier` or\n`createIdentifierForNewRecord` when an identifier for the supplied data\nis not already known via `lid` or `type + id` combo and one needs to be\ngenerated or retrieved from a proprietary cache.\n\n`data` will be the same data argument provided to `getOrCreateRecordIdentifier`\nand in the `createIdentifierForNewRecord` case will be an object with\nonly `type` as a key.",
			"line": " ../store/addon/-private/ts-interfaces/identifier.ts:49"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/ts-interfaces/record-data-record-wrapper.ts:34"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/ts-interfaces/record-data-schemas.ts:8"
		},
		{
			"message": "Missing item type\nProvides a encapsulated API access to a subset of store methods\nfor RecordData implementations.",
			"line": " ../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts:8"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts:13"
		},
		{
			"message": "Missing item type\nupdate the `id` for the record of type `modelName` with the corresponding `clientId`\nThis operation can only be done for records whose `id` is `null`.",
			"line": " ../store/addon/-private/ts-interfaces/record-data-store-wrapper.ts:21"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/ts-interfaces/record-data.ts:20"
		},
		{
			"message": "Missing item type",
			"line": " ../store/addon/-private/ts-interfaces/record-data.ts:53"
		},
		{
			"message": "Missing item type\nGet the materialized model from the internalModel/promise\nthat returns an internal model and return it in a promiseObject.\n\nUseful for returning from find methods",
			"line": " ../store/addon/-private/utils/promise-record.ts:9"
		}
	]
}
